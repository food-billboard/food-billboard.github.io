<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SVG学习</title>
    <link href="/2022/09/19/SVG%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/09/19/SVG%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="SVG学习"><a href="#SVG学习" class="headerlink" title="SVG学习"></a>SVG学习</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)<br>SVG 用来定义用于网络的基于矢量的图形<br>SVG 使用 XML 格式定义图形<br>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失<br>SVG 是万维网联盟的标准<br>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体</p></blockquote><p>学习<code>svg</code>的目的，是为了能在前端页面实现更多有意思的效果。<br>以下就是本人的学习笔记。  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h3><p><code>svg</code>标签的属性  </p><ul><li>width &amp; height  </li><li>version 版本  </li><li>xmlns 命名空间  </li><li>viewbox 可视区域<br>此属性表示裁剪一个矩形区域作为最终的可视区域（left top width height）<br>比如<code>20 20 100 100</code>表示能看到左上角(20, 20)为起点的宽高均为100的矩形区域。   </li></ul><h3 id="一些常用的属性"><a href="#一些常用的属性" class="headerlink" title="一些常用的属性"></a>一些常用的属性</h3><p>基本上这些属性都和<code>css</code>通用。  </p><h4 id="width-amp-height-amp-x-amp-y"><a href="#width-amp-height-amp-x-amp-y" class="headerlink" title="width &amp; height &amp; x &amp; y"></a>width &amp; height &amp; x &amp; y</h4><p>元素的宽高位置。  </p><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p>颜色填充  </p><svg width="100" height="100">  <rect fill="red" width="50" height="50"></rect></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;rect fill=&quot;red&quot; width=&quot;50&quot; height=&quot;50&quot;&gt;&lt;/rect&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke"><a href="#stroke" class="headerlink" title="stroke"></a>stroke</h4><p>描边  </p><svg width="100" height="100">  <rect x="10" y="10" fill="none" stroke="#f00" width="50" height="50"></rect></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;rect x=&quot;10&quot; y=&quot;10&quot; fill=&quot;none&quot; stroke=&quot;#f00&quot; width=&quot;50&quot; height=&quot;50&quot;&gt;&lt;/rect&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-width"><a href="#stroke-width" class="headerlink" title="stroke-width"></a>stroke-width</h4><p>描边的线条尺寸  </p><svg width="100" height="100">  <rect x="10" y="10" fill="none" stroke="#f00" stroke-width="10" width="50" height="50"></rect></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;rect x=&quot;10&quot; y=&quot;10&quot; fill=&quot;none&quot; stroke=&quot;#f00&quot; stroke-width=&quot;10&quot; width=&quot;50&quot; height=&quot;50&quot;&gt;&lt;/rect&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-dashoffset"><a href="#stroke-dashoffset" class="headerlink" title="stroke-dashoffset"></a>stroke-dashoffset</h4><p>设置虚线的偏移量</p><svg width="200" height="100">  <polyline points="20 20 150 20" stroke-dasharray="50 10" stroke="red" stroke-width="5"></polyline>  <polyline points="20 50 150 50" stroke-dasharray="50 10" stroke="blue" stroke-width="5" stroke-dashoffset="20"></polyline></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;200&quot; height=&quot;100&quot;&gt;<br>  &lt;polyline points=&quot;20 20 150 20&quot; stroke-dasharray=&quot;50 10&quot; stroke=&quot;red&quot; stroke-width=&quot;5&quot;&gt;&lt;/polyline&gt;<br>  &lt;polyline points=&quot;20 50 150 50&quot; stroke-dasharray=&quot;50 10&quot; stroke=&quot;blue&quot; stroke-width=&quot;5&quot; stroke-dashoffset=&quot;20&quot;&gt;&lt;/polyline&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-linejoin"><a href="#stroke-linejoin" class="headerlink" title="stroke-linejoin"></a>stroke-linejoin</h4><p>转折点的样式</p><svg width="200" height="200">  <polyline stroke-linejoin="miter" points="0 0 0 50 50 50" stroke="red" stroke-width="20" fill="none"></polyline>  <polyline stroke-linejoin="round" points="50 50 50 100 100 100" stroke="blue" stroke-width="20" fill="none"></polyline>  <polyline stroke-linejoin="bevel" points="100 100 100 150 150 150" stroke="blue" stroke-width="20" fill="none"></polyline></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;200&quot; height=&quot;100&quot;&gt;<br>  &lt;polyline stroke-linejoin=&quot;miter&quot; points=&quot;20 20 40 50 60 70&quot; stroke=&quot;red&quot; stroke-width=&quot;5&quot;&gt;&lt;/polyline&gt;<br>  &lt;polyline stroke-linejoin=&quot;round&quot; points=&quot;20 20 40 50 60 70&quot; stroke=&quot;blue&quot; stroke-width=&quot;5&quot;&gt;&lt;/polyline&gt;<br>  &lt;polyline stroke-linejoin=&quot;bevel&quot; points=&quot;20 20 40 50 60 70&quot; stroke=&quot;blue&quot; stroke-width=&quot;5&quot;&gt;&lt;/polyline&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-opacity"><a href="#stroke-opacity" class="headerlink" title="stroke-opacity"></a>stroke-opacity</h4><p>描边线条的透明度  </p><h4 id="stroke-linecap"><a href="#stroke-linecap" class="headerlink" title="stroke-linecap"></a>stroke-linecap</h4><p>描边的末端形状</p><svg width="100" height="100">  <g fill="none" stroke="black" stroke-width="6">    <path stroke-linecap="butt" d="M5 20 l65 0" />    <path stroke-linecap="round" d="M5 40 l65 0" />    <path stroke-linecap="square" d="M5 60 l65 0" />  </g></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;g fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;6&quot;&gt;<br>    &lt;path stroke-linecap=&quot;butt&quot; d=&quot;M5 20 l65 0&quot; /&gt;<br>    &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5 40 l65 0&quot; /&gt;<br>    &lt;path stroke-linecap=&quot;square&quot; d=&quot;M5 60 l65 0&quot; /&gt;<br>  &lt;/g&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-dasharray"><a href="#stroke-dasharray" class="headerlink" title="stroke-dasharray"></a>stroke-dasharray</h4><p>绘制虚线  </p><p>格式为<code>length margin, length margin, ...</code>  </p><ul><li>length 虚线长度  </li><li>margin 虚线间距  </li></ul><svg width="100" height="100">  <g fill="none" stroke="black" stroke-width="4">    <path stroke-dasharray="5,5" d="M5 20 l215 0" />    <path stroke-dasharray="10,10" d="M5 40 l215 0" />    <path stroke-dasharray="20,10,5,5,5,10" d="M5 60 l215 0" />  </g></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;g fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4&quot;&gt;<br>    &lt;path stroke-dasharray=&quot;5,5&quot; d=&quot;M5 20 l215 0&quot; /&gt;<br>    &lt;path stroke-dasharray=&quot;10,10&quot; d=&quot;M5 40 l215 0&quot; /&gt;<br>    &lt;path stroke-dasharray=&quot;20,10,5,5,5,10&quot; d=&quot;M5 60 l215 0&quot; /&gt;<br>  &lt;/g&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="rx-amp-ry"><a href="#rx-amp-ry" class="headerlink" title="rx &amp; ry"></a>rx &amp; ry</h4><p><strong>矩形</strong>的圆角<br><strong>椭圆</strong>的水平和垂直尺寸  </p><h4 id="cx-amp-cy"><a href="#cx-amp-cy" class="headerlink" title="cx &amp; cy"></a>cx &amp; cy</h4><p><strong>圆形</strong>的圆心  </p><h4 id="r"><a href="#r" class="headerlink" title="r"></a>r</h4><p><strong>圆形</strong>的半径   </p><h3 id="shapes-形状和文字"><a href="#shapes-形状和文字" class="headerlink" title="shapes 形状和文字"></a>shapes 形状和文字</h3><h4 id="rect（矩形）"><a href="#rect（矩形）" class="headerlink" title="rect（矩形）"></a>rect（矩形）</h4><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <rect width="50" height="50" fill="red" stroke-width="1" stroke="rgb(0,0,0)"/></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot; &gt;<br>  &lt;rect width=&quot;50&quot; height=&quot;50&quot; fill=&quot;red&quot; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot;/&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="circle（圆形）"><a href="#circle（圆形）" class="headerlink" title="circle（圆形）"></a>circle（圆形）</h4><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <circle cx="30" cy="30" r="10" fill="red" stroke-width="1" stroke="rgb(0,0,0)"/></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;circle cx=&quot;30&quot; cy=&quot;30&quot; r=&quot;10&quot; fill=&quot;red&quot; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot;/&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="ellipse（椭圆）"><a href="#ellipse（椭圆）" class="headerlink" title="ellipse（椭圆）"></a>ellipse（椭圆）</h4><p>类似于<strong>圆形</strong>，只是把<code>r</code>变成了<code>rx</code>和<code>ry</code>。  </p><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <ellipse cx="30" cy="30" rx="10" ry="5" fill="red" stroke-width="1" stroke="rgb(0,0,0)"/></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;ellipse cx=&quot;30&quot; cy=&quot;30&quot; rx=&quot;10&quot; ry=&quot;5&quot; fill=&quot;red&quot; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot;/&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="line（直线）"><a href="#line（直线）" class="headerlink" title="line（直线）"></a>line（直线）</h4><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <line x1='0' y1='0' x2='100' y2='100' stroke-width="1" stroke="rgb(0,0,0)"/></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;line x1=&#x27;0&#x27; y1=&#x27;0&#x27; x2=&#x27;100&#x27; y2=&#x27;100&#x27; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot;/&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="polyline（多线段）"><a href="#polyline（多线段）" class="headerlink" title="polyline（多线段）"></a>polyline（多线段）</h4><p><code>points</code>为点的集合，格式为<code>x1 y1, x2 y2, ...</code>  </p><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <polyline points="0 0, 100 0, 0 100, 0 0" stroke-width="1" stroke="rgb(0,0,0)" fill="none" /></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;polyline points=&quot;0 0, 100 0, 0 100, 0 0&quot; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot; fill=&quot;none&quot; /&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="polygon（多边形）"><a href="#polygon（多边形）" class="headerlink" title="polygon（多边形）"></a>polygon（多边形）</h4><p>和<code>polyline</code>相同，使用<code>points</code>设置点  </p><svg height="210" width="500">  <polygon points="100 10, 40 198, 190 78, 10 78, 160 198" fill="lime" stroke="purple" stroke-width="5" fill-rule="nonzero" /></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;polygon points=&quot;100 10, 40 198, 190 78, 10 78, 160 198&quot; fill=&quot;lime&quot; stroke=&quot;purple&quot; stroke-width=&quot;5&quot; fill-rule=&quot;nonzero&quot; /&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="path（路径）"><a href="#path（路径）" class="headerlink" title="path（路径）"></a>path（路径）</h4><p>重点来了，这个应该是平常用到的最多的一个东西。  </p><p>关键的属性在<code>d</code>上，描述了元素的整体路径的形状。<br>以下是相关的语法。  </p><blockquote><p>M = moveto 移动到某个位置<br>L = lineto 从当前点连线到指定点<br>H = horizontal lineto 从当前点水平连接指定点<br>V = vertical lineto 从当前点垂直连接指定点<br>C = curveto 三次贝塞尔曲线<br>S = smooth curveto 三次平滑贝塞尔曲线<br>Q = quadratic Bézier curve 二次贝塞尔曲线<br>T = smooth quadratic Bézier curveto 平滑二次贝塞尔曲线<br>A = elliptical Arc 圆弧（x轴半径，y轴半径，旋转角度，是否选择弧长较长的一段0短边|1长边，顺时针绘制1|逆时针0，终点x轴坐标，终点y轴坐标）<br>Z = closepath  闭合路径  </p></blockquote><p>以上的字母，大小表示绝对位置，小写表示相对位置。  </p><p><code>d</code>以<code>M</code>开头，  </p><svg width="200" height="200">  <path d="M10 10 L120 50 H140 V100" fill="none" stroke="red" stroke-width="2"></path></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;200&quot; height=&quot;200&quot;&gt;<br>  &lt;path d=&quot;M10 10 L120 50 H140 V100&quot; fill=&quot;none&quot; stroke=&quot;red&quot; stroke-width=&quot;2&quot;&gt;&lt;/path&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h5 id="A"><a href="#A" class="headerlink" title="A"></a>A</h5><p>从点(10, 10)开始，绘制x轴半径为50，y轴半径是20，旋转100度，以小弧度，逆时针到点（100， 100）处。  </p><svg width="200" height="200">  <path d="M10 10 A50 20 100 0 0 100 100" fill="none" stroke="red" stroke-width="2"></path></svg><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;svg width=<span class="hljs-string">&quot;200&quot;</span> height=<span class="hljs-string">&quot;200&quot;</span>&gt;<br>  &lt;path d=<span class="hljs-string">&quot;M10 10 A50 20 180 1 0 100 100&quot;</span> fill=<span class="hljs-string">&quot;none&quot;</span> stroke=<span class="hljs-string">&quot;red&quot;</span> stroke-width=<span class="hljs-string">&quot;2&quot;</span>&gt;&lt;/path&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="text（文本）"><a href="#text（文本）" class="headerlink" title="text（文本）"></a>text（文本）</h4><svg height="210" width="500">  <text x="50" y="50" fill="lime">I am Daniel</text></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg height=&quot;210&quot; width=&quot;500&quot;&gt;<br>  &lt;text x=&quot;50&quot; y=&quot;50&quot; fill=&quot;lime&quot;&gt;I am Daniel&lt;/text&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="defs"><a href="#defs" class="headerlink" title="defs"></a>defs</h4><p>将一些特殊的配置放在<code>defs</code>标签中，比如<strong>滤镜</strong>、<strong>渐变</strong>、<strong>阴影</strong>等。  </p><svg width="100" height="100">  <defs>    <filter id="f1">      <feGaussianBlur in="SourceGraphic" stdDeviation="15" />    </filter>  </defs>  <rect width="90" height="90" stroke="green" stroke-width="3" fill="yellow" filter="url(#f1)" /></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;defs&gt;<br>    &lt;filter id=&quot;f1&quot;&gt;<br>      &lt;feGaussianBlur in=&quot;SourceGraphic&quot; stdDeviation=&quot;15&quot; /&gt;<br>    &lt;/filter&gt;<br>  &lt;/defs&gt;<br>  &lt;rect width=&quot;90&quot; height=&quot;90&quot; stroke=&quot;green&quot; stroke-width=&quot;3&quot; fill=&quot;yellow&quot; filter=&quot;url(#f1)&quot; /&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h5 id="filter（滤镜）"><a href="#filter（滤镜）" class="headerlink" title="filter（滤镜）"></a>filter（滤镜）</h5><p>有如下滤镜：</p><blockquote><p>feBlend - 与图像相结合的滤镜<br>feColorMatrix - 用于彩色滤光片转换<br>feComponentTransfer<br>feComposite<br>feConvolveMatrix<br>feDiffuseLighting<br>feDisplacementMap<br>feFlood<br>feGaussianBlur<br>feImage<br>feMerge<br>feMorphology<br>feOffset - 过滤阴影<br>feSpecularLighting<br>feTile<br>feTurbulence<br>feDistantLight - 用于照明过滤<br>fePointLight - 用于照明过滤<br>feSpotLight - 用于照明过滤</p></blockquote><p>等等。  </p><h5 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h5><ul><li>线性渐变  </li></ul><svg width="100" height="100">  <defs>    <linearGradient id="linear" x1="0%" y1="0%" x2="100%" y2="100%">      <stop offset="0%" stop-color="red" stop-opacity="1"></stop>      <stop offset="100%" stop-color="yellow" stop-opacity="1"></stop>    </linearGradient>  </defs>  <rect width="50" height="50" fill="url(#linear)"></rect></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;defs&gt;<br>    &lt;linearGradient id=&quot;linear&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;100%&quot;&gt;<br>      &lt;stop offset=&quot;0%&quot; stop-color=&quot;red&quot; stop-opacity=&quot;1&quot;&gt;&lt;/stop&gt;<br>      &lt;stop offset=&quot;100%&quot; stop-color=&quot;yellow&quot; stop-opacity=&quot;1&quot;&gt;&lt;/stop&gt;<br>    &lt;/linearGradient&gt;<br>  &lt;/defs&gt;<br>  &lt;rect width=&quot;50&quot; height=&quot;50&quot; fill=&quot;url(#linear)&quot;&gt;&lt;/rect&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><ul><li>x1、y1、x2、y2表示线性渐变的方向  </li><li>id 表示渐变的名称  </li><li>stop 表示内部颜色的变化步骤  <ul><li>offset 表示线性的位置  </li><li>stop-color 表示颜色  </li><li>stop-opacity 表示透明度  </li></ul></li></ul><ul><li>径向渐变</li></ul><svg width="100" height="100">  <defs>    <radialGradient id="radial" r="100%" cx="100%" cy="50%" fx="50%" fy="50%">      <stop offset="0%" stop-color="red" stop-opacity="1"></stop>      <stop offset="100%" stop-color="yellow" stop-opacity="1"></stop>    </radialGradient>  </defs>  <circle r="50" cx="50" cy="50" fill="url(#radial)"></rect></svg><p>  与线性渐变类似  </p><ul><li>r 表示渐变的圆形大小  </li><li>fx、fy 表示渐变的焦点，也可以说是一个灯光效果，或者说渐变<code>圆心</code>在图形上的位置。    </li><li>fr 表示焦点的大小  </li><li>cx、cy 表示渐变结束的圆心位置  </li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>以上就是本人相关的笔记。<br>下面给到一些链接：<br><a href="https://c.runoob.com/more/svgeditor/">编辑器</a><br><a href="https://www.runoob.com/svg/svg-reference.html">API参考</a>  </p><h2 id="附增"><a href="#附增" class="headerlink" title="附增"></a>附增</h2><p>这里保存一些平常看到的有意思的<code>svg</code>效果👍。    </p>]]></content>
    
    
    <categories>
      
      <category>svg</category>
      
      <category>css</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css svg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一创聚宽学习</title>
    <link href="/2022/09/12/%E4%B8%80%E5%88%9B%E8%81%9A%E5%AE%BD%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/09/12/%E4%B8%80%E5%88%9B%E8%81%9A%E5%AE%BD%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="一创聚宽学习"><a href="#一创聚宽学习" class="headerlink" title="一创聚宽学习"></a>一创聚宽学习</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>作为一个🌶🐔技术人，每天想的都是如何搞💰，每天盯着🐔💰涨涨跌跌，一夜回到解放前，受够了。是时候通过知识创造财富了。<br>学习量化交易，如果通过自动化来进行交易，实现财富自由👍。  </p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://ycjq.95358.com/">一创聚宽</a>是国内比较有名的股票量化交易平台，它帮助开发者封装了很多实用的函数，并提供了实盘数据，以及实盘接入帮助。大大简化了开发者的开发过程。本文就简单的记录一下自己的学习笔记📝。  </p><h3 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span>(<span class="hljs-params">context</span>):</span><br>  run_daily(period, time=<span class="hljs-string">&#x27;every_bar&#x27;</span>)<br>  g.security = <span class="hljs-string">&#x27;000001.XSHE&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">period</span>(<span class="hljs-params">context</span>):</span><br>  order(g.security, <span class="hljs-number">100</span>) <br></code></pre></td></tr></table></figure><p>以上就是一个简单的结构。  </p><ul><li><code>initialize</code>表示初始化。  </li><li><code>run_daily</code>表示循环执行的函数。<br><a href="https://ycjq.95358.com/help/api/help?name=api#run_daily">传送门</a>  </li><li><code>order</code>表示买入卖出的函数。<br><a href="https://ycjq.95358.com/help/api/help?name=api#%E4%BA%A4%E6%98%93%E5%87%BD%E6%95%B0%E2%99%A0">传送门</a>  </li><li><code>g</code>是一个全局的变量，可以把自定义的一些变量赋值到它下面  </li><li><code>context</code>也是个类似<code>g</code>的变量，当中存储了很多有用的信息。  <img src="/images/一创聚宽学习/context.png" /></li></ul><h3 id="一些常用的函数和属性"><a href="#一些常用的函数和属性" class="headerlink" title="一些常用的函数和属性"></a>一些常用的函数和属性</h3><h4 id="SecurityUnitData"><a href="#SecurityUnitData" class="headerlink" title="SecurityUnitData"></a>SecurityUnitData</h4><p>股票行情数据格式  </p><blockquote><p>open: 时间段开始时价格<br>close: 时间段结束时价格<br>low: 最低价<br>high: 最高价<br>volume: 成交的股票数量<br>money: 成交的金额<br>factor: 前复权因子<br>avg: 这段时间的平均价<br>pre_close: 前一个单位时间结束时的价格<br>paused: 这只股票是否停牌，是则为1，否则为0  </p></blockquote><h4 id="get-index-stocks"><a href="#get-index-stocks" class="headerlink" title="get_index_stocks"></a>get_index_stocks</h4><p>获取指数成分股<br><code>get_index_stocks(&quot;000300.XSHG&quot;, &#39;2022-01-01&#39;)</code><br>获取<code>2022-01-01</code>时的沪深300的股票集合  </p><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><p>股票历史行情数据  </p><ul><li>count: 结果集的行数  </li><li>unit: 时间长度 <code>1d</code> || <code>1m</code>   </li><li>field 数据类型 <code>SecurityUnitData</code>  </li><li>security_list 股票列表  </li><li>df  </li><li>skip_paused 是否跳过不交易日期（包括停牌, 未上市或者退市后的日期），暂时没有太理解，后面用到了再看。  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">history(field=<span class="hljs-string">&#x27;close&#x27;</span>, count=<span class="hljs-number">3</span>, security_list=[<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-string">&#x27;000002.XSHE&#x27;</span>])<br><span class="hljs-comment"># 数据格式：</span><br><span class="hljs-comment"># 两支股票的收盘价</span><br><span class="hljs-comment">#                      </span><br><span class="hljs-comment"># 2016-08-29  11.05  9.31</span><br><span class="hljs-comment"># 2016-08-30  11.1  9.33</span><br><span class="hljs-comment"># 2016-08-31  12.33  9.36</span><br></code></pre></td></tr></table></figure><h4 id="attribute-history"><a href="#attribute-history" class="headerlink" title="attribute_history"></a>attribute_history</h4><p>类似于上面的<code>history</code><br>但是只能获取一支股票，并且能获得多个字段  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">attribute_history(field=[<span class="hljs-string">&#x27;money&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>], count=<span class="hljs-number">3</span>, security=<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>)<br><span class="hljs-comment"># 结果如下：</span><br><span class="hljs-comment">#                    money  high</span><br><span class="hljs-comment"># 2016-08-29  5.322954e+08  9.31</span><br><span class="hljs-comment"># 2016-08-30  5.618541e+08  9.33</span><br><span class="hljs-comment"># 2016-08-31  4.638758e+08  9.36</span><br></code></pre></td></tr></table></figure><h4 id="get-fundamentals"><a href="#get-fundamentals" class="headerlink" title="get_fundamentals"></a>get_fundamentals</h4><p>获取公司<strong>财务数据</strong>  </p><ul><li>query<br>数据查询，类似于<code>mysql</code>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 快速上手模板</span><br><span class="hljs-comment"># query(表.字段).filter(筛选条件).order_by(排序方法).limit(数量上限)</span><br><span class="hljs-comment">#比较长的话可以分行写</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><h4 id="市价单和限价单"><a href="#市价单和限价单" class="headerlink" title="市价单和限价单"></a>市价单和限价单</h4><ul><li>市价单是指投资者在交易个股时，以市场的价格成交，而限价单一般是指个股的市场价格，达到投资者指定的价格时才成交。  </li><li>市价单通常可以很快地成交，而限价单的优势在于以理想的价格成交，这两种单适合不同的行情。  </li><li>投资者以市价委托交易的优点是在上涨行情下能及时买进，在下跌行情下能及时卖出，而以限价委托交易的优点是利于投资者控制交易成本。<br><a href="https://www.51credit.com/wenda/925559.html">原文</a>  </li></ul><h4 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h4><p>交易次数、策略收益、基准收益、年化收益率、最大回撤率、Alpha、Beta、夏普比率。  </p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>内容大概就这些，关于一些高深的用法，以及一些<code>API</code>的使用，等后面实际使用时，再慢慢补充吧👍。  </p>]]></content>
    
    
    <categories>
      
      <category>量化交易</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trade</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>parallax使用</title>
    <link href="/2022/07/08/parallax%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/08/parallax%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近想给自己的项目设计一个比较炫酷的首页，发现了这个工具–<a href="http://matthew.wagerfield.com/parallax/">parallax</a>，故在这里做一个简单的介绍👍 。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><code>parallax</code>顾名思义，视差。<br>百度这样解释：</p><blockquote><p>视差就是从有一定距离的两个点上观察同一个目标所产生的方向差异。从目标看两个点之间的夹角，叫做这两个点的视差，两点之间的距离称作基线。只要知道视差角度和基线长度，就可以计算出目标和观测者之间的距离。  </p></blockquote><p><code>parallax</code>帮助你完成了相关工作，你只需要写好相关的<code>html</code>结构，再通过简单的配置即可完成非常炫酷的视差动画。  </p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>下面是对其配置做的一个简单的介绍。  </p><h4 id="relativeInput"><a href="#relativeInput" class="headerlink" title="relativeInput"></a>relativeInput</h4><p>对场景进行全方位的控制。<br>开启时，容器内的元素的视差效果表现为整个页面。  </p><h4 id="hoverOnly"><a href="#hoverOnly" class="headerlink" title="hoverOnly"></a>hoverOnly</h4><p>是否只在鼠标在场景内触发效果。<br>当关闭该功能时，只有鼠标在容器元素内时，才会有视差的动画效果。  </p><h4 id="clipRelativeInput"><a href="#clipRelativeInput" class="headerlink" title="clipRelativeInput"></a>clipRelativeInput</h4><p>控制视差效果的边界。<br>开启时，当效果触碰到容器的边缘时，便会停止动画。  </p><h4 id="inputElement"><a href="#inputElement" class="headerlink" title="inputElement"></a>inputElement</h4><p>控制触发视差效果的范围，一般是一个元素节点。<br>和<code>relativeInput</code>和<code>hoverOnly</code>配合使用。  </p><h4 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h4><p>控制需要触发视差动画的元素，当默认为<code>null</code>时，容器内的所有元素均会触发。  </p><h4 id="limitX-amp-limitY"><a href="#limitX-amp-limitY" class="headerlink" title="limitX &amp; limitY"></a>limitX &amp; limitY</h4><p>元素在轴上运动的最大距离。<br>设置<code>false</code>表示不限制。  </p><h4 id="invertX-amp-invertY"><a href="#invertX-amp-invertY" class="headerlink" title="invertX &amp; invertY"></a>invertX &amp; invertY</h4><p>反转元素的运动方向，设置<code>true</code>则运动方向与鼠标移动方向相反。  </p><h4 id="calibrateX-amp-calibrateY"><a href="#calibrateX-amp-calibrateY" class="headerlink" title="calibrateX &amp; calibrateY"></a>calibrateX &amp; calibrateY</h4><p>保存元素初始的位置，并根据该值进行运动。（🤔，没太懂，好像没啥效果）  </p><h4 id="scalarX-amp-scalarY"><a href="#scalarX-amp-scalarY" class="headerlink" title="scalarX &amp; scalarY"></a>scalarX &amp; scalarY</h4><p>设置运动距离的乘数，控制元素运动的大小。  </p><h4 id="frictionX-amp-frictionY"><a href="#frictionX-amp-frictionY" class="headerlink" title="frictionX &amp; frictionY"></a>frictionX &amp; frictionY</h4><p>设置元素运动的缓冲，低于<code>1</code>时，会减缓运动的速度，默认<code>1.5</code>  </p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>上面的一些<code>API</code>同样可以通过实例进行控制，比如<code>limit</code>、<code>invert</code>、<code>calibrate</code>、<code>scalar</code>、<code>friction</code><br>还有以下常用方法<br><code>enable</code>、<code>disable</code>、<code>destroy</code>、<code>version</code>  </p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
      <category>前端</category>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>animation</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gsap动画的简单使用</title>
    <link href="/2022/06/23/gsap%E5%8A%A8%E7%94%BB%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/23/gsap%E5%8A%A8%E7%94%BB%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近突然需要写一些包含多种动画的首页，偶然找到了<a href="https://greensock.com/">gsap</a>，发现是真的好用，这里对其一些<code>api</code>做下简单介绍。  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><code>gsap</code>是一个<code>javascript</code>动画库，可以让开发者通过简单的<code>api</code>完成非常复杂的动画，包含非常多种类型的动画的实现，比如<code>css3</code>动画，<code>svg</code>动画以及<code>canvas</code>、<code>webgl</code>等。  </p><p>官网给出了大量的示例代码，可以<a href="https://codepen.io/collection/AQPByE">前往查看</a>  </p><blockquote><p>但是它的缺点就是有些功能是付费的🤷🏻‍♀️，比如<code>SplitText</code>、<code>DrawSvg</code>等功能，他们能实现非常炫酷的动画效果，有兴趣的可以自行购买使用。（反正我不买😺）  </p></blockquote><ul><li>以下的介绍全部都是<strong>gsap3</strong>的内容。  </li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>本次使用大概用到了以下几个<code>api</code>：<code>to</code>、<code>from</code>、<code>timeline</code>。<br>用到的插件为：<code>ScrollTrigger</code>、<code>TextPlugin</code>、<code>MotionPathPlugin</code>  </p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>使用的插件都需要提前注册。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; gsap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gsap&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ScrollTrigger &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gsap/ScrollTrigger&#x27;</span><br><span class="hljs-keyword">import</span> &#123; TextPlugin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gsap/TextPlugin&#x27;</span><br><span class="hljs-keyword">import</span> &#123; MotionPathPlugin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gsap/MotionPathPlugin&#x27;</span><br><br>gsap.registerPlugin(ScrollTrigger, TextPlugin, MotionPathPlugin)<br></code></pre></td></tr></table></figure><h5 id="ScrollTrigger"><a href="#ScrollTrigger" class="headerlink" title="ScrollTrigger"></a>ScrollTrigger</h5><p>  <code>ScrollTrigger</code>为滚动操作的关联动画，用户可以根据滚动实现相关的动画。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">gsap.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">scrollTrigger</span>: &#123;<br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-comment">//触发滚动动画的元素</span><br>    <span class="hljs-attr">start</span>: <span class="hljs-string">&#x27;start bottom&#x27;</span>, <span class="hljs-comment">// 动画开始执行的时机（开始/结束）</span><br>    <span class="hljs-comment">// 四个字符串代表四个时机：onEnter onLeave onEnterBack onLeaveBack</span><br>    <span class="hljs-comment">// 每个时机所有的动画类型：play pause resume reset restart complete reverse none </span><br>    <span class="hljs-attr">toggleAction</span>: <span class="hljs-string">&#x27;play none none reverse&#x27;</span>, <span class="hljs-comment">// 动画对应时间触发的动作  </span><br>    <span class="hljs-attr">scrub</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否跟随鼠标滚动执行动画，边滚动边执行动画</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>  <a href="https://codepen.io/GreenSock/pens/tags/?selected_tag=scrolltrigger">官网例子</a>  </p><h5 id="TextPlugin"><a href="#TextPlugin" class="headerlink" title="TextPlugin"></a>TextPlugin</h5><p>  <code>TextPlugin</code>为一些文字动画的插件，我理解的是文字动画的基础版。<br>  暂时没有用到啥特殊的配置。<br>  <a href="https://codepen.io/collection/DmQpRq">官网例子</a>    </p><h5 id="MotionPathPlugin"><a href="#MotionPathPlugin" class="headerlink" title="MotionPathPlugin"></a>MotionPathPlugin</h5><p>  <code>MotionPathPlugin</code>为路径动画，可以通过<code>svg</code>的<code>path</code>实现相关的动画。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">gsap.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">motionPath</span>: &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;#path&quot;</span>, <span class="hljs-comment">// svg路径元素</span><br>    <span class="hljs-attr">align</span>: <span class="hljs-string">&quot;#path&quot;</span>, <span class="hljs-comment">// 对齐到路径</span><br>    <span class="hljs-attr">autoRotate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 自动旋转，会跟随路径自动旋转动画元素</span><br>    <span class="hljs-attr">alignOrigin</span>: [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>] <span class="hljs-comment">// 与路径的重合程度，当前设置表示居中  </span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>  <a href="https://codepen.io/GreenSock/pens/tags/?selected_tag=motionpathplugin">官网例子</a>  </p><h4 id="to"><a href="#to" class="headerlink" title="to"></a>to</h4><p>表示元素从当前状态转换为<code>to</code>指定的一些动画状态。<br>比如，将元素移动到<code>(100, 100)</code>，并且<code>opacity</code>从1到0。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">gsap.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">opacity</span>: <span class="hljs-number">0</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><p>下面介绍其中一些常用的属性，与下面<code>from</code>方法的参数基本相同。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Option = &#123;<br>  <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 动画执行的时间</span><br>  <span class="hljs-attr">repeat</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 重复次数，-1无限制</span><br>  <span class="hljs-attr">repeatDelay</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 二次执行动画的延迟时间  </span><br>  <span class="hljs-attr">yoyo</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 动画是否重复往返执行，比如：从1-2，然后从2-1  </span><br>  <span class="hljs-attr">stagger</span>: <span class="hljs-number">0.5</span>, <span class="hljs-comment">// 多个动画错开执行的时间间隔  </span><br>  <span class="hljs-attr">ease</span>: <span class="hljs-string">&#x27;power1.inOut&#x27;</span>, <span class="hljs-comment">// 动画的速度曲线，详细可以查看文件 /node_modules/gsap/types/ease.d.ts  </span><br>  <span class="hljs-comment">// css 属性</span><br>  <span class="hljs-attr">scale</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 缩放</span><br>  <span class="hljs-attr">rotate</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 旋转</span><br>  <span class="hljs-attr">transformOrigin</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-comment">// 变换中心点</span><br>  <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">// 宽度 100vh 100px 100% 都可以</span><br>  <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">// 高度同理</span><br>  <span class="hljs-attr">visibility</span>: <span class="hljs-string">&#x27;visible&#x27;</span>, <span class="hljs-comment">// 显示隐藏  </span><br>  <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-comment">// 颜色</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="from"><a href="#from" class="headerlink" title="from"></a>from</h4><p>与<code>to</code>相反，表示元素从<code>from</code>状态转为<code>元素当前状态</code>。  </p><h4 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h4><p><code>timeline</code>可以理解成上述<code>api</code>的一个集合。<br>有时可能需要按照时间顺序，按顺序的执行一系列的动画任务，这将是很有帮助的。  </p><p>比如一个矩形元素，首先<code>x</code>移动到<code>100</code>，接着<code>y</code>移动到<code>100</code>，即以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">gsap.timeline()<br>.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">100</span><br>&#125;)<br>.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">100</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><a href="https://codepen.io/GreenSock/pens/tags/?selected_tag=timeline">官网示例</a></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code>gsap</code>的动画能力非常的强，但是也有限制性，以下为本人观点，不一定正确：<br>  其实现动画的<code>css</code>能力与<code>transition</code>有非常大的关系，只有能响应<code>transition</code>的属性才能形成动画，比如<code>width</code>、<code>height</code>、<code>backgroundColor</code>、<code>scale</code>等。<br>  但是有些属性是无法响应的，比如<code>display</code>，当设置其从<code>block</code>变为<code>none</code>时，为瞬间变化，无动画效果。  </p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p><code>gsap</code>的功能非常的强大，以上使用的功能只是皮肤，各位可以自己去琢磨。<br>顺便看下本人使用的效果：<a href="https://food-billboard.github.io/create-chart-docs/">gh-pages</a>或<a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">私人服务器</a>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>animation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务端puppeteer的使用</title>
    <link href="/2022/04/21/%E6%9C%8D%E5%8A%A1%E7%AB%AFpuppeteer%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/21/%E6%9C%8D%E5%8A%A1%E7%AB%AFpuppeteer%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="服务端puppeteer的使用"><a href="#服务端puppeteer的使用" class="headerlink" title="服务端puppeteer的使用"></a>服务端puppeteer的使用</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近突然使用到了<a href="https://github.com/puppeteer/puppeteer">puppeteer</a>，原本在本地都是好好的，但是当部署到服务器上之后就不行了。  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>虽然具体原因不确定，但是根据百度的做法最后不再报错。  </p><h3 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h3><ol><li>创建文件<br><code>touch /etc/yum.repos.d/google.repo</code>  </li><li>配置内容  </li></ol><p><code>vi /etc/yum.repos.d/google.repo</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[google]<br>name=Google-x86_64<br>baseurl=http://dl.google.com/linux/rpm/stable/x86_64<br>enabled=1<br>gpgcheck=0<br>gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub<br></code></pre></td></tr></table></figure><ol start="3"><li><code>yum update</code>  </li><li><code>yum install google-chrome-stable</code>  </li></ol><h4 id="插个题外话"><a href="#插个题外话" class="headerlink" title="插个题外话"></a>插个题外话</h4><p>在弄这个东西的时候突然碰到了阿里云服务器的<code>centos 8</code>服务器源发生变化，<code>yum</code>无法下载新东西了<br>所以这里也随便记录一下，<a href="https://blog.51cto.com/gagarin/5011005">来源</a></p><h3 id="修改puppeteer调用方式"><a href="#修改puppeteer调用方式" class="headerlink" title="修改puppeteer调用方式"></a>修改<code>puppeteer</code>调用方式</h3><p><code>puppeteer.launch(&#123; args: [&#39;--no-sandbox&#39;, &#39;--disable-dev-shm-usage&#39;], headless: true &#125;)</code></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>做个简单记录😊<br><a href="https://blog.csdn.net/Zeng__Yi/article/details/105661354">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>前端</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>backend node puppeteer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器上用到的一些命令</title>
    <link href="/2022/04/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/04/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="服务器上用到的一些命令"><a href="#服务器上用到的一些命令" class="headerlink" title="服务器上用到的一些命令"></a>服务器上用到的一些命令</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>记录一些平常用到的一些命令，给自己提个醒。  </p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h4><p>平常碰到有占用端口的情况，需要杀死该进程。<br><code>sudo lsof -i -P -n</code> // 查看所有占用端口<br><code>kill -9 pid</code>  杀死进程，<code>pid</code>是对应端口的id  </p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>结束但是没有完全结束  </p>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
      <category>服务器</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deploy node backend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字号与像素的对应值</title>
    <link href="/2022/03/02/%E5%AD%97%E5%8F%B7%E4%B8%8E%E5%83%8F%E7%B4%A0%E7%9A%84%E5%AF%B9%E5%BA%94%E5%80%BC/"/>
    <url>/2022/03/02/%E5%AD%97%E5%8F%B7%E4%B8%8E%E5%83%8F%E7%B4%A0%E7%9A%84%E5%AF%B9%E5%BA%94%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>平常偶尔可能会碰到<code>px</code>和<code>word</code>的字号的相互转换的情况，这里从网上抄了下简单做下记录。</p><h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><h3 id="pt-point，磅"><a href="#pt-point，磅" class="headerlink" title="pt (point，磅)"></a>pt (point，磅)</h3><p>是一个物理长度单位，指的是 72 分之一英寸。</p><h3 id="px-pixel，像素"><a href="#px-pixel，像素" class="headerlink" title="px (pixel，像素)"></a>px (pixel，像素)</h3><p>是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果 px 要换算成物理长度，需要指定精度 DPI(Dots Per Inch，每英寸像素数)，在扫描打印时一般都有 DPI 可选。Windows 系统默认是 96dpi，Apple 系统默认是 72dpi。</p><h3 id="em-相对长度单位，相对于当前对象内文本的字体尺寸"><a href="#em-相对长度单位，相对于当前对象内文本的字体尺寸" class="headerlink" title="em(相对长度单位，相对于当前对象内文本的字体尺寸)"></a>em(相对长度单位，相对于当前对象内文本的字体尺寸)</h3><p>是一个相对长度单位，最初是指字母 M 的宽度，故名 em。现指的是字符宽度的倍数，用法类似百分比，如：0.8em, 1.2em,2em 等。通常 1em=16px。</p><h2 id="换算"><a href="#换算" class="headerlink" title="换算"></a>换算</h2><ul><li>字号：是中文字库中特有的一种单位，以中文代号表示特定的磅值 pt，便于记忆、表述。<br>pt 和 px 的换算公式可以根据 pt 的定义得出:<br><code>px = 1/dpi(英寸)</code><br><code>pt = 1/72(英寸)</code><br><code>pt = px * dpi / 72</code><br>以 Windows 下的 <code>96dpi</code> 来计算，<code>1pt = px * 96/72 = px * 4/3</code></li></ul><h2 id="常用到的"><a href="#常用到的" class="headerlink" title="常用到的"></a>常用到的</h2><p>直接<a href="https://www.runoob.com/w3cnote/px-pt-em-convert-table.html">百度</a></p><h2 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h2><h3 id="dpi-计算"><a href="#dpi-计算" class="headerlink" title="dpi 计算"></a>dpi 计算</h3><p>来自百度😺</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDPI</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> deviceXDPI = <span class="hljs-number">0</span> <br>  <span class="hljs-keyword">let</span> deviceYDPI = <span class="hljs-number">0</span>  <br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.screen.deviceXDPI != <span class="hljs-literal">undefined</span>) &#123;<br>    deviceXDPI = <span class="hljs-built_in">window</span>.screen.deviceXDPI;<br>    deviceYDPI = <span class="hljs-built_in">window</span>.screen.deviceYDPI;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> tmpNode = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    tmpNode.style.cssText = <span class="hljs-string">`</span><br><span class="hljs-string">      width:1in;</span><br><span class="hljs-string">      height:1in;</span><br><span class="hljs-string">      position:absolute;</span><br><span class="hljs-string">      left:0px;</span><br><span class="hljs-string">      top:0px;</span><br><span class="hljs-string">      z-index:99;</span><br><span class="hljs-string">      visibility:hidden;</span><br><span class="hljs-string">    `</span><br>    <span class="hljs-built_in">document</span>.body.appendChild(tmpNode);<br>    deviceXDPI = <span class="hljs-built_in">parseInt</span>(tmpNode.offsetWidth);<br>    deviceYDPI = <span class="hljs-built_in">parseInt</span>(tmpNode.offsetHeight);<br>    tmpNode.parentNode.removeChild(tmpNode);<br>  &#125;<br>  <span class="hljs-keyword">return</span> [<br>    deviceXDPI,<br>    deviceYDPI<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平时用到的一些代码片段</title>
    <link href="/2022/02/09/%E5%B9%B3%E6%97%B6%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <url>/2022/02/09/%E5%B9%B3%E6%97%B6%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="平时用到的一些代码片段"><a href="#平时用到的一些代码片段" class="headerlink" title="平时用到的一些代码片段"></a>平时用到的一些代码片段</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>新年快乐🐯 🎆<br>这里介绍的是平常可能会用到的一些代码片段，可能对各位有点帮助，文章会持续更新✿✿ヽ(°▽°)ノ✿  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h3><ul><li><a href="https://ant.design/index-cn">antd</a>   </li><li>内部控制<code>visible</code>  </li><li>外部控制是否可关闭  </li></ul><h4 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> React, &#123; forwardRef, useImperativeHandle, useRef, useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ModalProps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd/es/modal&#x27;</span><br><br><span class="hljs-keyword">type</span> TModalRef = &#123;<br>  <span class="hljs-attr">open</span>: <span class="hljs-function">(<span class="hljs-params">value?: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">void</span> <br>&#125;<br><br><span class="hljs-keyword">type</span> TModalProps = &#123;<br>  <span class="hljs-comment">// any props </span><br>&#125; &amp; Partial&lt;ModalProps&gt;<br><br><span class="hljs-comment">// modal </span><br><span class="hljs-keyword">const</span> InternalVisibleModal = forwardRef&lt;TModalRef, TModalProps&gt;(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> &#123;  <br>    <span class="hljs-attr">onCancel</span>: propsOnCancel,<br>    <span class="hljs-attr">onOk</span>: propsOnOk<br>  &#125; = props <br><br>  <span class="hljs-keyword">const</span> [ visible, setVisible ] = useState&lt;<span class="hljs-built_in">boolean</span>&gt;(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-keyword">const</span> open = useCallback(<span class="hljs-function">(<span class="hljs-params">value?: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value)<br>    setVisible(<span class="hljs-literal">true</span>)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">const</span> onCancel = useCallback(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = propsOnCancel?.(e)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> result !== <span class="hljs-string">&#x27;boolean&#x27;</span> || result) &#123;<br>      setVisible(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;, [propsOnCancel])<br><br>  <span class="hljs-keyword">const</span> onOk = useCallback(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = propsOnOk?.(e)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> result !== <span class="hljs-string">&#x27;boolean&#x27;</span> || result) &#123;<br>      setVisible(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;, [propsOnOk])<br><br>  useImperativeHandle(ref, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      open<br>    &#125;<br>  &#125;, [open])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Modal</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;visible&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onCancel</span>=<span class="hljs-string">&#123;onCancel&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onOk</span>=<span class="hljs-string">&#123;onOk&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;自定义modal&#x27;</span></span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span></span><br><span class="xml">      hello world </span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br>  )<br><br>&#125;)<br><br><span class="hljs-comment">// parent </span><br><span class="hljs-keyword">const</span> ParentComponent = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> modalRef = useRef&lt;TModalRef&gt;(<span class="hljs-literal">null</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">        modalRef.current?.open()</span><br><span class="xml">      &#125;&#125;&gt;open<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">InternalVisibleModal</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;modalRef&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; forwardRef, useImperativeHandle, useRef, useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-comment">// modal </span><br><span class="hljs-keyword">const</span> InternalVisibleModal = forwardRef(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> &#123;  <br>    <span class="hljs-attr">onCancel</span>: propsOnCancel,<br>    <span class="hljs-attr">onOk</span>: propsOnOk<br>  &#125; = props <br><br>  <span class="hljs-keyword">const</span> [ visible, setVisible ] = useState(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-keyword">const</span> open = useCallback(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value)<br>    setVisible(<span class="hljs-literal">true</span>)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">const</span> onCancel = useCallback(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = propsOnCancel?.(e)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> result !== <span class="hljs-string">&#x27;boolean&#x27;</span> || result) &#123;<br>      setVisible(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;, [propsOnCancel])<br><br>  <span class="hljs-keyword">const</span> onOk = useCallback(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = propsOnOk?.(e)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> result !== <span class="hljs-string">&#x27;boolean&#x27;</span> || result) &#123;<br>      setVisible(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;, [propsOnOk])<br><br>  useImperativeHandle(ref, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      open<br>    &#125;<br>  &#125;, [open])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Modal</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;visible&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onCancel</span>=<span class="hljs-string">&#123;onCancel&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onOk</span>=<span class="hljs-string">&#123;onOk&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;自定义modal&#x27;</span></span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span></span><br><span class="xml">      hello world </span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br>  )<br><br>&#125;)<br><br><span class="hljs-comment">// parent </span><br><span class="hljs-keyword">const</span> ParentComponent = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> modalRef = useRef(<span class="hljs-literal">null</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">        modalRef.current?.open()</span><br><span class="xml">      &#125;&#125;&gt;open<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">InternalVisibleModal</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;modalRef&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="html2canvas"><a href="#html2canvas" class="headerlink" title="html2canvas"></a>html2canvas</h3><ul><li>配合<a href="https://github.com/niklasvh/html2canvas">html2canvas</a>   </li><li><code>html</code>转<code>图片</code>  <h4 id="typescript-1"><a href="#typescript-1" class="headerlink" title="typescript"></a>typescript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> html2canvas, &#123; Options &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;html2canvas&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">captureCover</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  query: <span class="hljs-built_in">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  html2canvasOptions: Partial&lt;Options&gt; = &#123;&#125;,</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> element: HTMLElement | <span class="hljs-literal">null</span> = <span class="hljs-built_in">document</span>.querySelector(query);<br><br>  <span class="hljs-keyword">if</span> (!element) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject();<br><br>  <span class="hljs-keyword">const</span> &#123; width, height &#125; = element.getBoundingClientRect() || &#123;&#125;;<br><br>  <span class="hljs-keyword">const</span> options: Partial&lt;Options&gt; = &#123;<br>    <span class="hljs-attr">useCORS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">allowTaint</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">logging</span>: <span class="hljs-literal">true</span>,<br>    width,<br>    height,<br>    <span class="hljs-attr">scrollY</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">scrollX</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0)&#x27;</span>,<br>    ...html2canvasOptions,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>&lt;Blob&gt;(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    html2canvas(element <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>, options).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>      context.toBlob(<br>        <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (data) &#123;<br>            resolve(data);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            reject();<br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&#x27;image/png&#x27;</span>,<br>        <span class="hljs-number">0.9</span>,<br>      );<br>    &#125;);<br>  &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="javascript-1"><a href="#javascript-1" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> html2canvas <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;html2canvas&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">captureCover</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  query,</span></span><br><span class="hljs-params"><span class="hljs-function">  html2canvasOptions</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> element = <span class="hljs-built_in">document</span>.querySelector(query);<br><br>  <span class="hljs-keyword">if</span> (!element) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject();<br><br>  <span class="hljs-keyword">const</span> &#123; width, height &#125; = element.getBoundingClientRect() || &#123;&#125;;<br><br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">useCORS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">allowTaint</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">logging</span>: <span class="hljs-literal">true</span>,<br>    width,<br>    height,<br>    <span class="hljs-attr">scrollY</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">scrollX</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0)&#x27;</span>,<br>    ...html2canvasOptions,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    html2canvas(element, options).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>      context.toBlob(<br>        <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (data) &#123;<br>            resolve(data);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            reject();<br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&#x27;image/png&#x27;</span>,<br>        <span class="hljs-number">0.9</span>,<br>      );<br>    &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="jspdf"><a href="#jspdf" class="headerlink" title="jspdf"></a>jspdf</h3><ul><li>配合<a href="https://github.com/niklasvh/html2canvas">html2canvas</a>  </li><li><code>html</code>转<code>pdf</code>  <h4 id="typescript-2"><a href="#typescript-2" class="headerlink" title="typescript"></a>typescript</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> jsPDF <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jspdf&#x27;</span><br><span class="hljs-keyword">import</span> html2Canvas, &#123; Options &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;html2canvas&#x27;</span><br><br><span class="hljs-keyword">const</span> A4_RATIO = <span class="hljs-number">630</span> / <span class="hljs-number">891</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> html2Pdf = <span class="hljs-keyword">async</span> (query: <span class="hljs-built_in">string</span>, <span class="hljs-attr">canvasOpts</span>: Partial&lt;Options&gt;=&#123;&#125;) =&gt; &#123;<br><br>  <span class="hljs-keyword">const</span> element: HTMLElement | <span class="hljs-literal">null</span> = <span class="hljs-built_in">document</span>.querySelector(query)<br><br>  <span class="hljs-keyword">if</span>(!element) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject()<br><br>  <span class="hljs-keyword">const</span> originWidth = element.offsetWidth<br>  <span class="hljs-keyword">const</span> originHeight = element.offsetHeight<br><br>  <span class="hljs-keyword">const</span> scale = <span class="hljs-number">595.28</span> / originWidth<br>  <span class="hljs-keyword">const</span> scaleCanvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>  scaleCanvas.width = <span class="hljs-number">595.28</span><br>  scaleCanvas.height = originHeight * scale <br><br>  <span class="hljs-keyword">var</span> opts: Partial&lt;Options&gt; = &#123;<br>    <span class="hljs-attr">useCORS</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">allowTaint</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">logging</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">width</span>: originWidth, <br>    <span class="hljs-attr">height</span>: originHeight,<br>    <span class="hljs-attr">scrollY</span>: <span class="hljs-number">0</span>, <br>    <span class="hljs-attr">scrollX</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">canvas</span>: scaleCanvas,<br>    scale,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;rgba(0, 0, 0, 0)&quot;</span>,<br>    <span class="hljs-attr">onclone</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">document</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> deleteStyleKeys = [<span class="hljs-string">&#x27;transform&#x27;</span>, <span class="hljs-string">&#x27;transition&#x27;</span>, <span class="hljs-string">&#x27;boxShadow&#x27;</span>]<br>      <span class="hljs-keyword">const</span> element: HTMLElement | <span class="hljs-literal">null</span> = <span class="hljs-built_in">document</span>.querySelector(query)<br>      <span class="hljs-keyword">if</span>(!element) <span class="hljs-keyword">return</span> <br>      deleteStyleKeys.forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> ((element.style <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>)[key] = <span class="hljs-string">&#x27;&#x27;</span>))<br>    &#125;,<br>    ...canvasOpts<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    html2Canvas(element, opts).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>  <br>      <span class="hljs-keyword">let</span> contentWidth = context.width <br>      <span class="hljs-keyword">let</span> contentHeight = context.height   <br>      <span class="hljs-keyword">let</span> pageHeight = contentWidth / A4_RATIO  <br>      <span class="hljs-keyword">let</span> leftHeight = contentHeight <br>      <span class="hljs-keyword">let</span> position = <span class="hljs-number">0</span><br>  <br>      <span class="hljs-keyword">let</span> pageData = context.toDataURL(<span class="hljs-string">&#x27;image/png&#x27;</span>, <span class="hljs-number">0.9</span>)<br>      <br>      <span class="hljs-keyword">let</span> PDF = <span class="hljs-keyword">new</span> jsPDF(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;pt&#x27;</span>, <span class="hljs-string">&#x27;a4&#x27;</span>)<br>      <span class="hljs-keyword">if</span> (leftHeight &lt;= pageHeight) &#123;<br>        PDF.addImage(pageData, <span class="hljs-string">&#x27;PNG&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, contentWidth, contentHeight)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span> (leftHeight &gt;= <span class="hljs-number">20</span>) &#123;<br>          PDF.addImage(pageData, <span class="hljs-string">&#x27;PNG&#x27;</span>, <span class="hljs-number">0</span>, position, contentWidth, contentHeight)<br>          leftHeight -= pageHeight<br>          position -= pageHeight<br>          <span class="hljs-keyword">if</span> (leftHeight &gt;= <span class="hljs-number">20</span>) &#123;<br>            PDF.addPage()<br>          &#125;<br>        &#125;<br>      &#125;<br><br>      resolve(PDF.output(<span class="hljs-string">&#x27;blob&#x27;</span>))<br>      <br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="SuperPartial"><a href="#SuperPartial" class="headerlink" title="SuperPartial"></a>SuperPartial</h3><ul><li><code>typescript</code></li><li><code>Partial</code> 深层次版本  <h4 id="typescript-3"><a href="#typescript-3" class="headerlink" title="typescript"></a>typescript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> SuperPartial&lt;T&gt; = &#123;<br>  [K <span class="hljs-keyword">in</span> keyof T]?: SuperPartial&lt;T[K]&gt;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="withTry"><a href="#withTry" class="headerlink" title="withTry"></a>withTry</h3><ul><li>工具方法  </li><li>异步错误捕获  <h4 id="typescript-4"><a href="#typescript-4" class="headerlink" title="typescript"></a>typescript</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withTry</span>&lt;<span class="hljs-title">T</span>=<span class="hljs-title">any</span>&gt; (<span class="hljs-params">func: <span class="hljs-built_in">Function</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args: <span class="hljs-built_in">any</span>[]</span>): <span class="hljs-title">Promise</span>&lt;[<span class="hljs-title">any</span>, <span class="hljs-title">T</span> | <span class="hljs-title">null</span>]&gt; </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> func(...args)<br>      <span class="hljs-keyword">return</span> [<span class="hljs-literal">null</span>, data]<br>    &#125;<span class="hljs-keyword">catch</span>(err) &#123;<br>      <span class="hljs-keyword">return</span> [err, <span class="hljs-literal">null</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="javascript-2"><a href="#javascript-2" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withTry</span> (<span class="hljs-params">func</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> func(...args)<br>      <span class="hljs-keyword">return</span> [<span class="hljs-literal">null</span>, data]<br>    &#125;<span class="hljs-keyword">catch</span>(err) &#123;<br>      <span class="hljs-keyword">return</span> [err, <span class="hljs-literal">null</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><ul><li>延迟方法  <h4 id="javascript-3"><a href="#javascript-3" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">time=<span class="hljs-number">1000</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time))<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>到这里结束，希望对各位有帮助。  </p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fragment code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件分片上传</title>
    <link href="/2021/11/24/%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <url>/2021/11/24/%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="前端文件分片上传流程"><a href="#前端文件分片上传流程" class="headerlink" title="前端文件分片上传流程"></a>前端文件分片上传流程</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>作为一个前端，平常工作中肯定离不开文件上传的业务需求，可能大部分情况都是对图片，附件等一些小文件进行上传，但是当需要上传大文件的时候，使用普通上传方式时，可能就会看到接口返回<code>413</code>，这里就需要提到本文所要说的文件分片上传。    </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="二进制数据类型"><a href="#二进制数据类型" class="headerlink" title="二进制数据类型"></a>二进制数据类型</h3><p>前端对二进制数据的存储格式有很多种。  </p><ul><li><code>input</code>输入框上传文件时用到的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File">File</a>类型。 </li><li>视频网站上能看到的<code>blob</code>链接资源  </li><li><code>es6</code>中出现的<code>ArrayBuffer</code>，并且是文件分片上传，断点续传的基础。   </li><li>还有一个就是<code>base64</code>  </li></ul><h3 id="不同类型的相互转换"><a href="#不同类型的相互转换" class="headerlink" title="不同类型的相互转换"></a>不同类型的相互转换</h3><p>很多数据类型的转换都需要依靠于<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">FileReader</a>  </p><ol><li><code>ArrayBuffer to Blob</code>  </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> Blob([<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>)])  <br><span class="hljs-keyword">const</span> fileReader = <span class="hljs-keyword">new</span> FileReader()<br><br>fileReader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(fileReader.result)<br>&#125;<br><br>fileReader.readAsArrayBuffer(blob)<br><br></code></pre></td></tr></table></figure><ol start="2"><li><code>Blob to Base64</code>  </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> Blob([<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>)])  <br><span class="hljs-keyword">const</span> fileReader = <span class="hljs-keyword">new</span> FileReader()<br><br>fileReader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(fileReader.result)<br>&#125;<br><br>fileReader.readAsDataURL(blob)<br></code></pre></td></tr></table></figure><p>以上是两个简单的数据类型转换的例子   </p><h3 id="需要使用到的npm-package"><a href="#需要使用到的npm-package" class="headerlink" title="需要使用到的npm package"></a>需要使用到的npm package</h3><ul><li><code>spark-md5</code><br><a href="https://www.npmjs.com/package/spark-md5">spark-md5</a>可以将对应的数据进行<code>md5</code>加密，这样在下一次对同一个文件进行上传时，可以直接跳过整个上传流传，实现秒传的效果。  </li></ul><h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><ul><li><p><code>input</code>接收文件<code>template.mp4</code>  </p></li><li><p>获取文件的基础信息  </p><ul><li>文件的<code>mime</code>，当前的类型是<code>video/mp4</code>  </li><li>文件的大小<code>file.size</code>，假设本次文件的大小为<code>1G</code>  </li><li>设置本次上传分片的大小为<code>5M</code>  </li><li>计算本次上传的分片数量为<code>1G / 5M = 205</code>，所以本次需要上传205次  </li></ul></li><li><p>对文件进行分片  </p><ul><li>使用<code>spark-md5</code>进行分片  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-built_in">ArrayBuffer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;spark-md5&#x27;</span><br><br><span class="hljs-keyword">const</span> SparkMd5 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>()<br><br><span class="hljs-comment">// 保存分片用于在后面上传时用  </span><br><span class="hljs-keyword">const</span> cacheChunks = []<br><span class="hljs-comment">// 当前分片的索引</span><br><span class="hljs-keyword">const</span> index = <span class="hljs-number">0</span><br><span class="hljs-comment">// 分片的大小</span><br><span class="hljs-keyword">const</span> chunkSize = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span> <br><span class="hljs-comment">// file 只需要简单调用 file.slice 就可以</span><br><span class="hljs-keyword">const</span> currentChunk = file.slice(index * chunkSize, (index + <span class="hljs-number">1</span>) * chunkSize)  <br><br>cacheChunks.push(currentChunk)<br><br><span class="hljs-comment">// 添加分片  </span><br>SparkMd5.append(currentChunk)<br><br><span class="hljs-comment">// 所有分片添加完成时  </span><br><span class="hljs-keyword">const</span> md5 = SparkMd5.end()<br><br><span class="hljs-comment">// 完成解析后销毁对应实例  </span><br>SparkMd5.destroy()<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>文件存在性检查<br>将文件的一些信息传递给后台，服务端检查文件是否存在。<br>如果存在，则跳过之后的上传过程。<br>如果不存在，则继续后面的上传流程。  </p></li><li><p>文件分片上传<br>按照索引顺序对文件分片进行上传  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData()<br><span class="hljs-comment">// 需要上传的文件分片</span><br>formData.append(<span class="hljs-string">&quot;file&quot;</span>, chunk)<br><span class="hljs-comment">// 当前分片的索引  </span><br>formData.append(<span class="hljs-string">&quot;index&quot;</span>, index)<br><span class="hljs-comment">// 文件md5 </span><br>formData.append(<span class="hljs-string">&quot;md5&quot;</span>, md5)<br><br>axios.post(<span class="hljs-string">&quot;/path/to/upload&quot;</span>, formData)<br><br></code></pre></td></tr></table></figure><p>后端通过返回下一分片的索引或者是下一分片的范围来指定前端接下来需要上传的分片<br>在上一步骤中也可以返回和这一步骤相同的内容。  </p></li><li><p>文件上传完成通知<br>这一步骤为可选步骤，通过前端通知后端完成了所有文件分片的上传。<br>一般不需要前端主动向后端通知。  </p></li></ul><h3 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h3><p>这里简单使用<code>node</code>讲解一下后端接收文件的基本逻辑<br>使用<code>koa</code>做基础服务<br>使用<code>koa-body</code>接收前端的文件内容<br>使用<code>koa-router</code>做对应的restful设计  </p><ol><li><p>文件存在性检查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">let</span> fileCache = &#123;&#125;<br><br>router<br>.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; md5, chunkSize, filename, size, length &#125; = ctx.query <br>  <span class="hljs-keyword">if</span>(fileCache[md5] &amp;&amp; fileCache[md5].chunks.length === length) &#123;<br>    ctx.body = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">res</span>: &#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-literal">true</span> <br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fileCache[md5]) &#123;<br>    <span class="hljs-keyword">const</span> index = findLastUnUploadChunkIndex()<br>    ctx.body = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">res</span>: &#123;<br>        <span class="hljs-attr">data</span>: index<br>      &#125;<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    fileCache[md5] = &#123;<br>      <span class="hljs-attr">chunks</span>: [],<br>      size,<br>      length,<br>      chunkSize,<br>      md5<br>    &#125;<br>    ctx.body = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">res</span>: &#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-number">0</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>文件上传  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">router.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> files = ctx.request.files.file <br>  <span class="hljs-keyword">const</span> &#123; md5, index &#125; = ctx.request.body <br>  fileCache[md5].chunks.push(index) <br>  <span class="hljs-comment">// 使用fs保存对应的分片至指定文件夹</span><br>  <span class="hljs-comment">// 分片名称可以使用md5-index的形式</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>文件合并  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>)<br><span class="hljs-keyword">const</span> fsPromise = fs.promises  <br><br><span class="hljs-comment">// 合并分片</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mergeChunk</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> realFilePath = <span class="hljs-string">&quot;/path/to/real/file&quot;</span><br><br>  <span class="hljs-comment">// 获取对应的文件分片文件名称  </span><br>  <span class="hljs-keyword">const</span> chunkList = <span class="hljs-keyword">await</span> fsPromise.readdir(<span class="hljs-string">&quot;/path/to/chunk&quot;</span>)  <br><br>  <span class="hljs-comment">// 对文件进行排序  </span><br>  chunkList.sort(<span class="hljs-function">(<span class="hljs-params">suffixA, suffixB</span>) =&gt;</span> <span class="hljs-built_in">Number</span>(suffixA.split(<span class="hljs-string">&#x27;-&#x27;</span>)[<span class="hljs-number">1</span>]) - <span class="hljs-built_in">Number</span>(suffixB.split(<span class="hljs-string">&#x27;-&#x27;</span>)[<span class="hljs-number">1</span>]))<br>  <br>  <span class="hljs-comment">//文件合并</span><br>  <span class="hljs-keyword">const</span> mergeTasks = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; chunkList.length; i ++) &#123;<br>      <span class="hljs-keyword">const</span> chunk = chunkList[i]<br>      <span class="hljs-keyword">await</span> fs.readFile(chunk)<br>      .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> fs.appendFile(realFilePath, data))<br>      .then(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> fs.unlink(chunk))<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> fs.writeFile(realFilePath, <span class="hljs-string">&#x27;&#x27;</span>)<br>  .then(mergeTasks)<br>  .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;&#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>以上就是整个文件分片上传的流程，当中的具体细节可以查看本人完成的对应的<a href="https://food-billboard.github.io/chunk-file-load/#/">上传工具类库</a>，还有基于该类库封装的<code>React</code><a href="https://food-billboard.github.io/chunk-file-load-component/#/">上传组件</a>  </p>]]></content>
    
    
    <categories>
      
      <category>文件</category>
      
      <category>上传</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>upload file chunk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitmoji 优雅提交代码</title>
    <link href="/2021/11/19/gitmoji/"/>
    <url>/2021/11/19/gitmoji/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>相信平时应该大家都用过<code>github</code>当做代码仓库，作为一个优质的仓库，对于代码的提交也有对应的规范，为了让提交看得更浅显易懂，可以使用不同的图标来表示不一样的意思，这里就介绍一个提交工具<a href="https://gitmoji.dev/">gitmoji</a>。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>关于这个库的使用相信官网已经描述的非常详细了，这里就简单做下翻译来供自己查看。  </p><p>常用的几个  </p><table><thead><tr><th>图标</th><th>代码</th><th>描述</th></tr></thead><tbody><tr><td>🎨</td><td>:art:</td><td>改进代码的结构/格式。</td></tr><tr><td>🔥</td><td>:fire:</td><td>删除代码或文件。</td></tr><tr><td>🐛</td><td>:bug:</td><td>修复一个错误。</td></tr><tr><td>✨</td><td>:sparkles:</td><td>介绍新功能。</td></tr><tr><td>✅</td><td>:white_check_mark:</td><td>添加、更新或通过测试。</td></tr><tr><td>🚀</td><td>:rocket:</td><td>代码部署。</td></tr><tr><td>💄</td><td>:lipstick:</td><td>添加或更新 UI 和样式文件。</td></tr><tr><td>🔒️</td><td>:lock:</td><td>修复安全问题。</td></tr><tr><td>🔖</td><td>:bookmark:</td><td>发布/版本标签。</td></tr><tr><td>🔧</td><td>:wrench:</td><td>添加或更新配置文件。</td></tr><tr><td>⏪️</td><td>:rewind:</td><td>还原更改。</td></tr><tr><td>🤡</td><td>:clown_face:</td><td>mock 代码</td></tr><tr><td>🙈</td><td>:see_no_evil:</td><td>添加或更新 .gitignore 文件。</td></tr><tr><td>🗑️</td><td>:wastebasket:</td><td>弃用需要清理的代码。</td></tr><tr><td>⚰️</td><td>:coffin:</td><td>删除死代码。</td></tr><tr><td>🧪</td><td>:test_tube:</td><td>添加失败的测试。</td></tr><tr><td>👔</td><td>:necktie:</td><td>添加或更新业务逻辑</td></tr></tbody></table><p>索引  </p><table><thead><tr><th>图标</th><th>代码</th><th>描述</th></tr></thead><tbody><tr><td>🎨</td><td>:art:</td><td>改进代码的结构/格式。</td></tr><tr><td>⚡️</td><td>:zap:</td><td>提高性能。</td></tr><tr><td>🔥</td><td>:fire:</td><td>删除代码或文件。</td></tr><tr><td>🐛</td><td>:bug:</td><td>修复一个错误。</td></tr><tr><td>🚑️</td><td>:ambulance:</td><td>关键修补程序。</td></tr><tr><td>✨</td><td>:sparkles:</td><td>介绍新功能。</td></tr><tr><td>📝</td><td>:memo:</td><td>添加或更新文档。</td></tr><tr><td>🚀</td><td>:rocket:</td><td>代码部署。</td></tr><tr><td>💄</td><td>:lipstick:</td><td>添加或更新 UI 和样式文件。</td></tr><tr><td>🎉</td><td>:tada:</td><td>项目创建</td></tr><tr><td>✅</td><td>:white_check_mark:</td><td>添加、更新或通过测试。</td></tr><tr><td>🔒️</td><td>:lock:</td><td>修复安全问题。</td></tr><tr><td>🔖</td><td>:bookmark:</td><td>发布/版本标签。</td></tr><tr><td>🚨</td><td>:rotating_light:</td><td>修复编译器/linter 警告。</td></tr><tr><td>🚧</td><td>:construction:</td><td>工作正在进行中。</td></tr><tr><td>💚</td><td>:green_heart:</td><td>修复 CI 构建。</td></tr><tr><td>⬇️</td><td>:arrow_down:</td><td>降级依赖项。</td></tr><tr><td>⬆️</td><td>:arrow_up:</td><td>升级依赖项。</td></tr><tr><td>📌</td><td>:pushpin:</td><td>将依赖项固定到特定版本。</td></tr><tr><td>👷</td><td>:construction_worker:</td><td>添加或更新 CI 构建系统。</td></tr><tr><td>📈</td><td>:chart_with_upwards_trend:</td><td>添加或更新分析或跟踪代码。</td></tr><tr><td>♻️</td><td>:recycle:</td><td>重构代码。</td></tr><tr><td>➕</td><td>:heavy_plus_sign:</td><td>添加依赖项。</td></tr><tr><td>➖</td><td>:heavy_minus_sign:</td><td>删除依赖项。</td></tr><tr><td>🔧</td><td>:wrench:</td><td>添加或更新配置文件。</td></tr><tr><td>🔨</td><td>:hammer:</td><td>添加或更新开发脚本。</td></tr><tr><td>🌐</td><td>:globe_with_meridians:</td><td>国际化和本地化。</td></tr><tr><td>✏️</td><td>:pencil2:</td><td>修正错别字。</td></tr><tr><td>💩</td><td>:poop:</td><td>编写需要改进的糟糕代码。</td></tr><tr><td>⏪️</td><td>:rewind:</td><td>还原更改。</td></tr><tr><td>🔀</td><td>:twisted_rightwards_arrows:</td><td>合并分支。</td></tr><tr><td>📦️</td><td>:package:</td><td>添加或更新已编译的文件或包。</td></tr><tr><td>👽️</td><td>:alien:</td><td>由于外部 API 更改而更新代码。</td></tr><tr><td>🚚</td><td>:truck:</td><td>移动或重命名资源（例如：文件、路径、路由）。</td></tr><tr><td>📄</td><td>:page_facing_up:</td><td>添加或更新许可证。</td></tr><tr><td>💥</td><td>:boom:</td><td>引入重大更改。</td></tr><tr><td>🍱</td><td>:bento:</td><td>添加或更新静态资源</td></tr><tr><td>♿️</td><td>:wheelchair:</td><td>提高可访问性。</td></tr><tr><td>💡</td><td>:bulb:</td><td>在源代码中添加或更新注释。</td></tr><tr><td>🍻</td><td>:beers:</td><td>醉酒写代码。(没懂啥意思)</td></tr><tr><td>💬</td><td>:speech_balloon:</td><td>添加或更新文本和文字。</td></tr><tr><td>🗃️</td><td>:card_file_box:</td><td>执行与数据库相关的更改。</td></tr><tr><td>🔊</td><td>:loud_sound:</td><td>添加或更新日志。</td></tr><tr><td>🔇</td><td>:mute:</td><td>删除日志。</td></tr><tr><td>👥</td><td>:busts_in_silhouette:</td><td>添加或更新贡献者。</td></tr><tr><td>🚸</td><td>:children_crossing:</td><td>改善用户体验/可用性</td></tr><tr><td>🏗️</td><td>:building_construction:</td><td>进行架构更改。</td></tr><tr><td>📱</td><td>:iphone:</td><td>从事响应式设计。</td></tr><tr><td>🤡</td><td>:clown_face:</td><td>mock 代码</td></tr><tr><td>🥚</td><td>:egg:</td><td>添加或更新复活节彩蛋。</td></tr><tr><td>🙈</td><td>:see_no_evil:</td><td>添加或更新 .gitignore 文件。</td></tr><tr><td>📸</td><td>:camera_flash:</td><td>添加或更新快照。</td></tr><tr><td>⚗️</td><td>:alembic:</td><td>进行实验。</td></tr><tr><td>🔍️</td><td>:mag:</td><td>改进搜索引擎优化。</td></tr><tr><td>🏷️</td><td>:label:</td><td>添加或更新类型。</td></tr><tr><td>🌱</td><td>:seedling:</td><td>添加或更新种子文件。</td></tr><tr><td>🚩</td><td>:triangular_flag_on_post:</td><td>添加、更新或删除功能标志。</td></tr><tr><td>🥅</td><td>:goal_net:</td><td>捕捉错误。</td></tr><tr><td>💫</td><td>:dizzy:</td><td>添加或更新动画和过渡。</td></tr><tr><td>🗑️</td><td>:wastebasket:</td><td>弃用需要清理的代码。</td></tr><tr><td>🛂</td><td>:passport_control:</td><td>处理与授权、角色和权限相关的代码。</td></tr><tr><td>🩹</td><td>:adhesive_bandage:</td><td>对非关键问题的简单修复。</td></tr><tr><td>🧐</td><td>:monocle_face:</td><td>数据探索/检查。</td></tr><tr><td>⚰️</td><td>:coffin:</td><td>删除死代码。</td></tr><tr><td>🧪</td><td>:test_tube:</td><td>添加失败的测试。</td></tr><tr><td>👔</td><td>:necktie:</td><td>添加或更新业务逻辑</td></tr><tr><td>🩺</td><td>:stethoscope:</td><td>添加或更新健康检查。</td></tr></tbody></table><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>简单水💧一下。  </p>]]></content>
    
    
    <categories>
      
      <category>代码提交</category>
      
      <category>规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0到1完成阿里云node服务搭建部署</title>
    <link href="/2021/10/30/%E4%BB%8E0%E5%88%B01%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/10/30/%E4%BB%8E0%E5%88%B01%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="从0到1完成阿里云node服务搭建部署"><a href="#从0到1完成阿里云node服务搭建部署" class="headerlink" title="从0到1完成阿里云node服务搭建部署"></a>从0到1完成阿里云node服务搭建部署</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前段时间自己根据网上的教程捣鼓了一下自己的服务器，终于把自己的<code>node</code>服务部署到了阿里云。所以在这里把自己的一些经验分享给各位，希望能对大家有帮助ღ( ´･ᴗ･` )比心。  </p><ol><li>先介绍一下这次部署用到的一些东西，免得浪费各位的时间✅ 。 </li></ol><ul><li>首先本人是一个前端，所以这次的服务端语言用的是<code>node</code>框架<a href="https://koajs.com/">koa</a>   </li><li><code>node</code>生产环境自然离不开<a href="https://pm2.keymetrics.io/">pm2</a>，本次远程部署也用到了它  </li><li>数据库用的<a href="https://docs.mongodb.com/">mongodb</a>以及它的<code>orm</code><a href="http://www.mongoosejs.net/">mongoose</a>  </li><li>缓存用的<code>redis</code>，这个用到的地方不是很多。  </li><li><code>nginx</code>做代理  </li><li>将上面的数据库、缓存、<code>nginx</code>等做容器化使用<code>docker</code>，并使用<code>docker-compose</code>做统一管理。  </li><li>ci/ci 用的<code>github actions</code>，两个字，香！！（之前用的<code>travis</code>，但是后来得知它居然开始收费了，那没事了，白嫖怪不可能多花一分钱的）  </li></ul><ol start="2"><li>当前还有部分未完成的内容❎    </li></ol><ul><li>消息队列控制<code>rabbitmq</code>  </li><li>视频细化处理<code>ffmpeg</code>  </li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol><li>服务端依赖安装<br>首先是服务器上相关的依赖安装：<code>node</code>和<code>docker</code>以及<code>docker-compose</code>  </li></ol><ul><li>node<br>安装<code>node</code>可以参考这边<a href="https://www.jianshu.com/p/2e31fd9eb048">文章</a>的内容  </li><li>docker<br>安装<code>docker</code>可以参考<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">这个</a>  </li><li>docker-compose<br>安装<code>docker-compose</code>可以参考<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">这个</a>  </li></ul><ol start="2"><li><p>github actions<br>关于代码集成部署方面，本项目使用了<code>github actions</code>，如果有不了解的话，可以参考<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰</a>的文章。<br>这里关于它对于服务器的一些配置问题，本人在之前的一篇文章中有详细描述，可以参看<a href="https://food-billboard.github.io/2021/10/25/deploy/">那篇文章</a>来进行配置。</p></li><li><p>docker docker-compose  </p><ul><li><p><code>docker</code>   </p><blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。<br><code>docker</code>简化了我们在服务部署上的流程，并且它的可移植性以及跨操作系统，可以让我们一次配置，多处使用。 </p></blockquote></li><li><p><code>docker-compose</code>  </p><blockquote><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。<br>通常部署服务一般牵扯到其他很多的配置，比如本人的<code>node</code>项目，需要用到<code>mongodb</code>、<code>redis</code>、<code>nginx</code>等，如果这些都单独配置，但是安装就需要分别处理三次，通过<code>docker</code>容器化并配合<code>docker-compose</code>进行统一配置，大大降低了难度。  </p></blockquote></li></ul></li></ol><p>下面就介绍一下本人使用的几种容器的配置（可能不全，可以选择得看😝）   </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># mongodb </span><br><span class="hljs-attr">mongo:</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.0.3</span><br>  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">27017</span><span class="hljs-string">:27017</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/home/movie/mongodb/data:/data/db</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/local/mongodb/log:/var/log/mongodb</span>  <br><br><span class="hljs-comment"># redis </span><br><span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/local/redis/redis.conf:/usr/local/etc/redis/redis.conf</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">6379</span><span class="hljs-string">:6379</span><br><br><span class="hljs-comment"># nginx </span><br><span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.19</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:80</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">80</span><span class="hljs-string">:80</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">443</span><span class="hljs-string">:443</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./bin/nginx/nginx.conf:/etc/nginx/conf.d/default.conf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./bin/nginx/logs.log:/etc/nginx/logs/log.log</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./public:/movie/server/public:ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./static:/movie/server/static:ro</span><br>  <span class="hljs-attr">network_mode:</span> <span class="hljs-string">host</span><br></code></pre></td></tr></table></figure><ul><li>就以上的配置，这里做一下说明：<ul><li>如上<code>volumes</code>是做文件映射的，当希望外部文件映射到内部文件，并且同步修改时，不要直接映射对应的文件，而是映射其外部的文件夹，否则的无法做到修改同步。  </li><li>外部的服务会和容器内的服务发生冲突，比如你在外部启动了<code>nginx</code>，同样在容器里启用<code>docker</code>，那么可能就是外部的<code>nginx</code>配置起作用了。  </li></ul></li></ul><p>如果有在本地做<code>docker</code>测试，可以<code>vs code</code>的<code>docker</code>插件，可以采用可视化的方式查看到容器内部的文件结构。  </p><ul><li><p>另外<br>收集了几个有时候用到的<code>docker</code>命令  </p><ul><li><p>查看正在运行的docker容器 <code>docker ps</code>  </p></li><li><p>进入指定容器内部 <code>docker exec -it 容器id sh</code>  </p></li><li><p>从容器中退出 <code>exit</code>  </p></li><li><p>查看容器内部暴露的ip <code>docker inspect 容器id |grep IPA</code>  </p></li><li><p>外部执行mongodb <code>docker exec -it 容器id mongo --host 127.0.0.1 --port 27017</code>  </p></li><li><p>外部执行redis <code>docker exec -it 容器id redis-cli</code></p></li><li><p>文件复制 <code>docker cp 容器id:容器的路径 本地的路径</code>  </p></li><li><p>停止镜像 <code>docker stop docker_id</code>  </p></li><li><p>删除容器 <code>docker rm docker_id</code>  </p></li><li><p>正在运行的容器 <code>docker ps</code>  </p></li><li><p>所有容器 <code>docker ps -a</code>  </p></li><li><p>删除镜像 <code>docker rmi docker_id</code>  </p></li><li><p>查看镜像 <code>docker images</code></p></li><li><p>查看容器运行日志 <code>docker logs docker_id</code></p></li></ul></li></ul><ol start="4"><li>pm2  <blockquote><p>PM2 是一个带有负载均衡功能的 Node 应用进程管理器。<br>利用<code>pm2</code>在服务器上进行服务持久性运行，以及达到从<code>local</code>到<code>remote</code>的代码部署。  </p></blockquote></li></ol><p>下面是它的配置，当中有注释进行解释。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 应用名称</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;app&quot;</span>,<br>  <span class="hljs-comment">// 需要启动的服务  </span><br>  <span class="hljs-attr">apps</span> : [<br>    &#123;<br>      <span class="hljs-comment">// 进程名称</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;app&#x27;</span>,<br>      <span class="hljs-comment">// 进程的入口文件  </span><br>      <span class="hljs-attr">script</span>: <span class="hljs-string">&#x27;app.js&#x27;</span>,<br>      <span class="hljs-comment">// 环境变量</span><br>      <span class="hljs-attr">env</span>: &#123;<br>        <span class="hljs-attr">NODE_ENV</span>: <span class="hljs-string">&quot;production&quot;</span><br>      &#125;,<br>      <span class="hljs-comment">// 负载均衡</span><br>      <span class="hljs-attr">exec_mode</span>: <span class="hljs-string">&quot;cluster_mode&quot;</span>,<br>      <span class="hljs-comment">// 错误日志路径</span><br>      <span class="hljs-attr">error_file</span>: <span class="hljs-string">&#x27;./src/logs/pm2/error.log&#x27;</span>,<br>      <span class="hljs-comment">// 输出路径  </span><br>      <span class="hljs-attr">out_file</span>: <span class="hljs-string">&#x27;./src/logs/pm2/output.log&#x27;</span><br>    &#125;, <br>    <span class="hljs-comment">// 另一个进程  </span><br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;socket&quot;</span>,<br>      <span class="hljs-attr">script</span>: <span class="hljs-string">&quot;./src/chat/index.js&quot;</span>,<br>      <span class="hljs-attr">exec_mode</span>: <span class="hljs-string">&quot;cluster_mode&quot;</span>,<br>    &#125;<br>  ],<br><br>  <span class="hljs-comment">// 部署的配置 </span><br>  <span class="hljs-attr">deploy</span> : &#123;<br>    <span class="hljs-attr">production</span> : &#123;<br>      <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;这里是服务器的用户名&quot;</span>,<br>      <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;服务器的ip地址(xx.xx.xx.xx或者可以使用数组设置多个)&quot;</span>,<br>      <span class="hljs-attr">ssh_options</span>: <span class="hljs-string">&quot;ssh连接的参数&quot;</span>,<br>      <span class="hljs-attr">ref</span>: <span class="hljs-string">&quot;github分支&quot;</span>,<br>      <span class="hljs-attr">repo</span>: <span class="hljs-string">&quot;github仓库&quot;</span>,<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;部署的服务器中的文件目录&quot;</span>,<br>      <span class="hljs-comment">// 代码被clone后执行的命令</span><br>      <span class="hljs-string">&quot;post-deploy&quot;</span>:<br>        <span class="hljs-string">&quot;git pull origin master &amp;&amp; source ~/.nvm/nvm.sh &amp;&amp; yarn install&quot;</span>, <br>      <span class="hljs-comment">// 环境变量</span><br>      <span class="hljs-attr">env</span>: &#123;<br>        <span class="hljs-string">&quot;NODE_ENV&quot;</span>: <span class="hljs-string">&quot;production&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>可能存在拉取<code>docker</code>镜像出现<code>net/http: TLS handshake timeout</code>问题<br>使用国内镜像加速  <blockquote><p>Ubuntu16.04+、Debian8+、CentOS7<br>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）：<br><code>&#123;&quot;registry-mirrors&quot;:[&quot;https://reg-mirror.qiniu.com/&quot;]&#125;</code><br>这个是七牛云的镜像加速地址  </p></blockquote></li></ol><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这就是本次我在搭建部署阿里云服务器中总结的一些经验和教训，如有错误的话请指正，希望对各位有帮助。<br>完整的项目配置可以到<a href="https://github.com/food-billboard/node-server">这里</a>查看。</p>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
      <category>服务器</category>
      
      <category>前端</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deploy node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb操作实例</title>
    <link href="/2021/10/26/mongodb%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B/"/>
    <url>/2021/10/26/mongodb%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是<code>mongodb</code>的第二篇文章，本文包含了一些在平时自己开发过程当中使用的一些操作符以及特殊情况，希望对各位有帮助😺 。  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="filter"><a href="#filter" class="headerlink" title="$filter"></a>$filter</h3><ul><li><p>用于从已有数据对象中的数组中筛选出符合条件的数据项  </p></li><li><p>假设有如下集合名称为<code>users</code>的数据:  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">students</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">10</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Jack&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">17</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure></li><li><p>筛选出年龄大于<code>18</code>的学生  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">student_gt_18</span>: &#123;<br>        <span class="hljs-attr">$filter</span>: &#123;<br>          <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;$students&quot;</span>,<br>          <span class="hljs-attr">as</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>          <span class="hljs-attr">cond</span>: &#123;<br>            <span class="hljs-attr">$gt</span>: [ <span class="hljs-string">&quot;$$student.age&quot;</span>, <span class="hljs-number">18</span> ]<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure></li><li><p>你将会得到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">student_gt_18</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure></li></ul><p><code>$filter</code>有三个参数:  </p><ol><li><code>input</code><br>元数据中的某一字段(如<code>students</code>)  </li><li><code>as</code><br><code>students</code>的遍历项名称(如<code>student</code>)</li><li><code>cond</code><br>筛选条件，可以在其中使用遍历项的值(如<code>$$student.age</code>，得到了当前项的<code>age</code>)   </li></ol><h3 id="map"><a href="#map" class="headerlink" title="$map"></a>$map</h3><ul><li><p>用于遍历已有数据对象中的数组中并解析成新的数组<br>其实这个和上面的<code>$filter</code>在语义上与<code>javascript</code>的同名方法的功能是一致的，这样的话应该会很好理解了👍 。</p></li><li><p>假设有如下集合名称为<code>users</code>的数据:  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">students</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">10</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure></li><li><p>将学生<code>name</code>和<code>age</code>字段拼接生成新的字段<code>description</code>   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">new_students</span>: &#123;<br>        <span class="hljs-attr">$map</span>: &#123;<br>          <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;$students&quot;</span>,<br>          <span class="hljs-attr">as</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>          <span class="hljs-attr">in</span>: &#123;<br>            <span class="hljs-attr">description</span>: &#123;<br>              <span class="hljs-attr">$concat</span>: [ <span class="hljs-string">&quot;$$student.name&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;$$student.age&quot;</span> ]<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure></li><li><p>你将会得到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">new_students</span>: [<br>      &#123;<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;Join-10&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;Lisa-19&quot;</span>,<br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure></li></ul><p><code>$map</code>有三个参数:  </p><ol><li><code>input</code><br>元数据中的某一字段(如<code>students</code>)  </li><li><code>as</code><br><code>students</code>的遍历项名称(如<code>student</code>)</li><li><code>in</code><br>将会生成的数据字段，<code>key</code>为字段名称，<code>value</code>为字段值，可以在其中使用遍历项的值(如<code>$$student.age</code>，得到了当前项的<code>age</code>)<br>甚至可以在其中对一些数组进行<code>$filter</code>操作，这是被允许的。   </li></ol><h3 id="lookup"><a href="#lookup" class="headerlink" title="$lookup"></a>$lookup</h3><ul><li>复杂多表联查<br>这个应该在平常开发中用到的频率非常的高，用于将嵌套的集合进行查询<br>想象一下可能你的<code>users</code>集合中保存着<code>teacher</code>的字段，值为另一个<code>teachers</code>集合的<code>id</code>，此时就需要用到<code>$lookup</code>来进行查询  </li></ul><p><strong>$lookup有两种查询形式</strong>  </p><h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><p>这种适合只查询一层的情况，比如上面说的<code>teachers</code>集合中不存在当前查询所需要再次联表查询的字段<br>听着有些别扭，看下面的例子  </p><ul><li>假设有如下集合名称为<code>users</code>和<code>teachers</code>的数据: </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span><br>  &#125;<br>]<br><br><span class="hljs-comment">// teachers </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>students</code>集合并同时查询出其中的<code>teacher</code>数据  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$lookup</span>: &#123;<br>      <span class="hljs-attr">from</span>: <span class="hljs-string">&#x27;teachers&#x27;</span>,<br>      <span class="hljs-attr">localField</span>: <span class="hljs-string">&#x27;teacher&#x27;</span>,<br>      <span class="hljs-attr">foreignField</span>: <span class="hljs-string">&#x27;id&#x27;</span>,<br>      <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;teacher_data&#x27;</span><br>    &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">teacher_data</span>: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-comment">// 注意这里</span><br>    <span class="hljs-attr">teacher_data</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">40</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>注意看上面的查询出来的数据的<code>teacher_data</code>字段，它是一个数组。通过<code>$lookup</code>查询的结果都会变成一个数组。<br>如果不想是数组，可以通过<code>$unwind</code>来进行拆分，有关<code>$unwind</code>可在后文看到。  </p><p>简单查询包含四个参数：  </p><ol><li><code>from</code><br>要查询的目标集合名称  </li><li><code>localField</code><br>当前集合中需要进行查询的字段名称  </li><li><code>foreignField</code><br>两个集合所关联起来的字段名称，上面是<code>id</code>  </li><li><code>as</code><br>查询结果保存的字段名称，你可以使用原始字段名称进行覆盖，也可以新增一个  </li></ol><h4 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h4><p>通过上面的例子应该可以理解刚刚的那句话了吧，复杂查询可以把那些嵌套关联了多层的数据查询出来<br>还是看下面的例子🌰  </p><ul><li>假设有如下集合名称为<code>users</code>和<code>teachers</code>以及<code>schools</code>的数据: </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span><br>  &#125;<br>]<br><br><span class="hljs-comment">// teachers </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">school</span>: <span class="hljs-string">&quot;custom_school_id_001&quot;</span><br>  &#125;<br>]<br><br><span class="hljs-comment">// schools </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_school_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;high school&quot;</span>,<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>students</code>集合并同时查询出其中的<code>teacher</code>数据以及<code>school</code>数据<br>此时通过简单得查询已经无法满足要求  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$lookup</span>: &#123;<br>      <span class="hljs-attr">from</span>: <span class="hljs-string">&#x27;teachers&#x27;</span>, <br>      <span class="hljs-attr">let</span>: &#123;<br>        <span class="hljs-attr">teacher_id</span>: <span class="hljs-string">&quot;$teacher&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">pipeline</span>: [<br>        &#123;<br>          <span class="hljs-attr">$match</span>: &#123;<br>            <span class="hljs-attr">$expr</span>: &#123;<br>              <span class="hljs-attr">$eq</span>: [<br>                <span class="hljs-string">&quot;$id&quot;</span>, <span class="hljs-string">&quot;$$teacher_id&quot;</span><br>              ]<br>            &#125;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">$lookup</span>: &#123;<br>            <span class="hljs-attr">from</span>: <span class="hljs-string">&#x27;schools&#x27;</span>,<br>            <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;school_data&#x27;</span>,<br>            <span class="hljs-attr">foreignField</span>: <span class="hljs-string">&quot;id&quot;</span>,<br>            <span class="hljs-attr">localField</span>: <span class="hljs-string">&quot;school&quot;</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">$project</span>: &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">school</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">school_data</span>: <span class="hljs-string">&quot;$school_data&quot;</span><br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;teacher_data&#x27;</span><br>    &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">teacher_data</span>: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher_data</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>        <span class="hljs-attr">school_data</span>: [<br>          &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_school_id_001&quot;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;high school&quot;</span>,<br>          &#125;<br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>复杂查询也是四个参数:  </p><ol><li><code>from</code><br>与简单查询相同  </li><li><code>as</code><br>与简单查询相同  </li><li><code>let</code><br>在当前查询层定义的变量可以在本次查询中使用，比如上面定义的<code>teacher_id</code>，用于在下层查询时做筛选条件判断  </li><li><code>pipeline</code><br>下层查询操作，顾名思义，管道操作，值是一个数组，当中可以使用与外层相同的查询操作，可以访问到上层<code>let</code>中定义的变量，使用<code>$$</code>前缀  </li></ol><ul><li><p>应该有注意到上面在<code>pipeline</code>第一项是<code>$match</code>，为什么要这样操作？<br>当使用复杂查询时，需要自己来定义筛选条件，否则它将会把集合当中的所有数据全部返回  </p></li><li><p><code>$match</code> 表示的是筛选条件<br>以及其中若使用到<code>let</code>定义的变量时，需要使用<code>$expr</code>操作符，具体的我还没有了解过😊 。<br>还有一点需要注意的是，当要做比较的值得类型是<code>mongodb</code>自带的<code>ObjectId</code>类型时，相等判断条件需要使用<code>$eq</code>操作符，否则永远返回<code>false</code>    </p></li><li><p>注意:</p></li><li><p><code>pipeline</code> 中使用 <code>$match</code> 匹配 <code>let</code>中定义的字段时，需要在外面包一个 <code>$expr</code>, 否则无法匹配<br><code>$match: &#123; $expr: &#123; _id: &quot;$$customFields&quot; &#125; &#125;</code>  </p></li><li><p>如果要在<code>$match</code>中匹配<code>ObjectId</code>, 需要使用<code>$eq</code>, 直接比较似乎无效,原因有待查证. <code>$expr: &#123; $eq: [ &quot;$_id&quot;, &quot;$$customFields&quot; ] &#125;</code>   </p></li><li><p>ps<br>这是我另外碰到的一个例子🌰<br>需要判断某个值是否在数组中存在，此时可以使用<code>$in</code>操作符进行判断<br>第一个参数是需要判断的值，第二个参数是查询的数组  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 简单描述一下</span><br>&#123;<br>  <span class="hljs-attr">let</span>: &#123;<br>    <span class="hljs-attr">teacher_id</span>: <span class="hljs-string">&quot;$teacher&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">pipeline</span>: [<br>    &#123;<br>      <span class="hljs-attr">$match</span>: &#123;<br>        <span class="hljs-attr">$expr</span>: &#123;<br>          <span class="hljs-string">&quot;$in&quot;</span>: [ <span class="hljs-string">&quot;$name&quot;</span>, [<span class="hljs-string">&quot;Lisa&quot;</span>] ]<br>        &#125;<br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="unwind"><a href="#unwind" class="headerlink" title="$unwind"></a>$unwind</h3><p>根据指定的数组字段进行拆分成多项<br>它也有两种形式  </p><h4 id="简单形式"><a href="#简单形式" class="headerlink" title="简单形式"></a>简单形式</h4><ul><li>假设有如下集合名称为<code>users</code>的数据: </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: [<br>      <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>      <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span><br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>users</code>数据并将<code>teacher</code>字段进行拆分    </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$unwind</span>: <span class="hljs-string">&quot;$teacher&quot;</span><br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p><code>teacher</code>为拆分的字段，需要添加<code>$</code>前缀<br>这种简单的写法适合那种字段规整的情况，当需要做异常处理时，这种情况就不适用了。  </p><h4 id="复杂形式"><a href="#复杂形式" class="headerlink" title="复杂形式"></a>复杂形式</h4><ul><li>假设有如下集合名称为<code>users</code>的数据: </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: [<br>      <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>      <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span><br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_002&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>users</code>数据并将<code>teacher</code>字段进行拆分，并设置当<code>teacher</code>不存在时继续保留    </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$unwind</span>: &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;$teacher&quot;</span>,<br>      <span class="hljs-attr">preserveNullAndEmptyArrays</span>: <span class="hljs-literal">true</span> <br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_002&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>如上可以看到，当<code>teacher</code>不存在时，保留了对应的字段，如果设置<code>preserveNullAndEmptyArrays</code>时，第三条数据将不被查询到。  </p><p>复杂形式有三个参数：</p><ol><li><code>path</code><br>同简单形式  </li><li><code>preserveNullAndEmptyArrays</code><br>是否保留空数组  </li><li><code>includeArrayIndex</code><br>暂时没有用到过，再说。  </li></ol><h3 id="addToSet"><a href="#addToSet" class="headerlink" title="$addToSet"></a>$addToSet</h3><p>这个方法在前面的<a href="https://food-billboard.github.io/2020/10/18/mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6/">mongodb常用操作符文章中介绍过</a>介绍过，但是那是添加一项，有时候我们需要同时添加多个项。  </p><ul><li>假设有如下集合名称为<code>users</code>的数据: </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: [<br>      <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>    ]<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><ul><li>向<code>name</code>为<code>Join</code>的数据字段添加两个<code>teacher</code>项    </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.updateOne(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-attr">$addToSet</span>: &#123;<br>    <span class="hljs-attr">teacher</span>: &#123;<br>      <span class="hljs-attr">$each</span>: [<br>        <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span>,<br>        <span class="hljs-string">&quot;custom_teacher_id_003&quot;</span><br>      ]<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>该字段会变成  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: [<br>      <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>      <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span>,<br>      <span class="hljs-string">&quot;custom_teacher_id_003&quot;</span><br>    ]<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p>配合<code>$each</code>添加多项，这个没啥好说的  </p><h3 id="addFields"><a href="#addFields" class="headerlink" title="$addFields"></a>$addFields</h3><ul><li><p>向输出结果中新增字段<br>这种的一般使用情况是对原始的一些数据字段做特殊处理，比如统计等。  </p></li><li><p>假设有如下集合名称为<code>users</code>的数据:  </p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">homework</span>: [<br>      <span class="hljs-number">30</span>,<br>      <span class="hljs-number">40</span><br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>users</code>数据并添加新字段<code>total_homework</code>    </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$addFields</span>: &#123;<br>      <span class="hljs-attr">total_homework</span>: &#123; <br>        <span class="hljs-attr">$sum</span>: <span class="hljs-string">&quot;$homework&quot;</span> <br>      &#125;<br>    &#125;<br>  &#125;,<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">homework</span>: [<br>      <span class="hljs-number">30</span>,<br>      <span class="hljs-number">40</span><br>    ],<br>    <span class="hljs-attr">total_homework</span>: <span class="hljs-number">70</span> <br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="$push"></a>$push</h3><p>这个也是在<a href="https://food-billboard.github.io/2020/10/18/mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6/">前一篇文章</a>有介绍  </p><p>但是当需要同时添加多项时，可能会需要用到<code>$pushAll</code>操作符，但是在实际使用过程中，<code>$pushAll</code>会报错，所以这里还是使用<code>$push</code><br>至于使用方法，可以参考前面的<code>$addToSet</code>操作符。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>以上就是本人在实际使用过程中碰到的一部分问题，以后如果有新的问题还会补充。如果有哪里错了欢迎指正😊 。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>mongodb</category>
      
      <category>node</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github Actions 部署node项目</title>
    <link href="/2021/10/25/deploy/"/>
    <url>/2021/10/25/deploy/</url>
    
    <content type="html"><![CDATA[<h2 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h2><p>作为一个前端，其实平常和服务器打交道的时间并不多，但作为一个程序猿，又怎么能不想搞一搞呢。<br>讲一个最简单的例子🌰：<br>你发现了你页面的一个bug，改好之后需要部署到服务器了，恰巧没有后台人员在，需要自己部署。你输入账号密码登录了服务器，进入到对应的目录，替换了对应的文件，完成了本次的修改。过了一会儿，你发现好像还有问题，然后你又重新来了一遍。。。<br>这样重复做功绝对不是我们想要的，所以此时就需要<code>github actions</code>登场了。它帮助我们完成了中间这些复杂又重复的工作，让我们能有更多的时间摸🐟。😁</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>关于<code>github actions</code>的介绍，这里不多说，大家可以参看<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰老师的文章</a>  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>首先是具体的流程  </p><ul><li>本地完成代码修改，提交代码到<code>github</code>  </li><li><code>github</code>检测到代码提交，自动执行项目目录下的<code>.github/workflows</code>的yml文件。</li><li>虚拟机内:  </li></ul><ol><li>切换对应的分支，比如<code>master</code>  </li><li>生成<code>ssh</code>秘钥文件  </li><li>设置对应的<code>node</code>版本  </li><li>安装<code>yarn</code>、<code>pm2</code>  </li><li><code>pm2</code>部署代码至服务器  </li><li><code>ssh</code>登录服务器，<code>pm2</code>更新并启动<code>node</code>服务，更新<code>docker</code>服务  </li></ol><h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><p>以下文件路径基本源自<code>mac</code>  </p><ol><li>在本机的<code>.ssh</code>文件夹下生成秘钥、公钥，如果有的话请忽略  </li></ol><ul><li>使用命令生成<code>ssh-keygen -t rsa -C 你的github邮箱@.com</code>  </li><li>将公钥文件<code>id_rsa.pub</code>内容添加到<code>github</code>配置中(github网站上的 -&gt; <code>settings</code> -&gt; <code>SSH and GPG keys</code>)  </li></ul><ol start="2"><li>在对应的服务器中的<code>.ssh</code>文件夹下生成私钥、公钥，有的话请忽略  </li></ol><ul><li>使用命令<code>ssh-keygen -o</code>  </li></ul><ol start="3"><li>添加本机的公钥至服务器  </li></ol><ul><li>服务器<code>.ssh</code>文件夹下有一个<code>authorized_keys</code>文件，如果没有的话请创建<code>touch authorized_keys</code>  </li><li>添加本机的公钥内容至<code>authorized_keys</code>中  </li></ul><ol start="4"><li>添加服务器公钥至<code>github</code>  </li></ol><ul><li>将服务器公钥内容添加到<code>github</code> (github网站 -&gt; <code>settings</code> -&gt; <code>SSH and GPG keys</code>) 或者 (github项目中 -&gt; <code>settings</code> -&gt; <code>deploy keys</code>)</li></ul><ol start="5"><li>添加流程中所需要的一些环境变量<br>其中有些变量并不是必须得，可自行选择添加<br>所有的自定义的环境变量都放在项目的<code>secrets</code>中(github项目中 -&gt; <code>settings</code> -&gt; <code>secrets</code>)<br><code>name</code>字段自定义  </li></ol><ul><li>将本机私钥文件<code>id_rsa</code>内容添加至环境变量，<code>name</code>设置为<code>LOCAL_SSH_PRIVATE_KEY</code>，<code>value</code>为<code>id_rsa</code>内容  </li><li>添加服务器的<code>host</code>，<code>name</code>设置为<code>SSH_IP</code>  </li><li>添加服务器<code>ssh</code>用户名，<code>name</code>设置为<code>SSH_USERNAME</code></li><li>添加服务器<code>ssh</code>密码，<code>name</code>设置为<code>SSH_PASSWORD</code>  </li><li>添加服务器项目文件目录地址，<code>name</code>设置为<code>REMOTE_PATH</code>  </li></ul><ol start="6"><li>添加<code>github</code>至服务器的<code>known_hosts</code>文件中  </li></ol><ul><li>执行以下命令<code>ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</code><br>若不执行此操作，<code>github</code>访问服务器可能会出错  </li></ul><p>完成以上步骤后，即可开始项目的部署文件配置  </p><p>完整的代码在下方，当中的一些细节用注释标出  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">server</span> <span class="hljs-string">to</span> <span class="hljs-string">aliyun</span> <br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span> <br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy-and-start:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <span class="hljs-comment"># 运行环境</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 切换分支</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span>  <br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span><br><br>      <span class="hljs-comment"># 设置ssh文件</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">ssh</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 这里用到了刚刚的环境变量，本机的 ssh 私钥  </span><br>          <span class="hljs-attr">LOCAL_SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.LOCAL_SSH_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-comment"># 在虚拟机中生成对应的 ssh 文件</span><br>        <span class="hljs-comment"># 否则的话在下面的 pm2 操作中 将无法验证通过  </span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|  </span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$LOCAL_SSH_PRIVATE_KEY&quot; &gt; ~/.ssh/id_rsa </span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string"></span><br>      <span class="hljs-comment"># 设置node </span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">setup</span> <span class="hljs-string">node</span> <br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-number">12.16</span><span class="hljs-number">.1</span><br>      <span class="hljs-comment"># 安装对应的模块  </span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install yarn pm2 -g</span><br><span class="hljs-string"></span>      <span class="hljs-comment"># 代码更新至服务器  </span><br>      <span class="hljs-comment"># 如果是第一次的话则执行 pm2 deploy pm2.config.js production setup</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          pm2 deploy pm2.config.js production update</span><br><span class="hljs-string"></span><br>      <span class="hljs-comment"># 登录服务器并启动docker服务   </span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">start</span> <span class="hljs-string">the</span> <span class="hljs-string">remote</span> <span class="hljs-string">server</span> <br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">appleboy/ssh-action@master</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_IP</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># 进入到服务器的项目路径下  </span><br>          <span class="hljs-comment"># 安装全局依赖  </span><br>          <span class="hljs-comment"># 安装项目依赖  </span><br>          <span class="hljs-comment"># 启动/重启 docker服务  </span><br>          <span class="hljs-comment"># 启动项目  </span><br>          <span class="hljs-attr">script:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            cd $&#123;&#123; secrets.REMOTE_PATH &#125;&#125;</span><br><span class="hljs-string">            npm install pm2 yarn -g </span><br><span class="hljs-string">            yarn </span><br><span class="hljs-string">            docker-compose -f docker-compose.yml pull</span><br><span class="hljs-string">            docker-compose -f docker-compose.yml up -d</span><br><span class="hljs-string">            pm2 startOrRestart pm2.config.js</span><br></code></pre></td></tr></table></figure><h3 id="当中的问题"><a href="#当中的问题" class="headerlink" title="当中的问题"></a>当中的问题</h3><ol><li>为什么使用<code>pm2</code><br><code>node</code>作为一个后台服务应用，不像前端应用一样存在周期短，它被要求需要长期保持稳定的启动状态，当中的许多细节如果单靠开发者来控制的话，会显得相当的麻烦，此时依靠与<code>pm2</code>来进行管理会变得非常的容易。<br><code>pm2</code>内置了负载均衡，出错重启，后台运行等的特点，帮助开发者在运维当中给到了相当大的便利，并且它还能帮你自动部署项目到远程服务器。具体的细节可自行前往<a href="https://github.com/Unitech/pm2">github</a>查看  </li><li>为什么使用<code>docker</code>  <blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。  </p></blockquote></li></ol><p>想象一下当你辛苦的在服务器上部署完成了<code>nginx</code>、<code>mongodb</code>、<code>redis</code>等服务之后，某一天突然要求你更换另一台服务器部署，你是否需要重新将刚刚的服务重新安装启用部署，这样就显得非常麻烦了。<br>而<code>docker</code>这种封闭的，可移植的特性，可以极大的简化我们的部署流程，我们只需配置一次，即可，后续的所有操作全部都在<code>docker</code>容器当中进行。具体的细节不在本次讨论范围。  </p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这是本人在自己的摸索中踩坑的一些内容，当中可能还不乏一些错误，欢迎指正🙏🏻<br>最后，这是本人的<a href="https://github.com/food-billboard/node-server">后台服务项目</a>，其中有上面的配置文件等，欢迎大家参考点评😁。</p>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
      <category>node</category>
      
      <category>后端</category>
      
      <category>ssh</category>
      
      <category>pm2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>github actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Tus协议的文件上传流程</title>
    <link href="/2020/12/28/%E5%9F%BA%E4%BA%8ETus%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B/"/>
    <url>/2020/12/28/%E5%9F%BA%E4%BA%8ETus%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近一直都在弄关于文件上传方面的问题，如果只是小文件的话，基本直接<code>post</code>上传就可以解决，但是当面对大文件时，如果还是只用简单的请求可能无法完成文件的上传. </p><p>假设当前用户要上传一个<code>2G</code>的视频文件. 可能就会遇到许多问题: </p><ol><li>首先最大的问题就是，服务端不可能接受前端在一次请求中上传如此大的<code>body</code>.  </li><li>所以不得不选择将大文件分成多个小文件分多次上传，基本可以解决问题. 但是如果出现一些不可控的原因导致文件上传中断，用户只能选择重新上传，而重新上传意味着之前上传的内容又得再一次上传，如果用户在一个网络环境很差的情况下，这个文件就根本无法完成上传。</li></ol><p>基于以上的情况，通过<code>Tus</code>协议来实现分片上传以及断点续传的功能便能达到相当好的用户体验。下面就来讲讲这个实现过程。</p><h2 id="Tus"><a href="#Tus" class="headerlink" title="Tus"></a>Tus</h2><p>什么是<code>Tus</code>，<code>Tus</code>是基于<code>HTTP</code>的可恢复文件上传协议。可恢复意味着可以随时中断上载，并且可以继续上载而无需再次重新上载先前的数据。  </p><p><code>Tus</code>官网上有许多实现的库可供使用。而作为一个前端选手，必然用的<code>tus-js-client</code>，而我一开始接触的时候用的是文件上传工具<code>filepond</code>(其实之前还用过<code>uppy</code>，因为它<code>github</code>✨多，而且它原生就支持<code>Tus</code>协议，你问我为什么不用那个，因为我看不懂😬)。<br>幸好在<code>filepond</code>的issues中看到貌似它也可以和<code>Tus</code>结合使用🙂。  </p><p>其实<code>filepond</code>使用来说还算是不错的体验，但是它似乎没有针对<strong>断点续传</strong>方面做过处理，可能也有可能是因为我太菜了吧。  下面是<code>filepond</code>的样子，挺好看。<br><img src="/images/基于Tus协议的文件上传流程/filepond效果.png" /></p><h2 id="前后端基本交互流程"><a href="#前后端基本交互流程" class="headerlink" title="前后端基本交互流程"></a>前后端基本交互流程</h2><img src="/images/基于Tus协议的文件上传流程/tus.jpg" /><p>基于上面的流程图这里简单描述一下并讲讲其中一些注意的地方。  </p><ol><li>客户端首先向服务端发送<code>options</code>请求。获取服务端的配置，<br>比如服务端支持的<code>tus</code>版本，或者支持的<code>tus</code>扩展。  </li><li>如果服务端支持，客户端可以选择:  <ul><li>向服务端发起<code>post</code>请求创建文件副本  </li><li>发送<code>post</code>请求的同时发送部分文件分片  </li><li>直接发送<code>head</code>请求尝试恢复上传，如果失败则回退到<code>post</code>创建文件。  </li></ul></li><li>服务端返回文件的相关信息用于后续文件上传请求。  <ul><li>恢复上传: 根据服务端返回的响应头<code>Upload-Offset</code>从指定文件位置开始恢复上传  </li><li>首次上传: 从文件开始位置上传。也就是<code>0</code>。  </li></ul></li><li>重复发起<code>patch</code>请求发送文件分片，根据服务端响应的<code>Upload-Offset</code>来确定下一分片位置。<br>如果它的值等于文件的大小，说明文件上传已经完成。  </li><li>至此整个文件上传流程完成。  </li></ol><h2 id="Tus-扩展"><a href="#Tus-扩展" class="headerlink" title="Tus 扩展"></a>Tus 扩展</h2><p><code>Tus</code>还有许多扩展用于帮助开发者实现更多的功能。在上面的流程中已经用到了一些。<br>以下所有的扩展都需要服务端支持。<br>官方的方法是在<code>options</code>请求当中的响应中根据<code>Tus-Extension</code>响应头来分析具体服务端所接受的扩展。<br>下面的扩展会影响到上面请求流程中的很多地方，也会在下面介绍。(很多地方其实还是对官网的翻译，如果有兴趣的可以去官网继续学习更多的内容😊)  </p><ol><li>Creation<br>在文件上传前在服务端创建文件信息<br>可以将文件的相关信息预先在存储在服务端，这样可以为后续文件分片上传做参照。<br>比如可以将文件唯一标识符<code>md5</code>先进行上传，服务端存储数据库，保存每一上传的分片。  </li></ol><p>前端可以把一些文件信息放在<code>Upload-Metadata</code>请求头中  </p><img src="/images/基于Tus协议的文件上传流程/creation-post-req.png" /><img src="/images/基于Tus协议的文件上传流程/creation-post-response.png" /><p>服务端会返回<code>Location</code>告知前端文件的上传地址。  </p><ol start="2"><li>Creation-With-Upload<br>在服务端创建请求中添加文件分片内容<br>为了节省流量，在服务端允许的情况下，可以在向服务端创建请求的同时也将某一分片一同上传。  </li></ol><p>和<code>Creation</code>类似，也会返回<code>Location</code>头，同时会返回<code>Upload-Offset</code>设置下一分片的索引。<br><img src="/images/基于Tus协议的文件上传流程/creation-with-upload-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/creation-with-upload-res.png" /></p><ol start="3"><li>Expiration<br>临时文件的过期时间<br>服务端的存储空间毕竟有限，不可能无时限的将文件的分片保存在服务端的数据库中。<br>所以服务端可以设置分片的存储时间，并通过响应头<code>Upload-Expires</code>告知前端它的过期时间。<br>当超过服务端规定的时间之后，用户需要重新在服务端创建文件副本，重新上传。  <img src="/images/基于Tus协议的文件上传流程/expiration-req.png" /><img src="/images/基于Tus协议的文件上传流程/expiration-res.png" /> </li></ol><p>当前端发送文件分片响应时，服务端会添加响应头<code>Upload-Expires</code>告知前端该分片过期时间，如果超过时间，服务端将会返回<code>404</code>，前端需要重新上传。  </p><ol start="4"><li>Checksum<br>分片大小检查<br>服务端可以对前端发送的文件分片进行校验。<br>在上传前获取服务端上传配置支持度信息时，前端可以根据<code>Tus-Checksum-Algorithm</code>字段知道服务端支持的加密算法。  </li></ol><p>有时无法一开始就做出相应的计算，并且在服务端支持的情况下，可以使用<code>Trailer</code>请求头在完成上传后再进行校验。<br>服务端可以在一开始<code>options</code>的<code>Tus-Extension</code>中添加<code>Checksum-Trailer</code>字段表示支持该功能。<br>比如对文件进行<code>md5</code>加密，需要对文件分片一一进行处理。  </p><p>当上传校验失败时，服务端便会丢弃此分片，索引也不会发生改变。<br><img src="/images/基于Tus协议的文件上传流程/checksum-options-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/checksum-options-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/checksum-patch-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/checksum-patch-res.png" /> </p><p>上述例子中  </p><ul><li>服务端<code>options</code>响应中<code>Tus-Checksum-Algorithm: md5,sha1,crc32</code>展示了其支持的校验算法  </li><li>前端<code>patch</code>请求<code>Upload-Checksum: sha1 Kq5sNclPz7QV2+lfQIuc6R7oRu0=</code>使用<code>sha1</code>算法。  </li><li>服务端校验通过返回<code>204</code></li><li>若失败，则返回以下状态码(<code>400</code>: 算法不支持，<code>460</code>: 校验和不匹配)<br>官网上介绍<code>The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.</code><br>大概说上面的<code>Upload-Checksum</code>头由<code>sha1</code>算法和由<code>base64</code>编码的校验和组成，但是我不是太能理解这个，不管是使用base64解码或者用sha1解码似乎都无法解码出<code>Kq5sNclPz7QV2+lfQIuc6R7oRu0=</code>，如果有懂的大佬的话可以给解释解释😃。  </li></ul><ol start="5"><li><p>Termination<br>文件删除<br>这个应该没什么好说的，就是向服务端请求删除文件信息。  </p><img src="/images/基于Tus协议的文件上传流程/termination-req.png" /><img src="/images/基于Tus协议的文件上传流程/termination-res.png" /></li><li><p>Concatenation<br>并行上传<br>对于一个大文件，如果是一个个分片串行上传，可能还是有点慢。<br><code>tus</code>支持可以实行并行上传，可以针对同一个文件资源在服务端生成多个上传地址，这样就可以同时上传文件的不同分片。<br>当然这也需要服务端支持。  </p><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-req-1.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-res-1.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-req-2.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-res-2.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-patch-req-1.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-patch-res-1.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-patch-req-2.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-patch-res-2.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-req-4.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-res-4.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-head-req.png" /><img src="/images/基于Tus协议的文件上传流程/Concatenation-head-res.png" /></li></ol><p>上述例子中</p><ul><li>先是在开始时发送两个<code>post</code>请求并携带<code>Upload-Concat: partial</code>请求头，在服务端生成了两个上传地址<code>https://tus.example.org/files/a</code>和<code>https://tus.example.org/files/b</code>  </li><li>接着就可以同时在两个地址上传同一个文件，以此来提高效率。  </li><li>当上传完所有分片后，发送<code>post</code>请求并携带<code>Upload-Concat: final;/files/a /files/b</code>，格式为<code>final;</code>加上上一步中生成的上传地址，以空格分隔。服务端响应合成路径<code>Location: https://tus.example.org/files/ab</code>告知前端文件的地址。  该顺序需要和<code>post</code>中返回的地址顺序一致，否则可能会导致服务端文件分片合并出错。  </li><li>前端发送<code>head</code>请求，服务端接收到请求完成这个文件分片的合并。  </li></ul><p>就我个人看法，<code>Tus</code>协议提供的是一种思想，让我们在文件上传任务中出现的任何情况都能得到相应的应对方法，完美完成整个上传流程。<br>所在上面所介绍的扩展，不严谨的讲，我们可以用自己的方法来实现，它的作用就是能让两端能更好的理解当前的文件的上传情况。<br>我们不必太过于拘泥于相应的api，只需要能让两端更好，更容易的协作就好。  </p><p>还有，在我使用前端<code>tus</code>的<code>tus-js-client</code>工具时，检查<code>api</code>介绍以及粗略查找了下源码，看到它似乎对于<code>tus</code>扩展只实现了<code>Creation</code>、<code>Creation-With-Upload</code>、<code>Concatenation</code>这几个扩展，如果想使用其他扩展可能需要自行实现。<br>不过其他几个扩展的重点在后端，这也可能是它没有实现的原因。(也可能是我没看懂😝)  </p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>文件上传其中还有需要的知识，包括文件的分片，前端的文件处理方式以及关于文件的加密等。包括这里的<code>Tus</code>，也还有很多地方不是很理解，如果有哪里错了，先道个歉，欢迎各位给指正。–好好学习🐱。</p>]]></content>
    
    
    <categories>
      
      <category>文件</category>
      
      <category>上传</category>
      
      <category>前端</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tus upload file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb常用操作符</title>
    <link href="/2020/10/18/mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <url>/2020/10/18/mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="MongoDB操作符"><a href="#MongoDB操作符" class="headerlink" title="MongoDB操作符"></a>MongoDB操作符</h2><h3 id="MongoDB介绍"><a href="#MongoDB介绍" class="headerlink" title="MongoDB介绍"></a>MongoDB介绍</h3><p><code>MongoDB</code> 是由<code>C++</code>语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>在高负载的情况下，添加更多的节点，可以保证服务器性能。<br><code>MongoDB</code> 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br><code>MongoDB</code> 将数据存储为一个文档，数据结构由键值(<code>key=&gt;value</code>)<code>对组成。MongoDB</code> 文档类似于 <code>JSON</code> 对象。字段值可以包含其他文档，数组及文档数组。<br>如下这种结构<br><img src="/images/mongodb常用操作符/mongodb-cover-page.png" /></p><h3 id="MongoDB命令行简单操作"><a href="#MongoDB命令行简单操作" class="headerlink" title="MongoDB命令行简单操作"></a>MongoDB命令行简单操作</h3><p>假设存在数据库名称为<code>database</code><br>并且存在一个集合为<code>collection</code><br>集中<code>collection</code>中有如下数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Daniel&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">24</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;it&quot;</span>,<br>    <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;travel&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>    <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;travel&quot;</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li><p>创建数据库或使用数据库<br><code>use database</code></p></li><li><p>删除数据库<br><code>db.dropDatabase()</code></p></li><li><p>查看数据库列表<br><code>show dbs</code></p></li><li><p>创建集合<br>执行<code>use</code>操作后<br><code>db.collection.opertion</code><br>没有创建集合的语法，直接对指定集合进行操作就会创建该集合  </p></li><li><p>查看当前数据库的集合列表<br><code>show collections</code></p></li><li><p>删除集合<br><code>db.collection.drop()</code></p></li><li><p>查找</p></li></ul><ol><li>执行<code>find</code>命令<br><code>db.collection.find(&#123; hobby: &quot;travel&quot; &#125;)</code><br>得到以下结果<img src="/images/mongodb常用操作符/find-common.png"  /></li></ol><p><code>find</code>命令会找到符合查询条件的所有结果<br>可以在后面跟上<code>.pretty()</code>来让数据展示更美观。<br>后面跟<code>.count()</code>返回查找到的数量<br>后面跟<code>.sort()</code>返回排序后的数据<br>比如这样<code>db.collection.find(&#123; hobby: &quot;travel&quot; &#125;).sort(&#123; age: 1 &#125;)</code>，<code>1</code>表示升序，<code>2</code>降序</p><ol start="2"><li>执行<code>findOne</code>命令<br><code>db.collection.findOne(&#123; hobby: &quot;travel&quot; &#125;)</code>  <img src="/images/mongodb常用操作符/findOne.png"  />`findOne`只会找到符合条件的第一条  </li></ol><ul><li>删除</li></ul><ol><li><p>执行<code>deleteOne</code>命令<br><code>db.collection.deleteOne(&#123; hobby: &quot;travel&quot; &#125;)</code><br>得到以下结果</p><img src="/images/mongodb常用操作符/deleteOne.png"  />`deleteOne`命令会删除符合查询条件的第一条数据</li><li><p>执行<code>deleteMany</code>命令<br><code>db.collection.deleteMany(&#123; hobby: &quot;travel&quot; &#125;)</code><br><code>deleteMany</code>命令会删除符合查询条件的所有数据</p></li></ol><ul><li>插入</li></ul><ol><li><p>执行<code>insertOne</code>命令<br><code>db.collection.insertOne(&#123; &quot;name&quot;: &quot;Rick&quot;, &quot;age&quot;: 32, &quot;job&quot;: &quot;teacher&quot;, &quot;hobby&quot;: &quot;sport&quot; &#125;)</code><br><code>insertOne</code>命令可以添加一条数据到集合中<br>他有一个可选参数<code>&#123; writeConcern &#125;</code>，写入策略，默认为 1，即要求确认写操作，0 是不要求。  </p><img src="/images/mongodb常用操作符/insertOne.png"  /></li><li><p>执行<code>insertMany</code>命令  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.insertMany([<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>    <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;watch tv&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mary&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">8</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>    <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;book&quot;</span><br>  &#125;<br>])<br></code></pre></td></tr></table></figure><p><code>insertMany</code>允许同时插入多条数据到集合中<br>他有一个可选参数<code>&#123; writeConcern, ordered &#125;</code>，writeConcern意义同上，orderd表示是否按顺序写入，默认 true，按顺序写入。  </p></li></ol><ul><li>更新</li></ul><ol><li><p>执行<code>updateOne</code>命令<br><code>db.collection.updateOne(&#123; &quot;name&quot;: &quot;Mike&quot; &#125;, &#123; $set: &#123; &quot;age&quot;: 20 &#125; &#125;)</code><br><code>updateOne</code>命令可以更新匹配条件的第一条数据</p><img src="/images/mongodb常用操作符/updateOne.png"  /></li><li><p>执行<code>updateMany</code>命令<br><code>db.collection.updateMany(&#123; &quot;hobby&quot;: &quot;travel&quot; &#125;, &#123; &quot;hobby&quot;: &quot;watch tv&quot; &#125;)</code><br><code>updateMany</code>命令可以更新匹配条件的所有数据</p></li></ol><p>还有几个可选参数，可自行百度</p><h3 id="MongoDB操作符-1"><a href="#MongoDB操作符-1" class="headerlink" title="MongoDB操作符"></a>MongoDB操作符</h3><p>接下来介绍的是<code>MongoDB</code>中一些常用的操作符，暂时将操作符分为更新和查找两类。</p><h4 id="更新操作符"><a href="#更新操作符" class="headerlink" title="更新操作符"></a>更新操作符</h4><h5 id="inc"><a href="#inc" class="headerlink" title="$inc"></a>$inc</h5><p>  对一个字段增加指定数量，且字段的值类型为数字<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$inc&quot;</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">100</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  当然可以通过指定数字值为<code>负数</code>实现递减操作。<br>  <img src="/images/mongodb常用操作符/$inc.png"  /></p><h5 id="set"><a href="#set" class="headerlink" title="$set"></a>$set</h5><p>  这是相当常见的操作符，表示设置指定的<code>key</code><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$set&quot;</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">1000</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述将<code>name</code>为<code>Mike</code>的字段的<code>age</code>字段设置为<code>1000</code><br>  如果<code>key</code>不存在的话则创建<br>  当然也可以同时设置多个值，但是需要注意的是如果修改的值之前是一个对象或一个数组的话会整个覆盖掉该值。具体的修改方法可以参照下方的具体实例。<br>  <img src="/images/mongodb常用操作符/$set.png"  /></p><h5 id="unset"><a href="#unset" class="headerlink" title="$unset"></a>$unset</h5><p>  将某一个字段删除<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$unset&quot;</span>: &#123; <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述将<code>name</code>为<code>Mike</code>的字段的<code>hobby</code>字段删除，如果不存在该字段则不进行操作<br>  <img src="/images/mongodb常用操作符/$unset.png"  /></p><h5 id="push"><a href="#push" class="headerlink" title="$push"></a>$push</h5><p>  对某一字段进行内容追加，只能对数组字段进行操作(否则会报错)，不存在则直接设置为<code>空数组</code>并添加<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$push&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: <span class="hljs-string">&quot;book&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述将<code>name</code>为<code>Mike</code>的字段的<code>like</code>字段设置为<code>[ &quot;book&quot; ]</code><br>  <img src="/images/mongodb常用操作符/$push.png"  /></p><h5 id="pushAll"><a href="#pushAll" class="headerlink" title="$pushAll"></a>$pushAll</h5><p>  类似上面的<code>$push</code>操作符，但是接收的值时一个<code>数组</code>，表示可同时追加多个值，同样是对数组字段进行操作<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$pushAll&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: [ <span class="hljs-string">&quot;tv&quot;</span>, <span class="hljs-string">&quot;sport&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述紧接前面的操作，向<code>like</code>字段中继续追加了<code>tv</code>和<code>sport</code><br>  不过似乎在高版本<code>mongodb</code>已经取消了这个操作符，有待考证。</p><h5 id="addToSet"><a href="#addToSet" class="headerlink" title="$addToSet"></a>$addToSet</h5><p>  类似上面的<code>$pushAll</code>操作符，不同的是，当且仅当该值在字段中<code>不存在</code>时添加，相当于是自动做了去重。<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$addToSet&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: [ <span class="hljs-string">&quot;tv&quot;</span>, <span class="hljs-string">&quot;hamberger&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  继续上面的<code>like</code>添加数据，因为上面添加过<code>tv</code>字段，所以再次添加被忽略<br>  当然此操作符添加的值不一定是数组，也可以这样<br>  <code>$addToSet: &#123; &quot;like&quot;: &quot;hamberger&quot; &#125;</code><br>  <img src="/images/mongodb常用操作符/$addToSet.png"  /></p><h5 id="pop"><a href="#pop" class="headerlink" title="$pop"></a>$pop</h5><p>  与<code>$pop</code>操作符相反，表示删除指定字段的第一个或最后一个值，同样只能是数组<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$pop&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: <span class="hljs-number">1</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述表示删除<code>like</code>字段的最后一个值。<br>  <code>1</code>表示最后一个值，<code>-1</code>表示第一个值<br>  <img src="/images/mongodb常用操作符/$pop.png"  /></p><h5 id="pull"><a href="#pull" class="headerlink" title="$pull"></a>$pull</h5><p>  表示从某一字段中删除指定的值，针对数组<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$pull&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: <span class="hljs-string">&quot;hamberger&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述将<code>name</code>为<code>Mike</code>的字段的<code>like</code>数组中的<code>hamberger</code>字段删除<br>  <img src="/images/mongodb常用操作符/$pull.png"  /></p><h5 id="pullAll"><a href="#pullAll" class="headerlink" title="$pullAll"></a>$pullAll</h5><p>  类似<code>$pull</code>操作符，不同的是可以同时删除多个值<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$pullAll&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: [ <span class="hljs-string">&quot;hamberger&quot;</span>, <span class="hljs-string">&quot;book&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述删除了<code>name</code>为<code>Mike</code>字段的<code>like</code>中的<code>hamberger</code>和<code>book</code><br>  <img src="/images/mongodb常用操作符/$pullAll.png"  /></p><h5 id="rename"><a href="#rename" class="headerlink" title="$rename"></a>$rename</h5><p>  这个操作符表示对之前设置过的字段进行重命名，设置的是<code>key</code><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-attr">$rename</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: <span class="hljs-string">&quot;dislike&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述将<code>like</code>字段修改为了<code>dislike</code>名称。<br>  <img src="/images/mongodb常用操作符/$rename.png"  /></p><h4 id="查找操作符"><a href="#查找操作符" class="headerlink" title="查找操作符"></a>查找操作符</h4><p>  下面介绍的，是常用的查询操作符🌰  </p><h5 id="all"><a href="#all" class="headerlink" title="$all"></a>$all</h5><p>  查找字段中包含指定内容的值，且需要包含全部指定的值，针对数组型字段<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;like&quot;</span>: &#123; <span class="hljs-string">&quot;$all&quot;</span>: [ <span class="hljs-string">&quot;hamberger&quot;</span>, <span class="hljs-string">&quot;book&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述能查找到<code>name</code>为<code>Mike</code>字段，但是无法查找到其他字段，因为他们无法完全满足查询条件。<br>  <img src="/images/mongodb常用操作符/$all.png"  /></p><h5 id="gt"><a href="#gt" class="headerlink" title="$gt"></a>$gt</h5><p>  查找大于(great then)指定值的字段<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$gt&quot;</span>: <span class="hljs-number">18</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>age</code>大于<code>18</code>的字段，不包含<code>18</code><br>  <code>日期</code>也可直接那这个进行比较<br>  <img src="/images/mongodb常用操作符/$gt.png"  /></p><h5 id="gte"><a href="#gte" class="headerlink" title="$gte"></a>$gte</h5><p>  表示不小于指定值，也就是大于等于<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$gte&quot;</span>: <span class="hljs-number">20</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>age</code>不小于<code>20</code>的字段，所以包括等于<code>20</code>的字段<br>  <img src="/images/mongodb常用操作符/$gte.png"  /></p><h5 id="lt"><a href="#lt" class="headerlink" title="$lt"></a>$lt</h5><p>  与上面的<code>$gt</code>操作符相反，表示小于(less then)指定值<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$lt&quot;</span>: <span class="hljs-number">20</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>age</code>小于<code>20</code>的字段，且不包含<code>20</code><br>  <img src="/images/mongodb常用操作符/$lt.png"  /></p><h5 id="lte"><a href="#lte" class="headerlink" title="$lte"></a>$lte</h5><p>  表示不大于指定值，也就是小于等于<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: &#123; <span class="hljs-string">&quot;$lte&quot;</span>: <span class="hljs-number">18</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>age</code>小于<code>18</code>的字段，且包含<code>18</code><br>  <img src="/images/mongodb常用操作符/$lte.png"  /></p><h5 id="in"><a href="#in" class="headerlink" title="$in"></a>$in</h5><p>  查找存在指定数组中值得项，与<code>$all</code>不同的是，字段只需要满足其中任意一项即可<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$in&quot;</span>: [ <span class="hljs-number">18</span>, <span class="hljs-number">20</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述可以找到所有在<code>age</code>字段等于<code>18</code>或<code>20</code>的数据<br>  <img src="/images/mongodb常用操作符/$in.png"  /></p><h5 id="nin"><a href="#nin" class="headerlink" title="$nin"></a>$nin</h5><p>  与上面的<code>$in</code>操作符相反，表示查找不存在指定数组中的值的项<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;like&quot;</span>: &#123; <span class="hljs-string">&quot;$nin&quot;</span>: [ <span class="hljs-string">&quot;tv&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>like</code>字段中不存在<code>tv</code>的项<br>  <img src="/images/mongodb常用操作符/$nin.png"  /></p><h5 id="ne"><a href="#ne" class="headerlink" title="$ne"></a>$ne</h5><p>  有相等就会有不相等，这个操作符就是查找不等于指定值得项，相当于只有一项的<code>$nin</code><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;like&quot;</span>: &#123; <span class="hljs-string">&quot;$ne&quot;</span>: <span class="hljs-string">&quot;book&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>like</code>字段中不存在<code>book</code>的项<br>  <img src="/images/mongodb常用操作符/$ne.png"  /></p><h5 id="and"><a href="#and" class="headerlink" title="$and"></a>$and</h5><p>  查找同时满足所有指定条件的项，并且至少需要包含<strong>两个</strong>条件<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;$and&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>name</code>为<code>Mike</code>并且<code>age</code>为<code>20</code>的字段<br>  <img src="/images/mongodb常用操作符/$and.png"  /></p><h5 id="nor"><a href="#nor" class="headerlink" title="$nor"></a>$nor</h5><p>  与上面的<code>$and</code>相反，表示查找同时不满足所有指定条件的项，同样至少需要包含<strong>两个</strong>条件<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;$nor&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>name</code>不为<code>Mike</code>并且<code>age</code>不等于<code>18</code>的数据<br>  <img src="/images/mongodb常用操作符/$nor.png"  /></p><h5 id="not"><a href="#not" class="headerlink" title="$not"></a>$not</h5><p>  指定不能满足指定条件的数据项，此操作符只能包含<strong>一个</strong>条件，而且它无法单独完成查询，需要与其他操作符配合一起使用。<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;$not&quot;</span>: &#123; <span class="hljs-string">&quot;$gt&quot;</span>: <span class="hljs-number">18</span> &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>age</code>字段小于等于<code>18</code>的数据项，当然像例子这样的情况也可以直接使用<code>$lte</code>操作符完成。<br>  <img src="/images/mongodb常用操作符/$not.png"  /></p><h5 id="or"><a href="#or" class="headerlink" title="$or"></a>$or</h5><p>  表示查找能至少满足<strong>一个</strong>条件的项，并且需要至少包含<strong>两个</strong>筛选条件<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;$or&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述表示查找<code>name</code>为<code>Mike</code>或者<code>age</code>为<code>20</code>的数据项<br>  <img src="/images/mongodb常用操作符/$or.png"  /></p><h5 id="exists"><a href="#exists" class="headerlink" title="$exists"></a>$exists</h5><p>  此操作符用于字段的<code>key</code>的判断，表示查找是否存在否字段<code>key</code>的数据项，可选值为<code>true</code>和<code>false</code>，选择<strong>true</strong>表示存在，<strong>false</strong>则不存在指定字段的项<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: &#123; <span class="hljs-string">&quot;$exists&quot;</span>: <span class="hljs-literal">true</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找存在<code>name</code>字段的数据项<br>  <img src="/images/mongodb常用操作符/$exists.png"  /></p><h5 id="mod"><a href="#mod" class="headerlink" title="$mod"></a>$mod</h5><p>  表示查找满足计算结果的数据项，此操作符为取模<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$mod&quot;</span>: [ <span class="hljs-number">3</span>, <span class="hljs-number">0</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述表示<code>age</code>字段的值对3取模等于0的值。<br>  <img src="/images/mongodb常用操作符/$mod.png"  /></p><h5 id="type"><a href="#type" class="headerlink" title="$type"></a>$type</h5><p>  表示选择指定数据类型的数据项<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: &#123; <span class="hljs-string">&quot;$type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>name</code>字段值类型为<code>string</code>的数据项<br>  此操作符表示能查找对应的数据类型的数据项，它也有对应的代码，如下所示</p><blockquote><p>Double: 1<br>  String<br>  Object    3<br>  Array    4<br>  Binary data    5<br>  Undefined    6    已废弃。<br>  Object id    7<br>  Boolean    8<br>  Date    9<br>  Null    10<br>  Regular Expression    11<br>  JavaScript    13<br>  Symbol    14<br>  JavaScript (with scope)    15<br>  32-bit integer    16<br>  Timestamp    17<br>  64-bit integer    18<br>  Min key    255    Query with -1.<br>  Max key    127<br>  <img src="/images/mongodb常用操作符/$type.png"  /></p></blockquote><h5 id="regex"><a href="#regex" class="headerlink" title="$regex"></a>$regex</h5><p>  就是字面意思，使用正则表达式来匹配字段<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: &#123; <span class="hljs-string">&quot;$regex&quot;</span>: <span class="hljs-regexp">/mike/</span>, <span class="hljs-string">&quot;$options&quot;</span>: <span class="hljs-string">&quot;i&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述匹配<code>name</code>字段值包含<code>mike</code>（不区分大小写是因为配置了<code>$options</code>）的数据项<br>  <code>$options</code>表示正则表达式的修饰符，其他的还有<code>i</code>(不区分大小写),<code>g</code>(全局匹配),<code>m</code>(多行匹配),<code>s</code>(.包含换行符<code>\n</code>)<br>  当然直接使用正则表达式也是可以的。<br>  <img src="/images/mongodb常用操作符/$regex.png"  /></p><h5 id="where"><a href="#where" class="headerlink" title="$where"></a>$where</h5><p>  有些情况下普通方法很难做出筛选，可以使用此操作符用<code>javascript</code>语法来进行筛选<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;$where&quot;</span>: <span class="hljs-string">&quot;this.name=&#x27;Jack&#x27;&amp;&amp;this.like.some(key =&gt; key == &#x27;hamberger&#x27;)&quot;</span><br>&#125;)<br></code></pre></td></tr></table></figure><br>  上述查找<code>name</code>为<code>Jack</code>且<code>like</code>字段包含<code>hamberger</code>值得数据项<br>  它甚至可以直接写一个函数<code>&#123; function() &#123; return this.name == &#39;Jack&#39; &amp;&amp; this.like.some(key =&gt; key == &#39;hamberger&#39;) &#125; &#125;</code><br>  <strong>注意</strong><br>  虽然这种方法可以有效的解决一些问题，但是还是尽量不要使用这个操作符，因为它会将MongoDB里面保存的BSON数据变为JavaScript的语法结构，这样的方式不方便使用数据库的索引机制。<br>  <img src="/images/mongodb常用操作符/$where.png"  /></p><h5 id="elemMatch"><a href="#elemMatch" class="headerlink" title="$elemMatch"></a>$elemMatch</h5><p>  此操作符用于对类似一个嵌套数组对象来进行多条件的查询<br>  <img src="/images/mongodb常用操作符/$elemMatch.png"  /><br>  上述查找了<code>like</code>字段数组中<code>type</code>为<code>eat</code>并且<code>target</code>为<code>hamberger</code>的数据项  </p><h5 id="slice"><a href="#slice" class="headerlink" title="$slice"></a>$slice</h5><p>  将数据中的数组字段做切割，选出一段选区<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 基本查询</span><br>db.collection.find(&#123;&#125;, &#123;<br>  <span class="hljs-attr">like</span>: &#123;<br>    <span class="hljs-attr">$slice</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>  &#125;<br>&#125;)<br><span class="hljs-comment">//聚合查询</span><br>db.collection.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">like</span>: &#123;<br>        <span class="hljs-attr">$slice</span>: [ <span class="hljs-string">&quot;$like&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span> ]<br>      &#125;<br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><br>  以上两种方法都能取出对应的数组项的第一条，两个数字分别代表：起始的索引、切割的数量  </p><ul><li>基本查询<img src="/images/mongodb常用操作符/$slice-normal.jpg"  />  </li><li>聚合查询  <img src="/images/mongodb常用操作符/$slice-aggregate.jpg" /></li></ul><h3 id="相关实例"><a href="#相关实例" class="headerlink" title="相关实例"></a>相关实例</h3><p>讲完了操作符，这里简单讲几个之前在实践当中碰到的一些问题，以及解决方法，欢迎各位参考。  </p><h5 id="查找或修改数组中嵌套的对象的属性"><a href="#查找或修改数组中嵌套的对象的属性" class="headerlink" title="查找或修改数组中嵌套的对象的属性"></a>查找或修改数组中嵌套的对象的属性</h5><p>假设<code>database</code>的<code>collection</code>中存在以下数据  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>    <span class="hljs-string">&quot;like&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;eat&quot;</span>,<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;hamberger&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;sport&quot;</span>,<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;running&quot;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">50</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;teacher&quot;</span>,<br>    <span class="hljs-string">&quot;like&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;eat&quot;</span>,<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;vegetable&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;sport&quot;</span>,<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;baseball&quot;</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>普通情况下无法直接选中对应数组对象的属性，但是<code>mongodb</code>中支持<code>.</code>来选择数组对象中的属性  </p><ul><li><p><code>parent_field.child_field</code><br>比如像上面的<code>like</code>字段选择<code>target=vegetable</code><br><code>db.collection.find(&#123; &quot;like.target&quot;: &quot;vegetable&quot; &#125;)</code></p><img src="/images/mongodb常用操作符/数组对象嵌套查询.png"  /><h5 id="修改多层嵌套的数组对象"><a href="#修改多层嵌套的数组对象" class="headerlink" title="修改多层嵌套的数组对象"></a>修改多层嵌套的数组对象</h5><p>有时候不止会有一层嵌套，多层嵌套上面的方法不适用，虽然这种存储方式不太常见，但是也可以解决<br>假设有如下的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack&quot;</span>,<br>    <span class="hljs-string">&quot;like&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;eat&quot;</span>,<br>        <span class="hljs-attr">target</span>: [<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hamberger&quot;</span>,<br>            <span class="hljs-attr">price</span>: <span class="hljs-number">100</span><br>          &#125;,<br>          &#123; <br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;salad&quot;</span>,<br>            <span class="hljs-attr">price</span>: <span class="hljs-number">200</span><br>          &#125;<br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>]<br><br><span class="hljs-comment">//执行更新操作</span><br>db.collection.updateOne(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Jack&quot;</span> &#125;, &#123; <span class="hljs-attr">$set</span>: &#123; <span class="hljs-string">&quot;like.$[stepone].target.$[steptwo].price&quot;</span> : <span class="hljs-number">200</span> &#125; &#125;, &#123;<br> <span class="hljs-attr">arrayFilters</span>: [<br>  &#123;<br>   <span class="hljs-string">&quot;stepone&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;$type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>   &#125;,<br>   <span class="hljs-string">&quot;stepone.type&quot;</span>: <span class="hljs-string">&quot;eat&quot;</span> <br>  &#125;,<br>  &#123;<br>   <span class="hljs-string">&quot;steptwo&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;$type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>   &#125;<br>  &#125;<br> ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述操作是选择上面数据中<code>like</code>字段的<code>type</code>为<code>eat</code>并且<code>target</code>数组中的<code>name</code>为<code>hamberger</code>的价格<code>price</code>改成了200<br><code>updateOne</code>的第三个参数用户定义第二参数中用到的嵌套名称的筛选条件，并且它的名称定义为<strong>以小写字母开头的字母数字字符串</strong>  </p></li></ul><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p><code>MongoDB</code>的操作符以及命令远不止这些，有兴趣的可以自行去MongoDB官网查找学习，本人也会在后续的实践学习中继续更新。😸</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>mongodb</category>
      
      <category>node</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chai</title>
    <link href="/2020/08/28/Chai/"/>
    <url>/2020/08/28/Chai/</url>
    
    <content type="html"><![CDATA[<h2 id="Chai介绍"><a href="#Chai介绍" class="headerlink" title="Chai介绍"></a>Chai介绍</h2><p>Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。<br>本文介绍的Chai下的expect/should风格属于BDD(行为驱动开发)<br>因为本身语法相对简单，所以本文是类似于api的中文文档，其中有许多不足，见谅。</p><h2 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h2><ul><li><code>to</code></li><li><code>be</code></li><li><code>been</code></li><li><code>is</code></li><li><code>that</code></li><li><code>which</code></li><li><code>and</code></li><li><code>has</code></li><li><code>have</code></li><li><code>with</code></li><li><code>at</code></li><li><code>of</code></li><li><code>same</code><br>以上仅做语义化用，无实际作用</li></ul><h3 id="具体api介绍"><a href="#具体api介绍" class="headerlink" title="具体api介绍"></a>具体api介绍</h3><p><span id="top"></span></p><ul><li><a href="#not">not</a><br>对之后的断言取反</li><li><a href="#deep">deep</a><br>针对对象、数组等进行深层次的键值对判断</li><li><a href="#any">any</a><br>与<code>keys</code>一同使用时表示至少满足一项</li><li><a href="#all">all</a><br>与keys一同使用时表示至少全部满足</li><li><a href="#a">a | an</a><br>既可做链式调用也可做断言</li><li><a href="#include">include | contains</a><br>是否包含指定的值 既可做链式调用也可做断言</li><li><a href="#nested">nested</a><br>用于在<code>property</code>、<code>include</code>等用<code>.</code>语法获取深层次属性</li><li><a href="#ok">ok</a><br>真值</li><li><a href="#true">true</a><br>true</li><li><a href="#false">false</a><br>false</li><li><a href="#null">null</a><br>null</li><li><a href="#undefined">undefined</a><br>undefined</li><li><a href="#NaN">NaN</a><br>NaN</li><li><a href="#exist">exist</a><br>非null 非undefined</li><li><a href="#finite">finite</a><br>非<code>NaN</code> 非<code>Infinity</code></li><li><a href="#empty">empty</a><br>判断值长度为<code>0 [] &#39;&#39; &#123;&#125;</code></li><li><a href="#arguments">arguments</a><br>是否为arguments对象</li><li><a href="#equal">equal</a><br><code>===</code></li><li><a href="#eql">eql</a><br>相当于<code>deep</code>和<code>equal</code>的简写</li><li><a href="#above">above</a><br>大于</li><li><a href="#least">least</a><br>大于等于</li><li><a href="#below">below</a><br>小于</li><li><a href="#most">most</a><br>小于等于</li><li><a href="#within">within</a><br>区间内(数字)</li><li><a href="#instanceof">instanceof</a><br>是否为该实例</li><li><a href="#property">property</a><br>是否拥有指定属性</li><li><a href="#ownProperty">ownProperty</a><br>是否拥有自身的属性</li><li><a href="#ownPropertyDescriptor">ownPropertyDescriptor</a><br>属性描述对象</li><li><a href="#lengthOf">length</a><br>length属性</li><li><a href="#lengthOf">lengthOf</a><br>是否为指定长度值</li><li><a href="#match">match</a><br>是否匹配指定正则</li><li><a href="#string">string</a><br>是否包含指定字符串</li><li><a href="#keys">keys</a><br>配合其他字段使用，是否包含或不包含指定的key</li><li><a href="#throw">throw</a><br>是否抛出指定错误或字符串或匹配指定错误信息</li><li><a href="#respondTo">respondTo</a><br>断言是否会响应一个方法</li><li><a href="#itself">itself</a><br>配合<code>respondTo</code>用来判断是否为自身的方法</li><li><a href="#satisfy">satisfy</a><br>返回一个函数且参数为目标值且返回值为<code>boolean</code>，用来指定是否通过检测</li><li><a href="#closeTo">closeTo</a><br>判断值是否在期望值接收范围内</li><li><a href="#members">members</a><br>类似于<code>contains</code>、<code>include</code>，但是能接收数组，主语只能是数组</li><li><a href="#oneOf">oneOf</a><br>判断值是否出现在指定数组中 </li><li><a href="#change">change</a><br>判断方法是否会改变指定对象的指定属性的值 </li><li><a href="#increase">increase</a><br>判断方法是否会增加指定对象的属性的值</li><li><a href="#decrease">decrease</a><br>判断方法是否会减少指定对象的属性的值</li><li><a href="#extensible">extensible</a><br>判断指定值是否可扩展(可以添加新属性)</li><li><a href="#sealed">sealed</a><br>判断指定值是否封闭(不可添加新属性、不可删除旧属性、可修改旧属性)</li><li><a href="#frozen">frozen</a><br>判断值是否冻结(不可添加新属性、不可删除旧属性、不可修改旧属性)</li><li><a href="#own">own</a><br>判断值是否拥有指定的属性，不包含上层属性</li><li><a href="#by">by</a><br>配合<code>descrease</code> 或 <code>increase</code>、 <code>change</code>等来判断断言值是否发生变化在指定范围内</li><li><a href="#fail">fail</a><br>判断是否会失败</li><li><a href="#ordered">ordered</a><br>配合<code>members</code>用于指定<code>members</code>参数数组的顺序与主语数组的顺序一致</li></ul><p><span id="not"></span></p><p><strong>.not</strong><br>对之后的断言取反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;).to.not.equal(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.not.have.a.keys(<span class="hljs-string">&#x27;b&#x27;</span>)<br>expect([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]).to.be.not.lengthOf(<span class="hljs-number">3</span>)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.length.not.within(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="deep"></span></p><p><strong>.deep</strong><br>普通的对象或数组比较是比较它们的整体是否相等。<br>比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.not.equal(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.not.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.deep.equal(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.deep.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125; &#125; &#125;).to.be.deep.equal(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125; &#125; &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.have.nested.deep.property(<span class="hljs-string">&#x27;a.b&#x27;</span>)<br></code></pre></td></tr></table></figure><p>相当于是严格相等 <code>===</code><br><a href="#top">顶</a></p><p><span id="any"></span></p><p><strong>.any</strong><br>与<code>keys</code>使用时至少满足一项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]).to.have.any.keys(<span class="hljs-number">0</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> &#125;).to.have.any.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="all"></span></p><p><strong>.all</strong><br>与<code>any</code>类似，但是至少满足所有项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]).to.has.all.keys(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>expect([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]).to.not.has.all.keys(<span class="hljs-number">0</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> &#125;).to.has.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;).to.not.has.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br></code></pre></td></tr></table></figure><p>需要注意的是，如上最后一条断言所示，当<code>all</code>和<code>keys</code>一同使用时，断言对象的<code>key</code>必须和<code>keys</code>完全一样才能通过<br><a href="#top">顶</a></p><p><span id="a"></span></p><p><strong>.a .an</strong><br>既可以用做链式判断也可用于断言<br>用作判断时无实际作用，仅用于语义化<br>用做断言时用于判断值是否为某一类型<br>方法<code>type a = (type: &#39;string&#39; | &#39;object&#39; | &#39;null&#39; | &#39;undefined&#39; | &#39;array&#39; | &#39;number&#39; | &#39;symbol&#39; | &#39;error&#39; | &#39;promise&#39;/*还有别的类型...*/, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.a(<span class="hljs-string">&#x27;number&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span> &#125;).to.has.a.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(<span class="hljs-built_in">Symbol</span>()).to.be.a(<span class="hljs-string">&#x27;symbol&#x27;</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>()).to.be.a(<span class="hljs-string">&#x27;error&#x27;</span>)<br><span class="hljs-comment">//自定义类型</span><br><span class="hljs-keyword">const</span> object = &#123;<br>  [<span class="hljs-built_in">Symbol</span>.toStringTag]: <span class="hljs-string">&#x27;diyObj&#x27;</span><br>&#125;<br>expect(object).to.be.a(<span class="hljs-string">&#x27;diyObj&#x27;</span>)<br><span class="hljs-comment">//继续断言</span><br>expect(<span class="hljs-number">100</span>).to.be.a(<span class="hljs-string">&#x27;number&#x27;</span>).and.to.equal(<span class="hljs-number">100</span>)<br><span class="hljs-comment">//自定义错误信息</span><br>expect(<span class="hljs-number">100</span>).to.be.a(<span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;it is not impossible&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>可用于自定义类型进行判断，如上使用<code>Symbol.toStringTag</code>进行自定义类型定义</li><li>由<code>a</code>和<code>an</code>断言会返回断言的值，可以继续做链式调用继续做其他判断</li><li><code>a</code>和<code>an</code> 有可选的第二参数可以指定出错时的错误信息<br><a href="#top">顶</a></li></ul><p><span id="include"></span></p><p><strong>.include .contains</strong><br>用于判断断言值是否包含某个指定的值，但是只能指定一个值<br><code>includes</code> 、 <code>contains</code> <code>contain</code> 同义<br>既可以用做链式判断也可用于断言<br>方法 <code>type include = (value: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字符串包含</span><br>expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.be.include(<span class="hljs-string">&#x27;iel&#x27;</span>)<br><span class="hljs-comment">//数组</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.a(<span class="hljs-string">&#x27;array&#x27;</span>).and.include(<span class="hljs-number">1</span>)<br><span class="hljs-comment">//严格相等</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>]).to.not.be.include(<span class="hljs-number">2</span>)<br><span class="hljs-comment">//对象</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;).to.be.include(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">//map值包含</span><br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])).to.be.include(<span class="hljs-number">2</span>)<br><span class="hljs-comment">//set值包含</span><br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])).to.be.include(<span class="hljs-number">3</span>)<br><span class="hljs-comment">//深层次严格相等</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.not.include(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.deep.include(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.nested.deep.include(&#123; <span class="hljs-string">&#x27;a.b&#x27;</span>: <span class="hljs-number">2</span> &#125;)<br><span class="hljs-comment">//自定义断言错误信息</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.not.include(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;it is not impossible&#x27;</span>)<br><span class="hljs-comment">//配合members链式调用</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.include.members([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><span class="hljs-comment">//配合keys</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;).to.be.include.any.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;).to.be.include.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-comment">//对象可以获取上层属性</span><br><span class="hljs-built_in">Object</span>.prototype.say = <span class="hljs-string">&#x27;Daniel&#x27;</span><br>expect(&#123;&#125;).to.be.include(&#123; <span class="hljs-attr">say</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span> &#125;).but.not.own.include(&#123; <span class="hljs-attr">say</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span> &#125;)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="nested"></span></p><p><strong>.nested</strong><br>用于在<code>property</code>、<code>include</code>等用<code>.</code>语法获取深层次属性<br>有时候对于深层次的对象或数组无法直接判断该内容，可以通过<code>nested</code>来实现深层次的值获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//深层次嵌套获取</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">1</span> &#125; &#125; &#125;).to.be.nested.have.a.property(<span class="hljs-string">&#x27;a.b.c&#x27;</span>)<br><span class="hljs-comment">//转义</span><br>expect(&#123; <span class="hljs-string">&#x27;.a&#x27;</span>: &#123; <span class="hljs-string">&#x27;..b&#x27;</span>: &#123; <span class="hljs-string">&#x27;[c]&#x27;</span>: <span class="hljs-number">1</span> &#125; &#125; &#125;).to.be.nested.have.a.property(<span class="hljs-string">&#x27;\\.a.\\.\\.b.\\[c\\]&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="ok"></span></p><p><strong>.ok</strong><br>表示真值，如<code>true</code> <code>[]</code> <code>&#123;&#125;</code>等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect([]).to.be.ok<br>expect(&#123;&#125;).to.be.ok<br><span class="hljs-comment">//自定义错误信息</span><br>expect(<span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;it is not impossible&#x27;</span>).to.be.not.ok<br></code></pre></td></tr></table></figure><p>一般情况下不太需要使用此属性<br>关于其他象征性的值直接使用对应的属性就可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">0</span>).to.be.equal(<span class="hljs-number">0</span>)<br>expect(<span class="hljs-literal">true</span>).to.be.true<br>expect(<span class="hljs-literal">null</span>).to.be.null<br>expect(<span class="hljs-literal">undefined</span>).to.be.undefined<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="true"></span></p><p><strong>.true</strong><br>同上表示真值，但不进行类型转换，所以只有<code>true</code>能通过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-literal">true</span>).to.be.true<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="false"></span></p><p><strong>false</strong><br>与<code>true</code>相反，表示假值，不进行类型转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-literal">false</span>).to.be.false<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="null"></span></p><p><strong>.null</strong><br>用于判断值是否为<code>null</code>值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-literal">false</span>).to.be.false<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="undefined"></span></p><p><strong>.undefined</strong><br>用于判断值是否为<code>undefined</code>值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-literal">undefined</span>).to.be.undefined<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="NaN"></span></p><p><strong>.NaN</strong><br>用于判断值是否为<code>NaN</code>值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//不推荐使用这个方法比较字符串等，可以直接使用equal</span><br><span class="hljs-comment">//expect(&#x27;Daniel&#x27;).to.be.NaN</span><br>expect(<span class="hljs-number">100</span>).to.be.not.NaN<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="exist"></span></p><p><strong>.exist</strong><br>用于判断值是否存在，即非<code>null</code> 且 非<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.exist<br>expect(<span class="hljs-literal">null</span>).to.be.not.exist<br>expect([]).to.be.exist<br>expect(<span class="hljs-literal">undefined</span>).to.be.not.exist<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="finite"></span></p><p><strong>.finite</strong><br>表示有限数组，即非<code>NaN</code> 且 非<code>Infinity</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">200</span>).to.be.finite<br>expect(<span class="hljs-literal">Infinity</span>).to.be.not.finite<br>expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.be.not.finite<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="empty"></span></p><p><strong>.empty</strong><br>判断值得长度是否为<code>0</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字符串的长度</span><br>expect(<span class="hljs-string">&#x27;&#x27;</span>).to.be.empty<br><span class="hljs-comment">//数组长度</span><br>expect([]).to.be.empty<br><span class="hljs-comment">//对象则是判断可枚举的属性的数量(Object.keys(obj).length)</span><br>expect(&#123;&#125;).to.be.empty<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="arguments"></span></p><p><strong>.arguments</strong><br>判断值是否为<code>arguments</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-built_in">arguments</span>).to.be.arguments<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="equal"></span></p><p><strong>.equal</strong><br>判断值是否严格相等，相当于<code>===</code><br><code>type equal = (value: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//比较值的相等</span><br>expect(<span class="hljs-number">1</span>).to.be.equal(<span class="hljs-number">1</span>)<br><span class="hljs-comment">//数组和对象则无法严格相等</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.not.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment">//数组和对象比较可以用之前介绍的deep</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.deep.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.deep.equal(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">//自定义错误提示信息</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.not.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;it is not impossible&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="eql"></span></p><p><strong>.eql</strong><br>可以当做是<code>deep</code> 和 <code>equal</code>的组合<br><code>type eql = (value: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//数组对象等值内容相等</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.eql([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.eql(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">//继续断言</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.eql(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).and.not.be.empty<br></code></pre></td></tr></table></figure><ul><li>如上所例🌰，eql返回值本身，可以继续向后做断言<br><a href="#top">顶</a></li></ul><p><span id="above"></span></p><p><strong>.above</strong><br>判断值是否<code>大于</code>指定值<br><code>type above = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.above(<span class="hljs-number">10</span>)<br>expect(<span class="hljs-number">100</span>).to.be.not.above(<span class="hljs-number">101</span>)<br></code></pre></td></tr></table></figure><ul><li>对于字符串，数组等长度的比较建议直接使用<code>lengthOf</code><br><a href="#top">顶</a></li></ul><p><span id="least"></span></p><p><strong>.least</strong><br>判断值是否<code>不小于（大于等于）</code>指定值<br><code>type least = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.least(<span class="hljs-number">100</span>)<br>expect(<span class="hljs-number">100</span>).to.be.least(<span class="hljs-number">99</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><strong>.below</strong><br>判断值是否<code>小于</code>指定值<br><code>type below = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.below(<span class="hljs-number">101</span>)<br>expect(<span class="hljs-number">100</span>).to.be.not.below(<span class="hljs-number">99</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="most"></span></p><p><strong>.most</strong><br>判断值是否<code>不大于（小于等于）</code>指定值<br><code>type most = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.most(<span class="hljs-number">100</span>)<br>expect(<span class="hljs-number">100</span>).to.be.most(<span class="hljs-number">101</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="within"></span></p><p><strong>.within</strong><br>判断值是否在指定区间内<br><code>type within = (start: number, end: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//包含开始和结束</span><br>expect(<span class="hljs-number">100</span>).to.be.within(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.have.a.lengthOf.within(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.have.a.lengthOf.within(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><ul><li>不推荐使用该方法，因为它能够实现的测试基本都可以通过<code>equal</code>或是<code>lengthOf</code>来实现<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//使用equal和lengthOf实现测试</span><br>expect(<span class="hljs-number">100</span>).to.be.equal(<span class="hljs-number">100</span>)<br>expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.have.a.lengthOf(<span class="hljs-number">6</span>)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.have.a.lengthOf(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><a href="#top">顶</a></li></ul><p><span id="instanceof"></span></p><p><strong>.instanceof</strong><br>判断值是否为指定值的实例<br><code>type instanceof = (constructor: object, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">const</span> father = <span class="hljs-keyword">new</span> Father()<br>expect(father).to.be.instanceof(Father)<br>expect([]).to.be.instanceof(<span class="hljs-built_in">Array</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">100</span>)).to.be.instanceof(<span class="hljs-built_in">Number</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;Daniel&#x27;</span>)).to.be.instanceof(<span class="hljs-built_in">String</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="property"></span></p><p><strong>.property</strong><br>判断值是否包含指定属性<br><code>type property = (key: string, value?: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//简单判断是否拥有该属性</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-comment">//并且判断是否为该值</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.property(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>)<br><span class="hljs-comment">//针对深层次的值比较需要 deep 参与</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125; &#125;).to.be.not.have.a.property(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125; &#125;).to.be.have.a.deep.property(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">//配合 own 用于判断是否为当前所有的实例实行</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.property(<span class="hljs-string">&#x27;toString&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.own.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.not.have.a.own.property(<span class="hljs-string">&#x27;toString&#x27;</span>)<br><span class="hljs-comment">//配合 nested 进行深层次的比较</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.have.nested.deep.property(<span class="hljs-string">&#x27;a.b&#x27;</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="own"></span></p><p><strong>.own</strong><br>判断值是否拥有指定的属性，不包含上层属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//结合property使用</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.own.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.not.have.own.property(<span class="hljs-string">&#x27;toString&#x27;</span>)<br><span class="hljs-comment">//配合 deep 和 property进行深层次的比较</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.have.own.deep.property(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="ownProperty"></span></p><p><strong>.ownProperty</strong><br>判断是否为本身属性，相当于是 <code>.own.property</code>的结合<br><code>type ownProperty = (key: string, value?: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.own.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.ownProperty(<span class="hljs-string">&#x27;a&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="ownPropertyDescriptor"></span></p><p><strong>.ownPropertyDescriptor</strong><br>类似于上面的方法，用于判断是否为本身的属性<br>但是它可以传递第二参数，表示该属性的描述对象，不知道什么是描述对象的自行百度<br><code>type ownPropertyDescriptor = (key: string, value?: &#123; get?: (undifiend || () =&gt; any)=undefined, set?: (undefined || () =&gt; any)=undefined, configurable?: boolean=false, enumerable?: boolean=false, value?: any=undefined, writable?: boolean=false &#125;, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> object = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> descriper = &#123;<br>  <span class="hljs-comment">//是否可枚举</span><br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//值</span><br>  <span class="hljs-comment">//value: &#x27;hello world&#x27;,</span><br>  <span class="hljs-comment">//是否可写</span><br>  <span class="hljs-comment">//writable: false,</span><br>  <span class="hljs-comment">//是否可修改描述符对象</span><br>  <span class="hljs-comment">//注意如果设置为false，后续将无法再修改其描述对象</span><br>  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//获取值拦截</span><br>  <span class="hljs-comment">//设置了拦截就不能设置writable和value</span><br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I love China&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">//设置值拦截</span><br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value<br>  &#125;<br>&#125;<br><span class="hljs-built_in">Object</span>.defineProperty(object, <span class="hljs-string">&#x27;name&#x27;</span>, descriper)<br><br>expect(object).to.be.ownPropertyDescriptor(<span class="hljs-string">&#x27;name&#x27;</span>)<br>expect(object).to.be.ownPropertyDescriptor(<span class="hljs-string">&#x27;name&#x27;</span>, descriper)<br><span class="hljs-comment">//自定义错误</span><br>expect(object).to.be.ownPropertyDescriptor(<span class="hljs-string">&#x27;name&#x27;</span>, descriper, <span class="hljs-string">&#x27;it is impossible&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="lengthOf"></span></p><p><strong>.lengthOf .length</strong><br>判断值是否存在<code>length</code>属性且为指定值<br>方法 <code>type lengthOf = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.lengthOf(<span class="hljs-number">3</span>)<br><span class="hljs-comment">//用于链式调用，但是不推荐</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.have.a.lengthOf.below(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="match"></span></p><p><strong>.match</strong><br>判断值是否与指定<code>正则</code>匹配<br>和普通<code>match</code>方法一样，所以主语就是<code>string</code><br><code>matches</code>效果与<code>match</code>相同<br><code>type match = (reg: Regexp, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.be.match(<span class="hljs-regexp">/^D.+l$/</span>)<br>expect(<span class="hljs-string">&#x27;2020-08-10&#x27;</span>).to.be.match(<span class="hljs-regexp">/^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;$/</span>)<br>expect(<span class="hljs-string">&#x27;13456787654&#x27;</span>).to.be.match(<span class="hljs-regexp">/^1[^12]\d&#123;9&#125;$/</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="string"></span></p><p><strong>.string</strong><br>判断值是否包含指定的字符串<br><code>type string = (value: string, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.be.have.a.string(<span class="hljs-string">&#x27;iel&#x27;</span>)<br>expect(<span class="hljs-string">&#x27;hello&#x27;</span>).to.be.not.have.a.string(<span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-comment">//必须是连续子串</span><br>expect(<span class="hljs-string">&#x27;world&#x27;</span>).to.be.not.have.a.string(<span class="hljs-string">&#x27;rd&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="keys"></span></p><p><strong>.keys</strong><br>用于判断<code>数组</code>、<code>对象</code>、<code>Set</code>、<code>Map</code>等是否包含相应的<code>key</code><br><code>type keys = (...args: Array&lt;string | number&gt;) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//普通使用需要将所有key全部传入</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.keys(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.have.keys(<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])).to.be.have.keys(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[ <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span> ]])).to.be.have.keys(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-comment">//配合all 和 any 使用</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;).to.be.have.any.keys(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;).to.be.be.have.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-comment">//包含</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;).to.be.include.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-comment">//深层次比较</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125; &#125; &#125;).to.be.have.deep.keys(<span class="hljs-string">&#x27;a.b&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="throw"></span></p><p><strong>.throw</strong><br>判断值是否抛出指定的错误、错误信息等。<br>.throw(errConstructor | string | reg) 是否抛出指定错误或字符串或匹配指定错误信息<br><code>type throw = (errorLike?: Error | Construcotr, errMsgMatcher?: string | Regexp, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> errors = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;oops&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">throw</span> errors &#125;<br><span class="hljs-comment">//当不确定会抛出哪一种错误时，直接不传参数</span><br>expect(error).to.be.throw()<br><span class="hljs-comment">//传递具体的错误类型</span><br>expect(error).to.be.throw(<span class="hljs-built_in">TypeError</span>)<br><span class="hljs-comment">//传递错误实例</span><br>expect(error).to.be.throw(errors, <span class="hljs-string">&#x27;oops&#x27;</span>)<br><span class="hljs-comment">//第二参数可为字符串，且表示为子串</span><br>expect(error).to.be.throw(errors, <span class="hljs-string">&#x27;oop&#x27;</span>)<br><span class="hljs-comment">//也支持正则</span><br>expect(error).to.be.throw(<span class="hljs-built_in">TypeError</span>, <span class="hljs-regexp">/.+/</span>)<br><span class="hljs-comment">//可直接传递字符串表示抛出的错误内容</span><br>expect(error).to.be.throw(<span class="hljs-string">&#x27;oop&#x27;</span>)<br><span class="hljs-comment">//同样支持正则</span><br>expect(error).to.be.throw(<span class="hljs-regexp">/^o.+s$/</span>)<br><span class="hljs-comment">//断言后的主语更改为错误对象</span><br>errors.code = <span class="hljs-number">404</span><br>expect(error).to.be.throw(errors).and.that.have.a.property(<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-number">404</span>)<br></code></pre></td></tr></table></figure><p><code>throws</code> 和 <code>Throw</code>同义🙆<br><a href="#top">顶</a></p><p><span id="respondTo"></span></p><p><strong>.respondTo</strong><br>用于判断一个对象或构造函数是否有相关的方法<br><code>type respondTo = (methodName: string ,errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Father.prototype.sayFather = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Father.saySon = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-comment">//正常响应所有方法</span><br>expect(<span class="hljs-keyword">new</span> Father()).to.be.respondTo(<span class="hljs-string">&#x27;sayFather&#x27;</span>)<br><span class="hljs-comment">//实例无法获取超集静态属性</span><br>expect(<span class="hljs-keyword">new</span> Father()).to.be.not.respondTo(<span class="hljs-string">&#x27;saySon&#x27;</span>)<br>expect(&#123;&#125;).to.be.respondTo(<span class="hljs-string">&#x27;toString&#x27;</span>)<br><span class="hljs-comment">//添加itself只能响应自身的方法</span><br>expect(Father).to.be.itself.respondTo(<span class="hljs-string">&#x27;saySon&#x27;</span>).but.not.respondTo(<span class="hljs-string">&#x27;sayFather&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>respondsTo</code>与此方法同义<br><a href="#top">顶</a></p><p><span id="itself"></span></p><p><strong>.itself</strong><br>配合上述的<code>respondTo</code>方法判断值是否响应指定的方法，但是为自身的方法，不包含<code>prototype</code>上的方法<br>具体事例可以看上面的<code>respondTo</code><br><a href="#top">顶</a></p><p><span id="satisfy"></span></p><p><strong>.satisfy</strong><br>接收一个函数作为参数，函数参数为断言目标值，返回值为boolean，判断是否通过断言  </p><ul><li><code>type satisfy = (method: (target: any) =&gt; boolean, errmsg?: string) =&gt; any</code>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//目标值在[0, 100]内</span><br>expect(<span class="hljs-number">100</span>).to.be.satisfy(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> target &gt;= <span class="hljs-number">0</span> &amp;&amp; target &lt;= <span class="hljs-number">100</span><br>&#125;)<br>expect(<span class="hljs-number">100</span>).to.be.satisfies(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> target &gt;= <span class="hljs-number">0</span> &amp;&amp; target &lt;= <span class="hljs-number">100</span><br>&#125;)<br></code></pre></td></tr></table></figure><code>satisfies</code>与此方法同义<br><a href="#top">顶</a></li></ul><p><span id="closeTo"></span></p><p><strong>.closeTo</strong><br>指定值（仅<code>数字</code>）是否在期望值的接收范围内<br>此方法与<code>within</code>的区别就是within接收的两个参数是上限和下限<br><code>closeTo</code>的参数，第一参数为期望的中间值，第二参数为上下限（第一参数加减第二参数）</p><ul><li><code>type closeTo = (expected: number, delta: number, errmsg?: string) =&gt; any</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//指定值在[-90, 110]之间</span><br>expect(<span class="hljs-number">100</span>).to.be.closeTo(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br><span class="hljs-comment">//包含临界值</span><br>expect(<span class="hljs-number">110</span>).to.be.closeTo(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br>expect(-<span class="hljs-number">90</span>).to.be.closeTo(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure>虽然此方法可以用于判断值是否在一个区间内，但是直接使用<code>equal</code>进行相等判断一样可以<br><a href="#top">顶</a></li></ul><p><span id="members"></span></p><p><strong>.members</strong><br>类似于contains、include，但是接收参数为数组，主语只能是数组<br><code>type members = (target: Array&lt;any&gt;, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//主语必须为数组</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.have.members([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment">//非简单类型数组需配合deep</span><br>expect([ &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125; ]).to.be.have.deep.members([ &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125; ])<br><span class="hljs-comment">//配合orderd来强制数组顺序与主语一致</span><br>expect([ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ]).to.be.have.ordered.members([ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ])<br><span class="hljs-comment">//配合include链式调用可以对不必要的数组项不进行验证</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.include.members([ <span class="hljs-number">1</span>, <span class="hljs-number">2</span> ])<br><span class="hljs-comment">//相对于验证不存在的数组项推荐使用include</span><br>expect([<span class="hljs-number">1</span>]).to.be.not.include(<span class="hljs-number">2</span>).and.not.include(<span class="hljs-number">3</span>)<br><span class="hljs-comment">//复合使用</span><br>expect([ &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125; ]).to.be.include.deep.ordered.members([ &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; ])<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="oneOf"></span></p><p><strong>.oneOf</strong><br>判断值是否出现在指定数组中<br><code>type oneOf = (list: Array&lt;any&gt;, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//断言值在指定数组中</span><br>expect(<span class="hljs-number">100</span>).to.be.oneOf([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">100</span>])<br><span class="hljs-comment">//推荐直接使用equal</span><br>expect(<span class="hljs-number">100</span>).to.be.equal(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="change"></span></p><p><strong>.change</strong><br>判断方法是否会改变指定的值，主语接收的是一个改变判定对象的值的方法<br>可以把它当做是<code>increase</code>和<code>decrease</code>的结合<br>但是推荐直接使用上述两个方法<br><code>type change = (value: ((value: any) =&gt; any) | any, prop?: string, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//普通值</span><br><span class="hljs-keyword">let</span> number = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-keyword">let</span> array = [ <span class="hljs-number">0</span> ]<br><span class="hljs-keyword">let</span> object = &#123; <span class="hljs-number">0</span>: <span class="hljs-number">0</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeNumber</span>(<span class="hljs-params"></span>) </span>&#123; number ++ &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeString</span>(<span class="hljs-params"></span>) </span>&#123; string += <span class="hljs-number">1</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeArray</span>(<span class="hljs-params"></span>) </span>&#123; array[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeObject</span>(<span class="hljs-params"></span>) </span>&#123; object[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span> &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNumber</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> number &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getString</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> string &#125;<br><br><span class="hljs-comment">//普通值需要借助函数</span><br><span class="hljs-comment">//数字</span><br>expect(changeNumber).to.be.change(getNumber)<br><span class="hljs-comment">//字符串</span><br>expect(changeString).to.be.change(getString)<br><span class="hljs-comment">//复合值则需添加第二参数，改变的属性名</span><br><span class="hljs-comment">//数组</span><br>expect(changeArray).to.be.change(array, <span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-comment">//对象</span><br>expect(changeObject).to.be.change(object, <span class="hljs-string">&#x27;0&#x27;</span>)<br><br><span class="hljs-comment">//结合by具体断言改变的范围</span><br>expect(changeNumber).to.be.change(getNumber).by(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="increase"></span><br><span id="decrease"></span></p><p><strong>.increase | .decrease</strong><br><code>increase</code> 判断方法是否会增加指定对象的属性或者普通值的值<br><code>decrease</code> 判断方法是否会减少指定对象的属性或者普通值的值<br><code>const increase = (value: any, prop?: string, errmsg?: string)</code><br><code>const decrease = (value: any, prop?: string, errmsg?: string)</code><br>并且只能是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//普通值</span><br><span class="hljs-keyword">let</span> number = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">increase</span>(<span class="hljs-params"></span>) </span>&#123; number ++ &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decrease</span>(<span class="hljs-params"></span>) </span>&#123; number -- &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> number &#125;<br>expect(increase).to.be.increase(get)<br>expect(decrease).to.be.decrease(get)<br><br><span class="hljs-comment">//对象</span><br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">objIncrease</span>(<span class="hljs-params"></span>) </span>&#123; obj.a ++ &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">objDecrease</span>(<span class="hljs-params"></span>) </span>&#123; obj.a -- &#125;<br>expect(objIncrease).to.be.increase(obj, <span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(objDecrease).to.be.decrease(obj, <span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">//数组</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayIncrease</span>(<span class="hljs-params"></span>) </span>&#123; arr[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayDecrease</span>(<span class="hljs-params"></span>) </span>&#123; arr[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span> &#125;<br>expect(arrayIncrease).to.be.increase(arr, <span class="hljs-string">&#x27;0&#x27;</span>).by(<span class="hljs-number">2</span>)<br>expect(arrayDecrease).to.be.decrease(arr, <span class="hljs-string">&#x27;0&#x27;</span>).by(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">//通过by判断增加的幅度</span><br>expect(objIncrease).to.be.increase(obj, <span class="hljs-string">&#x27;a&#x27;</span>).by(<span class="hljs-number">1</span>)<br>expect(objDecrease).to.be.decrease(obj, <span class="hljs-string">&#x27;a&#x27;</span>).by(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="extensible"></span></p><p><strong>.extensible</strong><br>判断指定值是否可扩展(不可以添加新属性)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span>,<br>  <span class="hljs-attr">sayName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>  &#125;<br>&#125;<br><span class="hljs-comment">//设置对象为不可扩展</span><br><span class="hljs-built_in">Object</span>.preventExtensions(object)<br><span class="hljs-comment">//可修改</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.name = <span class="hljs-string">&#x27;Mike&#x27;</span><br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-comment">//可删除</span><br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-keyword">delete</span> object.name<br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-comment">//不可新增</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//使用</span><br>expect(object).to.be.extensible<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="sealed"></span></p><p><strong>.sealed</strong><br>判断指定值是否封闭(不可添加新属性、不可删除旧属性、可修改旧属性)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span>,<br>  <span class="hljs-attr">sayName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>  &#125;<br>&#125;<br><span class="hljs-comment">//设置对象为封闭</span><br><span class="hljs-built_in">Object</span>.seal(object)<br><br><span class="hljs-comment">//不可新增</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//可修改</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.name = <span class="hljs-string">&#x27;Mike&#x27;</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//不可删除</span><br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-keyword">delete</span> object.name<br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//使用</span><br>expect(object).to.be.sealed<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="frozen"></span></p><p><strong>.frozen</strong><br>判断值是否冻结(不可添加新属性、不可删除旧属性、不可修改旧属性)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span>,<br>  <span class="hljs-attr">sayName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//设置对象为冻结</span><br><span class="hljs-built_in">Object</span>.freeze(object)<br><br><span class="hljs-comment">//不可新增</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//不可修改</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.name = <span class="hljs-string">&#x27;Mike&#x27;</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//不可删除</span><br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-keyword">delete</span> object.name<br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//使用</span><br>expect(object).to.be.frozen<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="by"></span></p><p><strong>.by</strong><br>配合<code>descrease</code> 或 <code>increase</code>、 <code>change</code>等来判断断言值是否发生变化在指定范围内<br>具体事例🌰可以直接查看上述三个方法的例子👆<br><a href="#top">顶</a></p><p><span id="fail"></span></p><p><strong>.fail</strong><br>判断是否会失败<br>有两种参数传递方式</p><ol><li><code>type fail = (message?: string) =&gt; any</code></li><li><code>type fail = (actual: any, expected: any, message?: string, operator: string) =&gt; any</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//以下均会出错</span><br><span class="hljs-comment">//直接使用</span><br>expect.fail()<br>expect.fail(<span class="hljs-string">&#x27;it is error&#x27;</span>)<br><span class="hljs-comment">//值判断</span><br>expect.fail(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;it is impossible&#x27;</span>)<br>expect.fail(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;it is impossible&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>)<br></code></pre></td></tr></table></figure><a href="#top">顶</a></li></ol><p><span id="ordered"></span></p><p><strong>.ordered</strong><br>配合<code>members</code>用于指定<code>members</code>参数数组的顺序与主语数组的顺序一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//members参数必须按顺序</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.ordered.members([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.not.ordered.members([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>😊<br>如果有什么不对的地方，请指出。</p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
      <category>node</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chai</tag>
      
      <tag>BDD</tag>
      
      <tag>expect</tag>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有趣的css属性content</title>
    <link href="/2020/08/13/%E6%9C%89%E8%B6%A3%E7%9A%84css%E5%B1%9E%E6%80%A7content/"/>
    <url>/2020/08/13/%E6%9C%89%E8%B6%A3%E7%9A%84css%E5%B1%9E%E6%80%A7content/</url>
    
    <content type="html"><![CDATA[<p>今天说一个非常有趣的<code>css</code>属性<code>content</code>，可能很多人都会说，这个属性谁会不知道，对于一些老手来说，这个属性确实可能是经常会用到，但是总会有你没有发现的地方，今天就来好好的讲讲这个有趣的<code>css</code>属性。<br>以下知识内容均来自于<a href="https://www.zhangxinxu.com/">张鑫旭的《css世界》</a>，有兴趣的可以去看看。</p><h2 id="content-介绍"><a href="#content-介绍" class="headerlink" title="content 介绍"></a>content 介绍</h2><p><code>content</code>用于元素内容的展示，平常用的多的地方在于内容前后的具体文字内容或者是图片。图片其实没有很多好介绍，但是关于文字方面，它有很多种的类型，下面就一一将<code>content</code>的值类型进行介绍。</p><h3 id="content-属性"><a href="#content-属性" class="headerlink" title="content 属性"></a>content 属性</h3><ol><li><strong>normal</strong>  </li></ol><p>这是<code>content</code>属性的默认值，在伪元素中会被认定为<code>none</code></p><ol start="2"><li><strong>none</strong> </li></ol><p>指定不产生伪元素</p><ol start="3"><li><strong>url</strong>  </li></ol><p>可以使用图片来进行展示，比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/images/有趣的css属性content/css世界.jpg&#x27;</span>);</span><br><span class="css">    <span class="hljs-attribute">display</span>: block;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下图</p><img src="/images/有趣的css属性content/url-show.png" width="188" height="334" /><p><code>url</code>的参数有很多种，最常用的就是路径<br>然后就是<code>icon</code>、<code>svg</code>、<code>base64</code>编码的图片，但是不支持<code>css3渐变</code>背景图。  </p><p>虽然有这种方法可以生成图片，但是实际中并无太大用处，原因就在于无法通过设置宽高来改变图片的固有尺寸。  </p><p>一般都是使用<code>background-image</code>来实现相关的功能。</p><p>不过<code>base64</code>形式却能解决上面的问题<br>一般情况下图片在加载过程中都会存在尺寸为<code>0</code>的时候，所以在加载完成时页面会存在图片晃动的情况。<br><code>base64</code>图片没有这个过程。<br>但是<code>base64</code>也有不好的地方，比如，<code>base64</code>编码后的图片体积比之前要大上1/3左右。</p><ol start="4"><li><strong>attr</strong>  </li></ol><p><code>attr</code>和它名字一样，它能够选择到该元素身上的属性。<br>比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">img</span>&#123;</span><br><span class="css">  <span class="hljs-attribute">text-align</span>:center;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">  <span class="hljs-attribute">content</span>: <span class="hljs-built_in">attr</span>(width);  </span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><img src="/images/有趣的css属性content/attr-show.png" width="188" height="334" /><p>这样可以显示到<code>img</code>元素的<code>width</code>属性的值。<br>并且，它还能够获取到自定义属性的值，比如<code>attr(data-name)</code></p><p>注意一下，这里的属性名称是不需要<strong>引号</strong>的。</p><ol start="5"><li><strong>string</strong>  </li></ol><p>这个的话我想应该不用多说，大家用的也是相当熟练的。但是不知道大家有没有使用过<code>Unicode</code>字符？<br>在书中发现了一个利用此特性的小栗子🌰，感觉非常好用，这里写出来给大家参考一下。<br>下面实现了一个动态loading加载的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  dot&#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>:inline-block;</span><br><span class="css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">1em</span>;</span><br><span class="css">    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">1</span>;</span><br><span class="css">    <span class="hljs-attribute">overflow</span>:hidden;</span><br><span class="css">    <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="css">    <span class="hljs-attribute">vertical-align</span>: -.<span class="hljs-number">25em</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  dot<span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;...\A..\A.&#x27;</span>;</span><br><span class="css">    <span class="hljs-attribute">animation</span>: loading <span class="hljs-number">3s</span> infinite step-start both;</span><br><span class="css">    <span class="hljs-attribute">display</span>:block;</span><br><span class="css">    <span class="hljs-attribute">white-space</span>: pre-wrap;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-keyword">@keyframes</span> loading &#123;</span><br><span class="css">    <span class="hljs-number">33%</span> &#123; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">2em</span>); &#125;</span><br><span class="css">    <span class="hljs-number">66%</span> &#123; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">1em</span>); &#125;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>加载中<br>  <span class="hljs-tag">&lt;<span class="hljs-name">dot</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面是效果，可能图片看起来有些不流畅，但是实际效果是流畅的。   </p><img src="/images/有趣的css属性content/loading.GIF" width="376" height="668" /><p>这一方法的好处就是相当好的兼容性，它利用上述特性和<code>css3</code>的动画效果来实现。 </p><p>并且在低版本浏览器下虽然支持不了<code>animation</code>属性，但是它也能良好的展示静态效果。</p><ol start="6"><li><strong>open-quote、close-quote</strong>  </li></ol><p>关于这个属性，算是一个好用却又不实用的属性吧，它本身良好的特性可以完成平常的许多业务问题，但是却又显得没有那么必要。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="css">    <span class="hljs-attribute">quotes</span>: <span class="hljs-string">&#x27;提问: &quot;&#x27;</span> <span class="hljs-string">&#x27;&quot;&#x27;</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="css">    <span class="hljs-attribute">quotes</span>: <span class="hljs-string">&#x27;回答: &quot;&#x27;</span> <span class="hljs-string">&#x27;&quot;&#x27;</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: open-quote;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: close-quote;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ques&quot;</span>&gt;</span>为什么我这么帅？<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;answ&quot;</span>&gt;</span>天生的！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/images/有趣的css属性content/quotes-show.png" width="188" height="334" /><p>还有<code>no-open-quote</code> <code>no-close-quote</code>，和名字一下，就是在开始和结束不需要该内容。</p><ol start="7"><li><strong>counter</strong>  </li></ol><p>接下来最后要着重介绍的一个属性，<code>counter</code>。计数器。  </p><p>大家应该有见过<code>word</code>文档中的那种标题吧，其实那种样式可以通过<code>css</code>来自动生成。<br>没有错，用到的就是现在介绍的这个属性。<br>它只需要几行css代码就能实现那样的效果。  </p><p>首先是相关的几个属性。<br><code>counter-reset</code> <code>counter-increment</code> <code>counter()</code> <code>counters()</code>  </p><p>使用步骤如下：</p><ul><li><strong>定义计数器名称 counter-reset</strong>  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-reset</span>: counter-name <span class="hljs-number">2</span>;  </span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(counter-name);</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是counter计数器的初始值: <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面定义了一个计数器，名称叫<code>counter-name</code> 并且起始为2<br><img src="/images/有趣的css属性content/counter-init-show.png" width="188" height="334" /></p><p>关于后面<code>起始数字</code>的问题，也可以是<code>负数</code>，也可以写成<code>小数</code>。<br>不过对于<code>ie</code>和<code>firefox</code>是直接无视的，默认为<code>0</code>，而对于<code>chrome</code>来说则是处理成向下取整。  </p><p>你也可以同时定义多个计数器。如下<br><code>counter-reset: coutner-name1 3 counter-name2 4</code>  </p><ul><li><strong>递增</strong>  </li></ul><p>第一步中实现的是显示计数器的值，而此步骤则是真正能让计数器开始计数的关键。  </p><p><code>counter-increment</code> 用来让计数器累加，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-reset</span>: counter;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;递增前我是: &#x27;</span> <span class="hljs-built_in">counter</span>(counter);</span><br><span class="css">    <span class="hljs-attribute">display</span>:block;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-increment</span>: counter <span class="hljs-number">2</span>;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;递增后我是: &#x27;</span> <span class="hljs-built_in">counter</span>(counter);</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如下图所示  </p><img src="/images/有趣的css属性content/counter-increment-show.png" width="188" height="334" />  <p>上面指定了<code>counter</code>计数器增加了<code>2</code>，后面的数字也可以是<code>负值</code>，这样就实现了递减的效果。  </p><p>需要注意的是，虽然在不同元素上计数器并不会产生效果，但是如果在其中使用了<code>counter-increment</code>那么它就会产生效果。  </p><p><code>counter()</code>和<code>counters()</code>还有一些参数可以选择  </p><blockquote><p>counter(name, style)<br>counters(name, string)<br>counters(name, string, style)  </p></blockquote><p><code>strig</code>就是连接符  </p><p><code>style</code>的话，它的值和<code>list-style</code>的值相同<br>所以在展示时，可以不一定显示数字，也可以显示其他的字符。<br>具体可以参考 <a href="https://www.w3school.com.cn/css/pr_list-style-type.asp">list-style</a>  </p><p>比如下面  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-reset</span>: counter;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;我有多帅?&#x27;</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.counter</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-increment</span>: counter;</span><br><span class="css">    <span class="hljs-attribute">quotes</span>: <span class="hljs-string">&#x27;绝对&quot;&#x27;</span> <span class="hljs-string">&#x27;+&quot;啊&#x27;</span>;</span><br><span class="css">    <span class="hljs-attribute">content</span>: open-quote <span class="hljs-built_in">counters</span>(counter, <span class="hljs-string">&#x27;-&#x27;</span>, upper-latin) close-quote;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;counter&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>效果如下图<br><img src="/images/有趣的css属性content/quotes-show.png" width="188" height="334" />  </p><p>关于前面说的<code>word</code>文档标题的级联效果，用到的就是<code>counters()</code>这个方法  </p><p>下面是简单的效果。  </p><pre><code class="html"><span class="tag">&lt;<span class="name">style</span>&gt;</span>  .reset&#123;    counter-reset: counter;  &#125;  .counter::after&#123;    counter-increament: counter;    content: couters(counter, '-') '.';  &#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reset"</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>    第一    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reset"</span>&gt;</span>      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>第一一<span class="tag">&lt;/<span class="name">div</span>&gt;</span>      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>第一二<span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>    第二    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reset"</span>&gt;</span>      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>        第二一        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reset"</span>&gt;</span>          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>第二一<span class="tag">&lt;/<span class="name">div</span>&gt;</span>          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>第二二<span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>第二二<span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"counter"</span>&gt;</span>    第三  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre><p>效果如下图  </p><img src="/images/有趣的css属性content/counters.png" width="188" height="334" />  <h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>合理的使用css属性可以让你在实际开发过程中减少很多的工作，使用css完成的效果总比用css完成性能要好的多。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>content</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React日历组件</title>
    <link href="/2020/07/26/React%E6%97%A5%E5%8E%86%E7%BB%84%E4%BB%B6/"/>
    <url>/2020/07/26/React%E6%97%A5%E5%8E%86%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>这是本人写的第一篇文章，欢迎各位观看的朋友👭。<br><img src="/images/React日历组件/2de9716fa4db0bdb643f6a0e87ad6819.JPG" width=100 height=100 /><br>先介绍一下自己，本人是一个刚刚进入社会的前端菜鸟，目前服务于一家公司🏭。</p><h2 id="1-故事背景"><a href="#1-故事背景" class="headerlink" title="1 故事背景"></a>1 故事背景</h2><p>事情是这样的，最近在公司的h5项目中碰到一个需求，页面中需要有一个用于显示最近订单的日历样式，你没有看错，一个日历，这给我难到了，本来想着不就是是一个日历吗，这有什么难的，后来我发现好像似乎是高估了自己。 </p><p>先介绍下关于这个日历的样式，大家可以自行脑补一下苹果中自带的日历或看下图，基本和它差不多。多了一点需求是，在点击某一个日期或者是手指滑动过程中，日历下方的订单列表会根据日期的变动自动跳转到当前日期的订单。<br><img src="/images/React日历组件/IMG_0144.PNG" width=188 height=334 /><br><img src="/images/React日历组件/IMG_0145.PNG" width=188 height=334 /> </p><p>因为项目用的技术栈是React，似乎理所应当该用 Ant Design 来完成，就pc端而言，Ant Design 的<a href="https://ant.design/components/calendar-cn/">日历组件</a>相对于来说算是非常不错且还算契合的，奈何h5使用的是Ant Design Mobile，相对于来说的话，以个人之见，确实还有许多可以改进的地方，mobile中的<a href="https://mobile.ant.design/components/calendar-cn/">日历组件</a>很多地方表现的还是不够灵活，有些地方还是过于定制化，还可以进一步完善。</p><p>所以，经过自己再三的对mobile的Calendar组件的修改（瞎78乱搞）以及思想斗争（不想搞了）之后。终于，选择自己做封装，在封装的过程中，也让本人学习到了一些之前还没有注意的东西。今天也一并作介绍，这也是对新知识的再一次复习。</p><h2 id="2-正片开始"><a href="#2-正片开始" class="headerlink" title="2 正片开始"></a>2 正片开始</h2><p>这里先不介绍具体业务上关于列表跳转方面的内容。只对日历相关作介绍🙂。</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>首先是与日历有重要关系的API Date。可能很多人会说，不会吧，不会吧，不会还有人会去用原生Date吧。现在确实在momentjs和dayjs面前，原生Date的操作确实显得有些复杂，但是总归来说还是要好好学习原生js的知识，这样才能有更好的提升。总的来说，多学总不会错（虽然还是很懒）。</p><ol><li>日期创建<br><code>new Date()</code>  </li></ol><ul><li>默认不传参数时，返回的当前的时间 <code>new Date()</code></li><li>传递时间戳 <code>new Date(19999009090)</code></li><li>或者再放一个Date实例 <code>new Date(new Date())</code></li><li>一般情况下是按顺序 年、月、日… <code>new Date(2020, 6, 1)</code><ul><li>需要注意的是，关于月份的参数，范围是0-11。  </li></ul></li></ul><p>有些情况下在需要做相关计算时，传递参数会给我们省下很多功夫<br>比如：<br> <strong>获取当前月份的天数</strong><br> 比如现在是7月份，你想计算上一月份的天数，你可以这样<br><code>new Date(2020, 6, 0).getDate() //30</code><br>当参数day为0时，month会自动-1，相当于<code>new Date(2020, 6, 30)</code><br> <strong>获取当前月第一天或者最后一天的信息</strong><br>原理同上，可以这样<code>new Date(2020, 6).getDay()</code>，表示7月第一天星期几<br>2. 日期设置<br><code>setDate()</code> 设置几号<br><code>setMonth()</code> 设置几月，注意和之前说的一样，范围是0-11<br><code>setFullYear()</code> 设置年份，setYear的替代版<br>3. 日期获取<br><code>getTime()</code> 返回自1970年1月1日到现在的毫秒数<br><code>getDay()</code> 星期几（范围是0-6，一个星期从星期天开始）<br><code>getDate()</code> 几号<br><code>getMonth()</code> 几月<br><code>getFullYear()</code> 哪一年  </p><p>有了这几个API的支持，在做一些日期计算时会显得非常的方便。</p><h3 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h3><p>第二个介绍的与js无关，与css相关，是关于日历的布局问题。Grid栅格布局，听说这玩意儿老早就出了，奈何本人眼界窄居然现在才知道，用了之后发现这个东西真的好香，本人认为是非常适合做像日历这样的组件工具的布局。</p><p>相关用到API有如下（后面的图基本都来自己<a href="http://www.ruanyifeng.com/home.html">阮一峰老师</a>的博客）</p><p><strong>容器样式</strong></p><ol><li><p>display<br>可以是块级栅格 <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032504.png" alt="grid"><br>也可以是行内栅格 <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032505.png" alt="inline-grid"><br>和普通的行内块级意思一样，行内能有多个栅格布局并排<br>另一个需要注意的地方是在gird布局下，有一些样式的设置无法产生效果，比如:  </p><blockquote><p>float、display: inline-block、display: table-cell、vertical-align和column-*  </p></blockquote></li><li><p>grid-template-columns &amp; grid-template-rows<br>用于定义grid布局下行和列的数量，它的值有很多种  </p></li></ol><ul><li>长度单位<br><code>grid-template-columns: 100px 100px 100px;</code><br><code>grid-template-rows: 100px 100px 100px;</code><br>这样就形成了一个 3行三列的布局<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png" alt=""></li><li>fr<br>意思大概就是一个片段，比如<br><code>grid-template-columns: 1fr 1fr;</code><br>意思是将整体布局分割成相等的两列<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032509.png" alt=""><br><code>grid-template-columns: 150px 1fr 2fr;</code><br>意思是第二个片段是第一个的两倍<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032510.png" alt="">  </li><li>repeat函数<br>有时候你会觉得一个个设置块的宽度很麻烦，repeat函数可以将你设定的块数据进行指定的重复<br><code>grid-template-columns: repeat(3, 100px);</code><br>等同于<br><code>grid-template-columns: 100px 100px 100px;</code><br>还可以使用关键字 <code>auto-fill</code><br><code>grid-template-columns: repeat(auto-fill, 100px);</code><br>它会持续平铺100px宽的块直到当前行宽度不足时，换行  </li><li>minmax函数<br><code>grid-template-columns: 100px minmax(100px, 200px) 100px;</code><br>表示中间列的宽度范围在100px 和 200px之间<br>参数也支持 fr 关键字  </li><li>auto<br>当你指定了3列，并设置了两列的宽度，且希望另一列宽度自适应时，可以使用此关键字。如<br><code>grid-template-columns: 100px auto 100px;</code>中间列会自动自适应</li></ul><ol start="3"><li><p>grid-row-gap &amp; grid-columns-gap &amp; grid-gap<br>设置各个单元格之间的间距<br><code>grid-row-gap: 20px;</code><br><code>grid-column-gap: 20px;</code><br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032511.png" alt=""><br>grid-gap则是前两个的混合写法  </p></li><li><p>justify-items &amp; align-items &amp; place-items<br>值：<code>start | end | center | stretch</code><br>设置单元格的水平垂直对齐方式，参数和flex差不多就不说了（懒）  </p></li><li><p>justify-content &amp; align-content &amp; place-content<br>值：<code>start | end | center | stretch | space-around | space-between | space-evenly</code><br>容易的水平垂直对齐方式，参数和flex差不多就不说了（懒）  </p></li></ol><p><strong>项目样式</strong></p><ol><li>grid-column-start &amp; grid-column-end &amp; grid-row-start &amp; grid-row-end<br>就和名字差不多的意思，他可以让单元格的放置位置发生偏移，有了这个属性，可以让本项目中日历的月开头发生偏移而不必做其他的js操作。<br>按照阮老师上面说的可能更容易理解，容器分成了指定的行和列，也会随即生成类似表格的边框线，但是不会显示。所以偏移的按照网格线的索引进行偏移。<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032503.png" alt=""><br>比如<br><code>grid-column-start: 2;</code> 表示某一单元格的起始位置是容器的列网格线的第二根。<br><code>grid-column-end: 4;</code> 表示某一但云哥的结束位置是容器的列网格线的第四根。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032526.png" alt=""></li></ol><p><strong>其他属性</strong></p><p><code>grid-column-end</code> 单元格的列结束位置<br><code>grid-row-start</code> 单元格的行起始位置<br><code>grid-row-end</code> 单元格的行结束位置  </p><ol start="2"><li><p>justify-self &amp; align-self &amp; place-self<br>设置单元格的水平垂直对齐方式，和上面容器的<code>justify-items</code>等效果相同，只是此属性是针对单个单元格的。<br>【具体细节相关的API可以参考<a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">阮一峰老师的博客</a>或者自行查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid">MDN</a>进行了解】</p><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>具体样式查看下图  </p></li><li><p>单日着重  </p><img src="/images/React日历组件/1595859653524_95CA67F7-E00E-4AA0-A51C-85895C099433.png" width="200" height="100" /></li><li><p>周着重  </p><img src="/images/React日历组件/1595859783955_DE771404-5E95-4876-BA63-44D01118D2EF.png" width="200" height="100" /></li><li><p>色调更改  </p><img src="/images/React日历组件/1595859830441_DBC34DF0-2308-4DBB-90F7-A70B70795B82.png" width="200" height="100" /></li><li><p>显示单周  </p><img src="/images/React日历组件/1595860081764_790B7081-F485-487D-9B74-5E88C13FD5FF.png" width="200" height="100" /></li><li><p>设置额外内容  </p><img src="/images/React日历组件/15938957-5F8F-4A7A-9F91-544D239677EC.png" width="200" height="100" /></li></ol><p>因为每一个单元格外层设置了相对定位<code>relative</code>，所以如果不希望额外内容导致个别单元格位置不统一，可以将内容设置为<code>position: absolute;</code>  </p><p>具体的其他功能可查看下方API  </p><p><strong>API</strong></p><table><thead><tr><th align="center">props</th><th align="center">说明</th><th align="center">类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">collapse</td><td align="center"><div style="width:300pt">是否折叠，折叠时只显示一周的日期</div></td><td align="center">boolean</td><td align="center">false</td></tr><tr><td align="center">lunerVisible</td><td align="center">是否显示农历时间</td><td align="center">boolean</td><td align="center">false</td></tr><tr><td align="center">showToday</td><td align="center">是否着重显示当天，对当天时间着重表示</td><td align="center">boolean</td><td align="center">true</td></tr><tr><td align="center">showWeek</td><td align="center">是否着重显示当前周，对本周时间着重表示，当showToday和showWeek同时存在时，showWeek生效</td><td align="center">boolean</td><td align="center">false</td></tr><tr><td align="center">activeStyle</td><td align="center">着重显示的样式，可以自定义着重显示的样式</td><td align="center">Object</td><td align="center">{}</td></tr><tr><td align="center">value</td><td align="center">当前时间，可配合rc-form进行使用，不传递此参数时由内部控制状态变化</td><td align="center">Date</td><td align="center">false</td></tr><tr><td align="center">onChange</td><td align="center">监听日期时间变化</td><td align="center">(date: Date) =&gt; any</td><td align="center">无</td></tr><tr><td align="center">hot</td><td align="center">日期下着重点</td><td align="center">是否显示农历时间</td><td align="center">Array<Date></td></tr><tr><td align="center">renderHeader</td><td align="center">日历的header</td><td align="center">(date: Date) =&gt; ReactNode</td><td align="center">false</td></tr><tr><td align="center">renderFooter</td><td align="center">日历的footer</td><td align="center">(date: Date) =&gt; ReactNode</td><td align="center">false</td></tr><tr><td align="center">renderDateFooter</td><td align="center">每日的footer</td><td align="center">(date: Date) =&gt; ReactNode &#124; ReactNode</td><td align="center">false</td></tr><tr><td align="center">colorStyle</td><td align="center">日历的整体颜色风格</td><td align="center">颜色（目前只支持十六进制颜色）</td><td align="center">#00CC73</td></tr><tr><td align="center">showLastNext</td><td align="center">是否显示上下月份的时间以填充月前和月后的空缺</td><td align="center">boolean</td><td align="center">false</td></tr></tbody></table><p>还有一些方法供调用，可利用<code>ref</code>来获取相关方法  </p><table><thead><tr><th align="center">name</th><th align="center">说明</th><th align="center">使用</th></tr></thead><tbody><tr><td align="center">getMonthStart</td><td align="center">当月第一天</td><td align="center">getMonthStart(month?, year?) =&gt; Date</td></tr><tr><td align="center">getMonthEnd</td><td align="center">当月最后一天</td><td align="center">getMonthEnd(month?, year?) =&gt; Date</td></tr><tr><td align="center">getMonthDays</td><td align="center">获取当月天数</td><td align="center">getMonthDays(month?, year?) =&gt; number</td></tr><tr><td align="center">getThisWeek</td><td align="center">本周开始和结束</td><td align="center">getThisWeek(date) =&gt; [start:Date, end:Date]</td></tr><tr><td align="center">lastYear</td><td align="center">去年</td><td align="center">lastYear(date?) =&gt; Date</td></tr><tr><td align="center">lastMonth</td><td align="center">上个月</td><td align="center">lastMonth(date?) =&gt; Date</td></tr><tr><td align="center">lastWeek</td><td align="center">上周</td><td align="center">lastWeek(date?) =&gt; Date</td></tr><tr><td align="center">lastDay</td><td align="center">昨天</td><td align="center">lastDay(date?) =&gt; Date</td></tr><tr><td align="center">nextYear</td><td align="center">明年</td><td align="center">nextYear(date) =&gt; Date</td></tr><tr><td align="center">nextMonth</td><td align="center">下个月</td><td align="center">nextMonth(date?) =&gt; Date</td></tr><tr><td align="center">nextWeek</td><td align="center">下周</td><td align="center">nextWeek(date?) =&gt; Date</td></tr><tr><td align="center">nextDay</td><td align="center">明天</td><td align="center">nextDay(date?) =&gt; Date</td></tr></tbody></table><p>从<code>lastYear</code>开始的后面几个方法，在传入Date参数时只会返回结果，若未传参数则组件状态由外部控制或由内部控制会触发<code>onChange</code>回调。</p><h2 id="3-结束"><a href="#3-结束" class="headerlink" title="3 结束"></a>3 结束</h2><p>这就是此次所要说的所有，如有任何问题可直接联系我。如果觉得东西很烂可以直接指出。如果对此组件感兴趣可以去<a href="https://github.com/food-billboard/React-Component-Calendar">github</a>上给一个star✨，如果觉得文章内容对你有用，可以给一个赞👍或一个评论📚。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
      <category>前端</category>
      
      <category>CSS</category>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Component</tag>
      
      <tag>Calendar</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
