<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用puppeteer爬取漫画</title>
    <link href="/2023/09/12/%E4%BD%BF%E7%94%A8puppeteer%E7%88%AC%E5%8F%96%E6%BC%AB%E7%94%BB/"/>
    <url>/2023/09/12/%E4%BD%BF%E7%94%A8puppeteer%E7%88%AC%E5%8F%96%E6%BC%AB%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="使用puppeteer爬取漫画">使用puppeteer爬取漫画</h2><h2 id="介绍">介绍</h2><p>前几天看到龙珠超-次元乱战的漫画，感觉还不错，奈何一下子没有找到资源。<br>但是看到了在线版本的，这里就想到直接将资源下载下来看，那不是更方便吗😊。</p><h2 id="正文">正文</h2><h3 id="工具">工具</h3><p>本次使用的工具有</p><ul><li><a href="https://www.axios-http.cn/">axios</a><br>这个应该不用多介绍了，在这里的使用目的是进行文件的下载。</li><li><a href="https://pptr.dev/">puppeteer</a><br><code>puppeteer</code>是一个模拟浏览器的运行工具，可以自动化的做一些用户操作。</li></ul><h3 id="流程">流程</h3><p>这里简单讲一下具体的流程。</p><ol><li>进入漫画的目录首页，获取漫画的章节数量及具体路由</li><li>循环进入相关章节的路由</li><li>获取当前章节的分页数量</li><li>下载指定章节中的漫画资源（也就是一张图片）</li><li>点击下一页进入当前章节的也一张图片</li><li>完成所有下载后，将图片合并为<code>pdf</code></li></ol><h3 id="优化">优化</h3><ul><li>上面的文件下载难免会出现失败的情况，可以适当进行重试的设置</li><li>多次执行脚本不应该重复下载已下载的资源，可以在下载前对本地文件进行检索</li></ul><h3 id="具体实现">具体实现</h3><p><a href="https://github.com/food-billboard/food-billboard.github.io/tree/hexo/source/images/%E4%BD%BF%E7%94%A8puppeteer%E7%88%AC%E5%8F%96%E6%BC%AB%E7%94%BB/project">点击这里查看具体代码实现</a></p><h3 id="碰到的问题">碰到的问题</h3><h4 id="npm-i-puppeteer-失败">npm i puppeteer 失败</h4><p>下载puppeteer会自动下载<code>chromium</code>浏览器，这个浏览器有<code>100-200MB</code>，经常会出现失败的情况。<br>我们可以先执行<code>export PUPPETEER_SKIP_DOWNLOAD='true'</code>来跳过下载。<br>接着在项目目录下面执行<code>node node_modules/puppeteer/install.js</code>来下载。</p><h4 id="Failed-to-launch-the-browser-process">Failed to launch the browser process!</h4><p>(Chrome is downloaded but fails to launch on Node.js 14)[<a href="https://pptr.dev/troubleshooting#chrome-is-downloaded-but-fails-to-launch-on-nodejs-14">https://pptr.dev/troubleshooting#chrome-is-downloaded-but-fails-to-launch-on-nodejs-14</a>]</p><h2 id="结束">结束</h2><p>做个简单记录😊</p><blockquote><p>参考<br><a href="https://codeleading.com/article/44573498917/">云函数（nodejs）中Buffer、ArrayBuffer、DataView互相转化</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>backend node puppeteer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打包配置参考</title>
    <link href="/2023/09/01/%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/"/>
    <url>/2023/09/01/%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1>打包配置参考</h1><h2 id="开始">开始</h2><h3 id="umd">umd</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><span class="hljs-keyword">const</span> TerserPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;terser-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> pkg = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../package.json&#x27;</span>)<br><br>webpack(<br>  &#123;<br>    <span class="hljs-comment">// 入口</span><br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./es/build.js&#x27;</span>,<br>    <span class="hljs-comment">// 目标环境</span><br>    <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;browserslist:&gt;0.25%, not dead, not op_mini all&#x27;</span>,<br>    <span class="hljs-comment">// 模式</span><br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;qsb-file-viewer.min.js&#x27;</span>,<br>      <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">&#x27;umd&#x27;</span>,<br>      <span class="hljs-attr">library</span>: <span class="hljs-string">&#x27;qsbFileViewer&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">externals</span>: &#123;<br>      <span class="hljs-attr">react</span>: <span class="hljs-string">&#x27;React&#x27;</span>,<br>      <span class="hljs-string">&#x27;react-dom&#x27;</span>: <span class="hljs-string">&#x27;ReactDOM&#x27;</span>,<br>      <span class="hljs-attr">moment</span>: <span class="hljs-string">&#x27;moment&#x27;</span>,<br>      <span class="hljs-attr">antd</span>: <span class="hljs-string">&#x27;antd&#x27;</span>,<br>      <span class="hljs-attr">axios</span>: <span class="hljs-string">&#x27;axios&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>      <span class="hljs-attr">rules</span>: [<br>        &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.m?js$/</span>,<br>          loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-comment">// 缓存编译结果</span><br>            <span class="hljs-attr">cacheDirectory</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">// 包含gzip</span><br>            <span class="hljs-attr">cacheCompression</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-comment">// 是否使用babelrc</span><br>            <span class="hljs-attr">babelrc</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-comment">// 是否使用配置文件</span><br>            <span class="hljs-attr">configFile</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-comment">// 编译的类型 script module unambiguous(存在import/export就是module，否则是script)</span><br>            <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&#x27;unambiguous&#x27;</span>,<br>            <span class="hljs-comment">// 去除换行和空格</span><br>            <span class="hljs-attr">compact</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">presets</span>: [<br>              [<br>                <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>                &#123;<br>                  <span class="hljs-comment">// &quot;amd&quot; | &quot;umd&quot; | &quot;systemjs&quot; | &quot;commonjs&quot; | &quot;cjs&quot; | &quot;auto&quot; | false</span><br>                  <span class="hljs-comment">// esm 转换为某一种规范类型</span><br>                  <span class="hljs-attr">modules</span>: <span class="hljs-string">&#x27;umd&#x27;</span>,<br>                  <span class="hljs-comment">// 是否自动引入polyfill</span><br>                  <span class="hljs-comment">// false </span><br>                  <span class="hljs-comment">// entry(手动引入) 根据target会自动根据引入的模块进行兼容，比如引入了promise，他会把所有promise的模块都帮助引入，比如promise.any</span><br>                  <span class="hljs-comment">// usage(根据使用情况自动引入) 完全交给babel处理，使用到什么就引入什么，但是比如如果只是使用了promise，则不会引入promise.any </span><br>                  <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;entry&#x27;</span>,<br>                  <span class="hljs-attr">corejs</span>: <span class="hljs-number">3</span>,<br>                  <span class="hljs-comment">// corejs: &#123;</span><br>                  <span class="hljs-comment">//   version: 3,</span><br>                  <span class="hljs-comment">//   // 编译提案的api </span><br>                  <span class="hljs-comment">//   proposals: false</span><br>                  <span class="hljs-comment">// &#125;,</span><br>                  <span class="hljs-comment">// Exclude transforms that make all code slower</span><br>                  <span class="hljs-attr">exclude</span>: [<span class="hljs-string">&#x27;transform-typeof-symbol&#x27;</span>],<br>                &#125;,<br>              ],<br>            ],<br>            <span class="hljs-attr">plugins</span>: [<br>              [<br>                <span class="hljs-comment">// 配合@babel/runtime 将辅助函数等 注入到代码中</span><br>                <span class="hljs-string">&#x27;@babel/plugin-transform-runtime&#x27;</span>, <br>                &#123;<br>                  <span class="hljs-comment">// 兼容模式(不污染全局局部变量)  </span><br>                  <span class="hljs-comment">// 这里的corejs 和 前面 preset-env 用一个就行了</span><br>                  <span class="hljs-attr">corejs</span>: <span class="hljs-literal">false</span>,<br>                  <span class="hljs-attr">version</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/runtime/package.json&#x27;</span>).version,<br>                  <span class="hljs-comment">// true 引入函数 false 内联函数</span><br>                  <span class="hljs-attr">helpers</span>: <span class="hljs-literal">true</span>,<br>                  <span class="hljs-comment">// async 和 * function 的语法支持 </span><br>                  <span class="hljs-comment">// 是否为引入（或者内联）</span><br>                  <span class="hljs-attr">regenerator</span>: <span class="hljs-literal">true</span>,<br>                &#125;,<br>              ],<br>            ],<br>          &#125;,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,<br>          type: <span class="hljs-string">&#x27;asset/inline&#x27;</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-comment">//匹配 css 文件</span><br>          use: [<br>            &#123;<br>              <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>              <span class="hljs-attr">options</span>: &#123;<br>                <span class="hljs-attr">attributes</span>: &#123;<br>                  <span class="hljs-string">&#x27;data-module&#x27;</span>: pkg.name,<br>                  <span class="hljs-string">&#x27;data-version&#x27;</span>: pkg.version,<br>                &#125;,<br>              &#125;,<br>            &#125;,<br>            <span class="hljs-string">&#x27;css-loader&#x27;</span><br>          ]<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>          use: [<br>            &#123;<br>              <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>              <span class="hljs-attr">options</span>: &#123;<br>                <span class="hljs-attr">attributes</span>: &#123;<br>                  <span class="hljs-string">&#x27;data-module&#x27;</span>: pkg.name,<br>                  <span class="hljs-string">&#x27;data-version&#x27;</span>: pkg.version,<br>                &#125;,<br>              &#125;,<br>            &#125;,<br>            <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>            &#123;<br>              <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;less-loader&#x27;</span>,<br>              <span class="hljs-attr">options</span>: &#123;<br>                <span class="hljs-attr">lessOptions</span>: &#123;<br>                  <span class="hljs-attr">javascriptEnabled</span>: <span class="hljs-literal">true</span>,<br>                &#125;,<br>              &#125;,<br>            &#125;,<br>          ],<br>        &#125;,<br>      ],<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> webpack.ProgressPlugin()],<br>    <span class="hljs-attr">optimization</span>: &#123;<br>      <span class="hljs-attr">minimizer</span>: [<br>        <span class="hljs-keyword">new</span> TerserPlugin(&#123;<br>          <span class="hljs-attr">extractComments</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">terserOptions</span>: &#123;<br>            <span class="hljs-attr">parse</span>: &#123;<br>              <span class="hljs-comment">// We want terser to parse ecma 8 code. However, we don&#x27;t want it</span><br>              <span class="hljs-comment">// to apply any minification steps that turns valid ecma 5 code</span><br>              <span class="hljs-comment">// into invalid ecma 5 code. This is why the &#x27;compress&#x27; and &#x27;output&#x27;</span><br>              <span class="hljs-comment">// sections only apply transformations that are ecma 5 safe</span><br>              <span class="hljs-comment">// https://github.com/facebook/create-react-app/pull/4234</span><br>              <span class="hljs-attr">ecma</span>: <span class="hljs-number">8</span>,<br>            &#125;,<br>            <span class="hljs-attr">compress</span>: &#123;<br>              <span class="hljs-attr">pure_funcs</span>: [<span class="hljs-string">&#x27;console.log&#x27;</span>],<br>              <span class="hljs-attr">drop_debugger</span>: <span class="hljs-literal">true</span>,<br>              <span class="hljs-attr">ecma</span>: <span class="hljs-number">5</span>,<br>              <span class="hljs-attr">warnings</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-comment">// Disabled because of an issue with Uglify breaking seemingly valid code:</span><br>              <span class="hljs-comment">// https://github.com/facebook/create-react-app/issues/2376</span><br>              <span class="hljs-comment">// Pending further investigation:</span><br>              <span class="hljs-comment">// https://github.com/mishoo/UglifyJS2/issues/2011</span><br>              <span class="hljs-attr">comparisons</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-comment">// Disabled because of an issue with Terser breaking valid code:</span><br>              <span class="hljs-comment">// https://github.com/facebook/create-react-app/issues/5250</span><br>              <span class="hljs-comment">// Pending further investigation:</span><br>              <span class="hljs-comment">// https://github.com/terser-js/terser/issues/120</span><br>              <span class="hljs-attr">inline</span>: <span class="hljs-number">2</span>,<br>            &#125;,<br>            <span class="hljs-attr">mangle</span>: &#123;<br>              <span class="hljs-attr">safari10</span>: <span class="hljs-literal">true</span>,<br>            &#125;,<br>            <span class="hljs-comment">// Added for profiling in devtools</span><br>            <span class="hljs-attr">keep_classnames</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">keep_fnames</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">output</span>: &#123;<br>              <span class="hljs-attr">ecma</span>: <span class="hljs-number">5</span>,<br>              <span class="hljs-attr">comments</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-comment">// Turned on because emoji and regex is not minified properly using default</span><br>              <span class="hljs-comment">// https://github.com/facebook/create-react-app/issues/2488</span><br>              <span class="hljs-attr">ascii_only</span>: <span class="hljs-literal">true</span>,<br>            &#125;,<br>          &#125;,<br>        &#125;),<br>      ],<br>    &#125;,<br>    <span class="hljs-attr">performance</span>: &#123;<br>      <span class="hljs-attr">maxEntrypointSize</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>,<br>      <span class="hljs-attr">maxAssetSize</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error, stats</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-built_in">console</span>.error(error)<br>      process.exit(<span class="hljs-number">1</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (stats.compilation.errors.length) &#123;<br>      <span class="hljs-built_in">console</span>.log(stats.toString(&#123; <span class="hljs-attr">all</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">errors</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">colors</span>: <span class="hljs-literal">true</span> &#125;))<br>      process.exit(<span class="hljs-number">1</span>)<br>    &#125;<br><br>    <span class="hljs-built_in">console</span>.log(stats.toString(&#123; <span class="hljs-attr">colors</span>: <span class="hljs-literal">true</span> &#125;))<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="结束">结束</h2><p>结束🔚。</p><p>参考链接</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/84799735">Babel7 中 @babel/preset-env 的使用</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>prettier控制引入顺序</title>
    <link href="/2023/07/28/prettier%E6%8E%A7%E5%88%B6%E5%BC%95%E5%85%A5%E9%A1%BA%E5%BA%8F/"/>
    <url>/2023/07/28/prettier%E6%8E%A7%E5%88%B6%E5%BC%95%E5%85%A5%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1>prettier控制引入顺序</h1><p>作为一个有&quot;素质&quot;的前端选手，对于代码的格式有着极强的要求，今天就讲一下关于<strong>引入顺序</strong>的问题的处理。</p><h2 id="开始">开始</h2><p>一般情况下，我们都会对引入的模块的顺序进行控制。<br>比如在我看来，应该是这么一个顺序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 第三方模块</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 绝对路径模块</span><br><span class="hljs-keyword">import</span> Component <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Component&#x27;</span><br><span class="hljs-comment">// 相对路径模块</span><br><span class="hljs-keyword">import</span> Children <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Children&#x27;</span><br></code></pre></td></tr></table></figure><p>这时候就可以使用到这个模块<a href="https://www.npmjs.com/package/@trivago/prettier-plugin-sort-imports">@trivago/prettier-plugin-sort-imports<br></a></p><p>它可以帮助自动调整引入的顺序。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;importOrder&quot;</span>: [<br>    <span class="hljs-string">&quot;&lt;THIRD_PARTY_MODULES&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;^@(.*)&quot;</span>,<br>    <span class="hljs-string">&quot;^[./]&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>如上即简单控制了上面三个模块的顺序，当然你也可以更加细粒度的控制同一类型模块的顺序。<br>比如<strong>绝对路径</strong>模块的<code>components</code>应该在<code>utils</code>前面、<strong>相对路径</strong>的<code>js</code>模块应该在<code>css</code>模块前面。</p><p>完成上面的配置，就可以看到如下的效果。</p><img src="/images/prettier控制引入顺序/result.gif" /><h2 id="结束">结束</h2><p>结束🔚。</p><p>参考链接</p><blockquote><p><a href="https://blog.csdn.net/qiphon3650/article/details/129705342">eslint prettier import sort 排序</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prettier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏设计器开发-控制刷新</title>
    <link href="/2023/07/11/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E6%8E%A7%E5%88%B6%E5%88%B7%E6%96%B0/"/>
    <url>/2023/07/11/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E6%8E%A7%E5%88%B6%E5%88%B7%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h1>数据可视化大屏设计器开发-控制刷新</h1><h2 id="开头">开头</h2><p>本文是数据可视化开始的开发细节第七章。关于大屏中组件的控制刷新的逻辑。</p><p>根据上一章内容，关于关联参数的逻辑讲解，引申的一个场景。<br>一个列表组件可能依赖于多个联动组件的关联参数，比如像是<a href="https://procomponents.ant.design/components/table">ProTable</a>。</p><img src="/images/数据可视化大屏设计器开发/pro-table.jpg" />  <p>上面的查询项的关联参数会被写入到<strong>列表</strong>的请求路径中，比如这样<code>/api/fetch/table?title=&#123;&#123;title&#125;&#125;&amp;status=&#123;&#123;status&#125;&#125;</code>。</p><p>但是因为关联参数的更新是响应式的，当一个查询项发生变化时，立马就会触发列表组件的<code>request</code>行为，这无疑是相当浪费资源的（除非本身就有立刻<code>request</code>的需求）。</p><p>所以需要有一种特殊的行为逻辑，只有在某些特定的条件下才会触发更新。<br>比如<strong>点击按钮</strong>。</p><h2 id="开始">开始</h2><p>前文介绍到，关联参数使用的三个场景（数据请求、数据过滤、条件）。<br>本文也从这三个方面分别介绍下应对方案。</p><blockquote><p>关于下面几个方面的参数逻辑，可以参看上一篇文章，本文只介绍标题的逻辑。</p></blockquote><h3 id="条件">条件</h3><p>相对于其他的两个场景，条件场景可能并不需要多余的处理。<br>其实本身他就是一个需要立刻响应的逻辑。</p><p>当用户状态发生改变，图表必然需要立刻计算是<strong>显示</strong>还是<strong>隐藏</strong>。(`へ´*)ノ</p><h3 id="数据过滤">数据过滤</h3><p>重新看一下数据过滤的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">data, <span class="hljs-built_in">global</span></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; userId &#125; = <span class="hljs-built_in">global</span><br>  <span class="hljs-keyword">return</span> data.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.userId === userId) <br>&#125;<br></code></pre></td></tr></table></figure><p>前面也讲到过，第二个参数是全局的关联参数，并且他是<strong>所有</strong>的关联参数。</p><img src="/images/数据可视化大屏设计器开发/关联参数选择.jpg" />  <p>之所以是将全部的关联参数注入，就是为了控制他是否触发执行。</p><p>当在选择关联参数组件中选择了需要用到的关联参数时，在关联参数发生改变时，就会触发比较并更新。<br>而如果没有选择关联参数，而是直接使用，那就不可能触发<code>compare</code>。<br>我们只需要选择需要<strong>立刻响应</strong>的关联参数即可。</p><img src="/images/数据可视化大屏设计器开发/控制刷新-过滤器.jpg" />  <img src="/images/数据可视化大屏设计器开发/控制刷新-过滤函数.gif" />  <p>如上图演示可见，虽然只是关联了参数<code>xx</code>，但是可以在过滤函数里访问另一个未被选择的关联参数<code>yy</code>。</p><h3 id="数据请求">数据请求</h3><p>最后讲解的是数据请求方面的处理。（这里先不考虑<code>data</code>和<code>headers</code>的处理了）</p><p><code>url</code>上携带关联参数，因为只是一个字符串，很难控制其刷新，所以这里想到了采用一个简单的<code>Hack</code>手段。<br>我们设置两个特殊的常量字符串用于标识。<br>比如<code>LAZY_REQUEST_FLAG</code>和<code>IMMEDIATELY_REQUEST_FLAG</code></p><ul><li>LAZY_REQUEST_FLAG<br>懒更新标识</li><li>IMMEDIATELY_REQUEST_FLAG<br>立即刷新标识</li></ul><h4 id="LAZY-REQUEST-FLAG">LAZY_REQUEST_FLAG</h4><p>我们给一个需要懒更新的关联参数后面跟上<code>LAZY_REQUEST_FLAG</code>，表示它不需要立刻更新。<br><code>/api/fetch?userId=&#123;&#123;userIdLAZY_REQUEST_FLAG&#125;&#125;</code><br>在收集<code>url</code>上的参数时，忽略包含<code>LAZY_REQUEST_FLAG</code>的关联参数。<br>这样即使参数发生变化，<code>compare</code>也无从进行比较。</p><p>在真正需要<code>request</code>时，先循环<code>replace</code>掉<code>LAZY_REQUEST_FLAG</code>就是原始的<code>url</code>，接着再使用<a href="https://github.com/janl/mustache.js">mustache</a>来解析成最终的请求<code>url</code>。</p><img src="/images/数据可视化大屏设计器开发/关联参数-url-非懒更新.jpg" /><img src="/images/数据可视化大屏设计器开发/关联参数-url-懒更新.jpg" />  <img src="/images/数据可视化大屏设计器开发/关联参数-url-请求.jpg" /><img src="/images/数据可视化大屏设计器开发/关联参数-url-请求.gif" /><blockquote><p>如上图可以看到，只有当<code>xx</code>发生变化时，才会重新请求接口。</p></blockquote><h4 id="IMMEDIATELY-REQUEST-FLAG">IMMEDIATELY_REQUEST_FLAG</h4><p>开头讲到过关于列表存在查询项的场景。<br>针对此场景，可以对查询按钮做特殊处理。</p><p>因为按钮<strong>点击</strong>逻辑上，本质还是将按钮的内容作为关联参数的值传递给其他的组件的。<br>但是按钮的内容并不会在每次点击都发生变化，所以可以针对<strong>按钮</strong>特殊处理，在点击按钮传递参数的值时，增加<code>IMMEDIATELY_REQUEST_FLAG</code>并跟上时间戳，这样就保证了组件每一次点击都是不一样的值。</p><p>基于不同场景，增加一个按钮<strong>类型</strong>配置。</p><img src="/images/数据可视化大屏设计器开发/关联参数-url-按钮配置.jpg" /><blockquote><p>普通按钮为点击不携带时间戳，提交按钮则会携带。</p></blockquote><img src="/images/数据可视化大屏设计器开发/关联参数-url-checkbox-lazy.jpg" /><img src="/images/数据可视化大屏设计器开发/关联参数-url-button.jpg" /><img src="/images/数据可视化大屏设计器开发/关联参数-url-immediately-list.jpg" /><img src="/images/数据可视化大屏设计器开发/关联参数-url-immediately.gif" /><blockquote><p>如上图可以看到，通过点击按钮可以每次都触发接口请求。</p></blockquote><h2 id="结束">结束</h2><p>以上逻辑均为本人自己的想法，如有问题或错误可指正🙏🏻 。</p><p>结束🔚。</p><p>顺便在下面附上相关的链接。</p><blockquote><p><a href="http://47.97.27.23/api/backend/screen/index.html">试用地址</a><br><a href="https://github.com/food-billboard/create-chart/issues/2">试用账号</a><br><a href="https://food-billboard.github.io/create-chart/index.html#/">静态版试用地址</a><br><a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">操作文档</a><br><a href="https://github.com/food-billboard/create-chart">代码地址</a></p></blockquote><p>参考链接。</p><blockquote><p><a href="https://github.com/ascoders/weekly/blob/master/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/166.%E7%B2%BE%E8%AF%BB%E3%80%8ABI%20%E6%90%AD%E5%BB%BA%20-%20%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6%E3%80%8B.md">BI 搭建 - 筛选条件</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>大屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lowcode react chart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏设计器开发-关联参数</title>
    <link href="/2023/07/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E5%85%B3%E8%81%94%E5%8F%82%E6%95%B0/"/>
    <url>/2023/07/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E5%85%B3%E8%81%94%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1>数据可视化大屏设计器开发-关联参数</h1><h2 id="开头">开头</h2><p>本文是数据可视化开始的开发细节第六章。关于大屏中组件的关联参数设置的逻辑。</p><blockquote><p>关联参数所指的是组件的数据变更或者配置变更依赖于某一些地方带来的变量。</p></blockquote><p>比如</p><ul><li>一个柱形图的数据请求的<code>url</code>需要一个用户<code>id</code>。</li><li>一个标题的内容是根据当前的学校，来显示其名称。</li><li>一个雷达图需要根据数据的不同显示不一样的维度。</li><li>一个视频需要根据数据的不同来控制是否显示。</li></ul><p>下面就<strong>关联参数</strong>相关来进行详细的逻辑讲解。</p><h2 id="开始">开始</h2><h3 id="关联参数来源">关联参数来源</h3><p>针对不同的场景，可能组件依赖了来自于不同地方的数据。<br>就此大屏设计器来说，主要来源的参数分为<code>3</code>种（<code>url</code>、<code>params</code>、<code>constants</code>）。</p><h4 id="url">url</h4><p>顾名思义，来源于大屏的链接地址。<br>比如<code>https://www.baidu.com/?userId=xxx&amp;address=yyy</code>，<code>userId</code>和<code>address</code>就会被认为是两个关联参数被保存到配置当中。</p><h4 id="constants">constants</h4><p>大屏当中存在一些特殊的情况，需要用到一些不变值，所以在配置中新增了一个<strong>全局常量</strong>的概念。<br><img src="/images/数据可视化大屏设计器开发/constants.jpg" /><br>主要是<strong>名称</strong>和<strong>常量</strong>两个地方的定义，即对象的<code>key</code>和<code>value</code>。</p><h4 id="params">params</h4><p>关联参数的主要来源都是在<code>params</code>中，代指的是各个组件中的交互配置。<br><img src="/images/数据可视化大屏设计器开发/关联参数-params.jpg" /><br>根据组件的一条<strong>特殊事件</strong>，触发对应的逻辑，对设置的值进行变动，进而通知关联了该组件的参数的组件进行相应的更新。</p><p>比如上图的&quot;基础柱形图&quot;的交互配置，点击柱形图的柱条时，该柱条对应的数据：横轴（x）、纵轴（y）以及系列（s）的值，就会更新到配置中，同时关联了这些参数的组件也会接收到值的变动的通知，并进行对应的操作。</p><h3 id="关联参数设置">关联参数设置</h3><p>上面介绍了关联参数的来源，这里继续介绍每一种参数的设置。</p><h4 id="url-2">url</h4><p>关于<code>url</code>上的参数的获取，其实在平时的业务当中并不少见，这里就简单的使用<a href="https://github.com/Gozala/querystring">querystring</a>来获取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; parse &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;querystring&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; search &#125; = <span class="hljs-keyword">new</span> URL(<span class="hljs-built_in">window</span>.location.href)<br><span class="hljs-comment">// object版本</span><br><span class="hljs-keyword">const</span> objectUrlParams = parse(search.replace(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><span class="hljs-comment">// object[]版本</span><br><span class="hljs-keyword">const</span> objectArrayUrlParams = <span class="hljs-built_in">Object</span>.entries(value).reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [key, value] = cur;<br>  acc.push(&#123;<br>    key,<br>    value,<br>    <span class="hljs-attr">id</span>: key,<br>    <span class="hljs-attr">description</span>: <span class="hljs-string">`来源于url地址:<span class="hljs-subst">$&#123;key&#125;</span>`</span>,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> acc;<br>&#125;,[])<br></code></pre></td></tr></table></figure><p>上面的<code>object[]</code>版本为统一处理的版本。</p><h4 id="constants-2">constants</h4><p>和上面的<code>url</code>的<code>object[]</code>格式一致，<code>key</code>和<code>value</code>即为前面介绍的名称和常量值，<code>description</code>为可自定义的描述文字。</p><h4 id="params-2">params</h4><p>而对于<code>params</code>，比上面两种参数都较为复杂，因为其涉及到组件和组件之间的关联，所以他本身存在于<strong>组件本身</strong>和<strong>全局</strong>两个地方。</p><h5 id="组件本身">组件本身</h5><p>组件本身需要存储它的一些特性，比如他的数据原始字段名称、映射字段名称、默认值以及描述。</p><ul><li>原始字段名称<br>原始字段表示该组件本身的字段的名称，因为每一个组件的数据格式都是不一样的，它的数据字段名称也不一样，比如<strong>柱形图</strong>的数据格式是一个数组对象，而<strong>标题</strong>的数据格式是一个对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 柱形图的数据格式</span><br><span class="hljs-keyword">const</span> barData = [<br>  &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;01-01&#x27;</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">100</span>,<br>    <span class="hljs-attr">s</span>: <span class="hljs-string">&#x27;s1&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;01-01&#x27;</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">s</span>: <span class="hljs-string">&#x27;s2&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;01-02&#x27;</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">70</span>,<br>    <span class="hljs-attr">s</span>: <span class="hljs-string">&#x27;s1&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;01-02&#x27;</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">50</span>,<br>    <span class="hljs-attr">s</span>: <span class="hljs-string">&#x27;s2&#x27;</span><br>  &#125;<br>]<br><span class="hljs-comment">// 标题的数据格式</span><br><span class="hljs-keyword">const</span> titleData = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;我是一个标题&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而在需要真正使用时，其他组件不可能直接关联组件的原始字段，因为这样子的重复率会很高，从而导致参数值来回覆盖，显示错误的问题。</p><p>所以组件当中的字段配置格式是下面这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fieldData = &#123;<br>  <span class="hljs-comment">// 不可更改</span><br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;原始的字段名称&#x27;</span>,<br>  <span class="hljs-attr">variable</span>: <span class="hljs-string">&#x27;映射的字段名称&#x27;</span>,<br>  <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;描述&#x27;</span>,<br>  <span class="hljs-attr">mapId</span>: <span class="hljs-string">&#x27;全局的params id&#x27;</span><br>  <span class="hljs-comment">// TODO </span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>mapId</code>为与之同步的全局的参数信息的<code>id</code>，用于两边的数据同步。<br>当组件的数据发生变化时，根据变动的字段名称找到上面的<code>fieldData</code>，并从中找到<code>mapId</code>，进而将数据同步到全局（之后根据逻辑通知关联的组件，这里后面会讲到）。</p><h5 id="全局">全局</h5><p>全局参数则是用于接收同步组件的关联参数，并下发到关联组件。<br>其数据格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> paramsData = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;唯一id&#x27;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;实际的值&#x27;</span>,<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;原始的字段名称&#x27;</span>,<br>  <span class="hljs-attr">variable</span>: <span class="hljs-string">&#x27;映射的字段名称&#x27;</span><br>  <span class="hljs-comment">// TODO </span><br>&#125;<br></code></pre></td></tr></table></figure><p>当组件配置的<code>variable</code>和组件的数据发生变化时，<code>variable</code>和<code>value</code>就会更新。</p><h3 id="关联参数使用">关联参数使用</h3><p>讲了这么多的概念，还没有具体介绍到其使用场景，大屏当中有非常多的地方值得使用关联参数的功能。<br>具体包括三个地方。</p><ul><li>数据请求</li><li>数据过滤</li><li>条件</li></ul><h4 id="数据请求">数据请求</h4><p>数据请求中有三个地方可以用到这个功能。</p><ul><li><code>url</code><br>请求的<code>url</code>上可以携带查询参数或者路径。<br>比如<code>/api/&#123;&#123;userType&#125;&#125;/?userId=&#123;&#123;userId&#125;&#125;</code></li><li><code>data</code><br><code>url</code>可以携带，那请求参数同样可以携带。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;userId&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;userId&#125;&#125;&quot;</span> <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>headers</code><br>请求头上也可以携带，效果也同上。</li></ul><p>具体效果可以查看下图。<br><img src="/images/数据可视化大屏设计器开发/关联参数使用-1.jpg" /><br><img src="/images/数据可视化大屏设计器开发/关联参数使用-2.jpg" /><br><img src="/images/数据可视化大屏设计器开发/关联参数使用-3.jpg" /><br><img src="/images/数据可视化大屏设计器开发/关联参数使用-4.jpg" /></p><p>上面看到的那个特殊语法<code>&#123;&#123;xxx&#125;&#125;</code>得益于<a href="https://github.com/janl/mustache.js">mustache</a>，其实和<code>vue</code>的语法是一样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Mustache <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mustache&#x27;</span>;<br>Mustache.render(<span class="hljs-string">&#x27;/api/&#123;&#123;data&#125;&#125;&#x27;</span>, &#123; <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;100&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure><h4 id="数据过滤">数据过滤</h4><p>数据过滤的功能常用于，当原始的数据格式不能满足组件的需要，或者需要对数据进行处理时。<br>本质上就是一个个<strong>函数</strong>，分别接收上一个函数的返回值，第一个函数则是接收原始数据，最终返回的数据则为组件需要的数据。<br>比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把数据的name和value映射到组件需要的x和y字段上</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> data.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">x</span>: item.name,<br>      <span class="hljs-attr">y</span>: item.value <br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，可以将关联参数作为过滤器的第二参数传入，可以非常灵活的利用js代码来做各种各样的处理。<br>比如下面的简单示例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 假设有这样的一条关联参数数据</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  &#123;</span><br><span class="hljs-comment">    userId: &#x27;xxx&#x27;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 过滤函数</span><br><span class="hljs-comment">// 只抽取userId和关联参数的userId一样的数据</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">data, params</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; userId &#125; = params<br>  <span class="hljs-keyword">return</span> data.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.userId === userId) <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>数据过滤函数也是存在于全局的，组件与组件可以共用同一个过滤函数。</p></blockquote><p>而具体的设置逻辑呢？<br>根据全局的参数，我们可以封装一个下拉选择组件，用于选择需要关联的参数。<br><img src="/images/数据可视化大屏设计器开发/关联参数选择.jpg" /></p><blockquote><p>其实即使不显式设置关联参数，同样可以在过滤器的第二参数当中访问到，区别就在于是否为响应式，此逻辑其实有很大作用，这个会在后续的文章中详细展开。</p></blockquote><h4 id="条件">条件</h4><p>条件功能则是用于控制组件的显示隐藏。<br>从上面的话中也能看出，关联参数在其中的重要性。<br><img src="/images/数据可视化大屏设计器开发/关联参数-条件.jpg" /></p><p>用过<code>datav</code>的应该都见过这个东西。<br>选择一个或多个关联参数，设置一个或多个条件等等。<br>判断参数是等于、大于、小于、不等于。<br>满足条件就响应最终的行为逻辑。</p><p>比如<code>userId</code>等于<code>xxx</code>时，隐藏组件。</p><p>并且笔者还在此基础上增加了一个自定义控制的逻辑。<br>即使用<strong>函数</strong>的形式，根据返回的<strong>布尔值</strong>来判断条件是否成立。<br><img src="/images/数据可视化大屏设计器开发/关联参数-条件自定义.jpg" /></p><p>此逻辑其实类似于上面所述的&quot;数据过滤&quot;。</p><h3 id="参数变更处理">参数变更处理</h3><p>最后就是关于参数变更的处理。<br>当参数的值发生变化时，我们需要如何去处理它的变化。</p><blockquote><p>使用的技术栈为React</p></blockquote><p>所有依赖关联参数的组件都依赖了全局的关联参数源。<br>但是我们不可能把整个全局的源全部传入到渲染组件中，因为这会导致不必要的渲染。<br>所以我们可以定义一个<strong>空的组件</strong>，在其中处理相关的一些逻辑，并传入诸如：重新请求、重新过滤等等的业务逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 直接使用useEffect去做比较 &quot;params&quot; 并更新数据</span><br>useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  compare(params)<br>&#125;, [params])<br><span class="hljs-comment">// 监听 &quot;url&quot; 变化触发 compare  </span><br><span class="hljs-comment">// 常量的话是属于不可变的类型，所以不必管</span><br></code></pre></td></tr></table></figure><p>上面的<code>compare</code>实质上是一个比较并赋值的过程，比较前后两个值如果发生了变化，就收集对应的更新函数。<br>比如<code>reRequest</code>、<code>reFilter</code>、<code>reCondition</code>等等。<br>并在比较完成后进行统一的执行。</p><p>而比较的过程不是对params等的比较，在初始化时，对所有的关联参数做了统一化的处理，形成了一个对象的结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mapParams = &#123;<br>  <span class="hljs-attr">variable</span>: &#123;<br>    <span class="hljs-comment">// 执行的操作</span><br>    <span class="hljs-attr">action</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;, <br>    <span class="hljs-attr">index</span>: &#123;<br>      <span class="hljs-comment">// 参数类型</span><br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;href&#x27;</span> <span class="hljs-comment">// params href constants,</span><br>      <span class="hljs-comment">// 参数的映射名称</span><br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;variable&#x27;</span>,<br>      <span class="hljs-comment">// 获取最新的变更的参数值</span><br>      <span class="hljs-attr">getValue</span>: <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> &#123;&#125;,<br>      <span class="hljs-comment">// TODO </span><br>    &#125;, <br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;当前参数的值&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>比较则是遍历上面的<code>mapParams</code>。</p><h2 id="结束">结束</h2><p>以上逻辑均为本人自己的想法，如有问题或错误可指正🙏🏻 。</p><p>结束🔚。</p><p>顺便在下面附上相关的链接。</p><blockquote><p><a href="http://47.97.27.23/api/backend/screen/index.html">试用地址</a><br><a href="https://github.com/food-billboard/create-chart/issues/2">试用账号</a><br><a href="https://food-billboard.github.io/create-chart/index.html#/">静态版试用地址</a><br><a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">操作文档</a><br><a href="https://github.com/food-billboard/create-chart">代码地址</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>大屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lowcode react chart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏设计器开发-重大变更控制</title>
    <link href="/2023/07/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E9%87%8D%E5%A4%A7%E5%8F%98%E6%9B%B4%E6%8E%A7%E5%88%B6/"/>
    <url>/2023/07/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E9%87%8D%E5%A4%A7%E5%8F%98%E6%9B%B4%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1>数据可视化大屏设计器开发-重大变更控制</h1><h2 id="开头">开头</h2><p>本文是数据可视化开始的开发细节第八章。关于大屏中重大变更控制的逻辑。</p><p>重大变更，也就是<code>Breaking Change</code>。<br>当版本更新中出现了和之前版本不兼容的情况，需要我们自己手动做兼容。</p><p>比如上一个版本的配置的一个数据类型是数组，而现在的数据类型变成了对象，就需要手动将数据进行修正。</p><h2 id="开始">开始</h2><h3 id="版本控制">版本控制</h3><p>首先是关于版本的控制。<br><code>1.20.1</code></p><table><thead><tr><th>序号</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>非负整数</td><td>主版本号</td></tr><tr><td>20</td><td>非负整数</td><td>次版本号</td></tr><tr><td>1</td><td>非负整数</td><td>修订号</td></tr></tbody></table><p>按照上面的规则，我们就可以使用<a href="https://github.com/npm/node-semver">semver</a>来对版本进行比较。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> semver <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;semver&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">versionA, versionB</span>) </span>&#123;<br>  <span class="hljs-comment">// 判断 versionA 版本是否高于 versionB</span><br>  <span class="hljs-keyword">return</span> semver.gt(versionA, versionB)<br>&#125;<br><br>compare(<span class="hljs-string">&#x27;1.0.1&#x27;</span>, <span class="hljs-string">&#x27;1.1.1&#x27;</span>) <span class="hljs-comment">// false </span><br><br></code></pre></td></tr></table></figure><h3 id="统一变更控制">统一变更控制</h3><p>根据版本的判断，接下来就要针对需要兼容的版本以及需要兼容的数据格式做一下特殊处理。</p><p>统一在指定文件夹下按照版本进行分类，并在每一个兼容文件夹下记录版本更迭的描述文字。</p><p>整体的流程就是：</p><ol><li>接口请求大屏数据</li><li>预处理大屏数据</li><li>版本判断</li><li>个别配置处理</li><li>返回最终大屏数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">steps</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-comment">// 请求大屏数据</span><br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> requestScreenData()<br>  <span class="hljs-keyword">const</span> &#123; version, config &#125; = response<br>  <span class="hljs-comment">// 判断 当前版本 是否大于 大屏数据版本</span><br>  <span class="hljs-keyword">if</span>(compare(currentVersion, version)) &#123;<br>    <span class="hljs-keyword">const</span> &#123; needToBreakingChangeConfig, ...nextConfig &#125; = config<br>    <span class="hljs-comment">// 版本兼容</span><br>    <span class="hljs-keyword">return</span> merge(&#123;&#125;, nextConfig, transformConfig(needToBreakingChangeConfig)) <br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> response <br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样既方便了别人继续开发，也方便自己后续查看及整理。</p><h3 id="其他想说的">其他想说的</h3><p>针对配置的变动，可以在大屏当中增加一个<code>tooltip</code>的提示功能，用于提示用户配置发生的变更。<br><code>tooltip</code>中添加<strong>我已知晓</strong>按钮，方便在用户点击知晓后隐藏该提示。</p><p>基于上面的说明，提示功能的文案信息直接放置在<strong>前端</strong>的代码当中，同样按照<strong>版本</strong>的类目放置在一起，增加<code>README</code>。</p><p>具体的配置格式如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> VersionChangeTooltipItem = &#123;<br>  [configId: <span class="hljs-built_in">string</span>]: &#123;<br>    <span class="hljs-comment">// 是否已读，当用户点击知晓时，更改为已读  </span><br>    <span class="hljs-attr">read</span>: <span class="hljs-built_in">boolean</span>;<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">type</span> VersionChangeTooltip = &#123;<br>  [version: <span class="hljs-built_in">string</span>]: VersionChangeTooltipItem;<br>&#125;<br><br><span class="hljs-comment">// 为每一个配置增加配置id，当然没有必要一次性全部加上。</span><br><span class="hljs-comment">// 后面有做变更的配置再增加即可。  </span><br><span class="hljs-keyword">const</span> configTooltip = &#123;<br>  <span class="hljs-string">&#x27;1.21&#x27;</span>: &#123;<br>    <span class="hljs-string">&#x27;object-to-array&#x27;</span>: &#123;<br>      <span class="hljs-attr">read</span>: <span class="hljs-literal">false</span> <br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也存在多个版本存在变更一个配置，且用户多个版本未使用的数据，对多个配置做分页即可。</p><h2 id="结束">结束</h2><p>以上逻辑均为本人自己的想法，如有问题或错误可指正🙏🏻 。</p><p>结束🔚。</p><p>顺便在下面附上相关的链接。</p><blockquote><p><a href="http://47.97.27.23/api/backend/screen/index.html">试用地址</a><br><a href="https://github.com/food-billboard/create-chart/issues/2">试用账号</a><br><a href="https://food-billboard.github.io/create-chart/index.html#/">静态版试用地址</a><br><a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">操作文档</a><br><a href="https://github.com/food-billboard/create-chart">代码地址</a></p></blockquote><p>参考资料</p><blockquote><p><a href="https://juejin.cn/post/6844903823983509512">语义化版本命名通行规则_笔记</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>大屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lowcode react chart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>charles文件映射</title>
    <link href="/2023/05/26/charles%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84/"/>
    <url>/2023/05/26/charles%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>最近工作上碰到一个业务，需要调试以前的老代码，是有单页面单文件形式的<code>vue</code>项目，并不是像<code>webpack</code>类似，起本地服务的项目。<br>之前的方法是通过启动本地主工程的代码，调试该业务的代码，但是相对来说比较繁琐。<br>并且主工程运行速度也并不快。</p><p>此时想到了使用<a href="https://www.charlesproxy.com/">charles</a>，使用<code>charles</code>工具将<strong>远程文件</strong>映射到<strong>本地</strong>。</p><h2 id="开始">开始</h2><h3 id="配置">配置</h3><ul><li><p>首先是下载<code>charles</code>，官网地址在<a href="https://www.charlesproxy.com/">这里</a>，选择自己电脑系统的包。</p></li><li><p>安装完成后，就会看到相关页面的网络请求信息。<br><img src="/images/charles文件映射/charles.jpg" /></p></li><li><p>找到对应需要调试的<strong>地址</strong>，找到需要映射的文件，右击找到<code>Map Local</code>选项(没有找到对应文件也没事，随便找一个填写上对应网络地址和映射路径即可)。<br><img src="/images/charles文件映射/map-local.jpg" /></p></li><li><p>填写对应的信息<br><img src="/images/charles文件映射/link.jpg" /></p></li></ul><p>之后刷新页面，就会发现，该文件已经映射到了本地。</p><h3 id="破解版">破解版</h3><p>因为本身<code>charles</code>是付费的，只有30天的免费试用，并且连续使用不能超过30分钟。<br>可以根据此<a href="https://www.cnblogs.com/tiechui2015/p/17125847.html">步骤</a>将其进行破解。</p><h2 id="结束">结束</h2><p>结束🔚。</p><p>参考链接</p><blockquote><p><a href="https://juejin.cn/post/7114960937840279565">charles将远程文件映射到本地文件</a><br><a href="https://www.cnblogs.com/tiechui2015/p/17125847.html">Charles永久免费破解方法</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端基础回顾-6-Node</title>
    <link href="/2023/05/17/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-6-Node/"/>
    <url>/2023/05/17/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-6-Node/</url>
    
    <content type="html"><![CDATA[<p>这是前端基础回顾的第六篇，记录一下<code>Node</code>的相关问题。</p><h2 id="开始">开始</h2><h3 id="dirname-和-process-cwd-区别">__dirname 和 process.cwd() 区别</h3><p>假设当前在<code>/Users/daniel/development/project/output.js</code>文件中输出上述两个值<br>接着定位到<code>/Users/daniel/development</code>下执行<code>output.js</code><br>输出如下结果</p><ul><li>__dirname<br><code>/Users/daniel/development/project</code><br>文件所在的位置</li><li>process.cwd()<br><code>/Users/daniel/development</code><br>文件执行的所在位置</li></ul><h3 id="process-env-npm-config-user-agent">process.env.npm_config_user_agent</h3><p>获取用户当前使用的包管理工具信息<br>类似<code>npm/6.14.15 node/v12.16.1 darwin x64</code>结构</p><h3 id="npm-create">npm create</h3><p><code>npm create xxx</code> -&gt; <code>npm exec create-xxx</code><br><code>npm create @xxx/yyy</code> -&gt; <code>npm exec @xxx/create-yyy</code><br>如果本地没有安装该依赖包则先<strong>安装</strong><br>接着会按照包内<code>package.json</code>的<code>bin</code>属性找到对应的<strong>执行文件</strong>（以<code>#!/usr/bin/env node</code>开头）</p><blockquote><p>上面的执行和<code>yarn create</code>和<code>npx create</code>没有区别，但是<code>npx create</code>不需要安装对应包。</p></blockquote><h3 id="npm-version-patch">npm version patch</h3><p>更新版本</p><h3 id="postversion">postversion</h3><p>更新版本后触发</p><h2 id="结束">结束</h2><p>结束🔚。</p><blockquote><p>参考资料<br><a href="https://juejin.cn/post/6844903913435430919">node中__dirname、__filename、process.cwd()、process.chdir()表示的路径</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qiankun项目搭建实践</title>
    <link href="/2023/04/27/qiankun%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%AE%9E%E8%B7%B5/"/>
    <url>/2023/04/27/qiankun%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="这篇写一半不想写了，别看了-へ´-ノ">这篇写一半不想写了，别看了(`へ´*)ノ</h2><h2 id="介绍">介绍</h2><h3 id="什么是微前端？">什么是微前端？</h3><blockquote><p><strong>微前端</strong>是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以<strong>独立开发</strong>、<strong>独立部署</strong>。同时，它们也可以在<strong>共享组件</strong>的同时进行并行开发——这些组件可以通过<code>NPM</code>或者<code>Git Tag</code>、<code>Git Submodule</code>来管理。</p></blockquote><h3 id="为什么要使用微前端？">为什么要使用微前端？</h3><ul><li>各个子项目的技术栈是独立的，可以使用任何技术研发。</li><li>独立子项也可以单独运行。</li><li>各个子项的状态都是隔离的。</li></ul><h3 id="本文将介绍qiankun项目的简单搭建。">本文将介绍<a href="https://qiankun.umijs.org/zh">qiankun</a>项目的简单搭建。</h3><blockquote><p>qiankun 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。<br>qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将<code>qiankun</code>打磨的更加成熟完善。<br>目前<code>qiankun</code>已在蚂蚁内部服务了超过<code>2000+</code>线上应用，在易用性及完备性上，绝对是值得信赖的。</p></blockquote><h2 id="开始">开始</h2><p>本次的<code>demo</code>项目的代码都在<a href="https://github.com/food-billboard/qiankun-practice">github</a>，可自行查看运行。</p><blockquote><p>本次项目使用<a href="https://umijs.org/">umi</a>作为基座，分别配置<code>react</code>、<code>vue</code>、<code>angular</code>、<code>jquery</code>子应用。<br>主项目及子项目都只是简单完成了最基础的一些配置，后续可能会继续完善。</p></blockquote><h3 id="umi主应用">umi主应用</h3><blockquote><p>version: 4.+</p></blockquote><p><code>umi</code>社区有相关接入<code>qiankun</code>的插件，可以使用插件(<a href="https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun">@umijs/plugin-qiankun</a>)，也可以直接使用<code>qiankun</code>。<br>这里是选择使用<strong>插件</strong>。</p><ul><li>安装插件<br><code>yarn add @umijs/plugin-qiankun -D</code></li><li>修改配置文件<code>.umirc.ts</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@umijs/max&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; apps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config/qiankun&#x27;</span><br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config/routes&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(&#123;<br>  <span class="hljs-comment">// 路由配置</span><br>  routes,<br>  <span class="hljs-comment">// qiankun配置</span><br>  <span class="hljs-attr">qiankun</span>: &#123;<br>    <span class="hljs-attr">master</span>: &#123;<br>      apps <br>    &#125;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>修改路由配置(<code>./config/routes</code>)</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    <span class="hljs-comment">// 侧边栏的名称</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;react子应用&#x27;</span>,<br>    <span class="hljs-comment">// 路由</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/sub-react-project&#x27;</span>,<br>    <span class="hljs-comment">// 子应用的名称</span><br>    <span class="hljs-comment">// 和下面apps的配置的name对应</span><br>    <span class="hljs-attr">microApp</span>: <span class="hljs-string">&#x27;sub-react-project&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;vue子应用&#x27;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/sub-vue-project&#x27;</span>,<br>    <span class="hljs-attr">microApp</span>: <span class="hljs-string">&#x27;sub-vue-project&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;angular子应用&#x27;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/sub-angular-project&#x27;</span>,<br>    <span class="hljs-attr">microApp</span>: <span class="hljs-string">&#x27;sub-angular-project&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jquery子应用&#x27;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/sub-jquery-project&#x27;</span>,<br>    <span class="hljs-attr">microApp</span>: <span class="hljs-string">&#x27;sub-jquery-project&#x27;</span><br>  &#125;,<br><br>]<br></code></pre></td></tr></table></figure><ul><li>设置子应用路由配置(<code>./config/qiankun</code>)</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> apps = [<br>  &#123;<br>    <span class="hljs-comment">// 子应用名称</span><br>    <span class="hljs-comment">// 和上面路由的name对应</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sub-react-project&#x27;</span>,<br>    <span class="hljs-comment">// 访问地址 </span><br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;//localhost:5000&#x27;</span>,<br>    <span class="hljs-comment">// 子应用的容器id</span><br>    <span class="hljs-attr">container</span>: <span class="hljs-string">&#x27;#sub-react-project&#x27;</span>,<br>    <span class="hljs-comment">// 匹配子应用的路由规则</span><br>    <span class="hljs-attr">activeRule</span>: <span class="hljs-string">&#x27;/sub-react-project&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sub-vue-project&#x27;</span>, <br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;//localhost:5001&#x27;</span>,<br>    <span class="hljs-attr">container</span>: <span class="hljs-string">&#x27;#sub-vue-project&#x27;</span>,<br>    <span class="hljs-attr">activeRule</span>: <span class="hljs-string">&#x27;/sub-vue-project&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sub-angular-project&#x27;</span>, <br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;//localhost:5002&#x27;</span>,<br>    <span class="hljs-attr">container</span>: <span class="hljs-string">&#x27;#sub-angular-project&#x27;</span>,<br>    <span class="hljs-attr">activeRule</span>: <span class="hljs-string">&#x27;/sub-angular-project&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sub-jquery-project&#x27;</span>, <br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;//localhost:5003&#x27;</span>,<br>    <span class="hljs-attr">container</span>: <span class="hljs-string">&#x27;#sub-jquery-project&#x27;</span>,<br>    <span class="hljs-attr">activeRule</span>: <span class="hljs-string">&#x27;/sub-jquery-project&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p>完成上面的步骤，主应用的搭建就算是完成了。<br>启动项目就能看到，如下图。</p><img src="/images/qiankun项目搭建实践/主应用.jpg" /><h3 id="React子应用">React子应用</h3><blockquote><p>version: 18.+<br>cli: create-react-app 5.+</p></blockquote><ul><li>在<code>/src/packages</code>下新建<code>react</code>子应用<br><code>yarn create react-app sub-react-project --template typescript</code></li><li>安装<a href="https://github.com/arackaf/customize-cra">customize-cra</a>和<a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a>扩展配置<br><code>yarn add customize-cra react-app-rewired -D</code></li><li>修改<code>package.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;react-app-rewired start&quot;</span>,<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;react-app-rewired build&quot;</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>新增<code>config-overrides.js</code>文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">const</span> &#123; <br>  override, <br>  overrideDevServer, <br>  watchAll,<br>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;customize-cra&#x27;</span>);<br><span class="hljs-keyword">const</span> packageName = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./package.json&#x27;</span>).name<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">webpack</span>: override(<br>    <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>      config.output = &#123;<br>        ...config.output,<br>        <span class="hljs-attr">library</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;packageName&#125;</span>-[name]`</span>,<br>        <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">&#x27;umd&#x27;</span>,<br>        <span class="hljs-comment">// webpack5 以前用jsonFunction</span><br>        <span class="hljs-attr">chunkLoadingGlobal</span>: <span class="hljs-string">`webpackJsonp_<span class="hljs-subst">$&#123;packageName&#125;</span>`</span>,<br>      &#125;<br>      <span class="hljs-keyword">return</span> config <br>    &#125;,<br>  ),<br>  <span class="hljs-attr">devServer</span>: overrideDevServer(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    config.headers = config.headers || &#123;&#125; <br>    config.headers[<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="hljs-string">&#x27;*&#x27;</span><br>    <span class="hljs-keyword">return</span> config <br>  &#125;, watchAll())<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>增加publicPath.js文件(<code>./src/publicPath.js</code>)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// micro-app-vue/src/public-path.js</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;<br>  <span class="hljs-comment">// 动态设置 webpack publicPath，防止资源加载出错</span><br>  <span class="hljs-comment">// eslint-disable-next-line no-undef</span><br>  __webpack_public_path__ = <span class="hljs-built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>入口文件修改(<code>./src/index.tsx</code>)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>  createHashRouter,<br>  RouterProvider,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span><br><span class="hljs-comment">// 引入publicPath全局赋值</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./publicPath&#x27;</span><br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./routes&#x27;</span><br><br><span class="hljs-keyword">let</span> root: ReactDOM.Root;<br><br><span class="hljs-comment">// 如果没有这个变量就说明是独立运行</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;<br>  render()<br>&#125;<br><br><span class="hljs-comment">// 渲染函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">props?: any</span>) </span>&#123;<br>  root?.unmount()<br><br>  root = ReactDOM.createRoot(<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;sub-react-project&#x27;</span>) <span class="hljs-keyword">as</span> HTMLElement<br>  );<br>  <span class="hljs-keyword">const</span> router = createHashRouter(routes);<br>  root.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">RouterProvider</span> <span class="hljs-attr">router</span>=<span class="hljs-string">&#123;router&#125;</span> <span class="hljs-attr">fallbackElement</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>数据加载中...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125; /&gt;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * bootstrap 只会在微应用初始化的时候调用一次，下次微应用重新进入时会直接调用 mount 钩子，不会再重复触发 bootstrap。</span><br><span class="hljs-comment"> * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bootstrap</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 应用每次进入都会调用 mount 方法，通常我们在这里触发应用的渲染方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mount</span>(<span class="hljs-params">props: any</span>) </span>&#123;<br>  render(props)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 应用每次 切出/卸载 会调用的方法，通常在这里我们会卸载微应用的应用实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unmount</span>(<span class="hljs-params">props: any</span>) </span>&#123;<br>  root?.unmount()<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 可选生命周期钩子，仅使用 loadMicroApp 方式加载微应用时生效</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">props: any</span>) </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>完成上面的步骤，子应用的搭建就算是完成了。<br>启动项目就能看到，如下图。<br><img src="/images/qiankun项目搭建实践/react子应用.jpg" /></p><h3 id="Vue子应用">Vue子应用</h3><blockquote><p>version: 3.+<br>cli: 5.+</p></blockquote><ul><li>在<code>/src/packages</code>下新建<code>vue</code>子应用<br><code>vue create sub-vue-project</code><br>跟着步骤初始化</li><li>同样按照上面<code>react</code>子应用的配置修改<code>vue.config.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">name</span>: packageName &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./package.json&#x27;</span>)<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">library</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;packageName&#125;</span>-[name]`</span>,<br>      <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">&#x27;umd&#x27;</span>,<br>      <span class="hljs-attr">jsonpFunction</span>: <span class="hljs-string">`webpackJsonp_<span class="hljs-subst">$&#123;packageName&#125;</span>`</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 监听端口</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">5001</span>,<br>    <span class="hljs-comment">// 配置跨域请求头，解决开发环境的跨域问题</span><br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>同样创建<code>publicPath.js</code></li><li>同样在入口文件新增配置(<code>./src/main.js</code>)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config/routes&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./publicPath&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">let</span> root;<br><span class="hljs-keyword">let</span> router <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"></span>) </span>&#123;<br>  router = createRouter(&#123;<br>    <span class="hljs-attr">history</span>: createWebHashHistory(),<br>    routes<br>  &#125;)<br><br>  root = createApp(App)<br>  root.use(router)<br>  root.mount(<span class="hljs-string">&#x27;#sub-vue-project&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;<br>  render()<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bootstrap</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mount</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  render(props)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unmount</span>(<span class="hljs-params"></span>) </span>&#123;<br>  root.$destroy()<br>  root = <span class="hljs-literal">null</span> <br>  router = <span class="hljs-literal">null</span> <br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">props</span>) </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>完成上面的步骤，子应用的搭建就算是完成了。<br>启动项目就能看到，如下图。<br><img src="/images/qiankun项目搭建实践/vue子应用.jpg" /></p><h3 id="Angular子应用">Angular子应用</h3><blockquote><p>version: 15.+</p></blockquote><h3 id="Jquery子应用">Jquery子应用</h3><blockquote><p>version: 3.+</p></blockquote><p>这里代表的是一些使用传统三剑客开发的应用。</p><ul><li>将项目放置在<code>/src/packages/sub-jquery-project/src</code>目录下</li><li>启用应用<br>因为不存在<code>webpack</code>编译，直接使用<code>express</code>启动<code>node</code>服务来进行访问。<br><code>npm init</code><br><code>npm install express cors</code><br><code>npm install nodemon -D</code>(<a href="https://github.com/remy/nodemon">nodemon</a>可以监听文件的变化刷新node服务)</li><li>修改<code>package.json</code>文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;nodemon index.js&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>新建启动服务脚本(<code>/sub-jquery-project/index.js</code>)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chalk&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">// 解决跨域问题</span><br>app.use(cors());<br><span class="hljs-comment">// 访问静态文件在src下</span><br>app.use(<span class="hljs-string">&#x27;/&#x27;</span>, express.static(<span class="hljs-string">&#x27;src&#x27;</span>));<br><br><span class="hljs-comment">// 监听端口5003</span><br>app.listen(<span class="hljs-number">5003</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(chalk.green(<span class="hljs-string">&quot;server is listening in http://localhost:5003&quot;</span>))<br>&#125;);<br></code></pre></td></tr></table></figure><p>此时<code>cmd</code>启动<code>npm run start</code>，访问<code>http://localhost:5003</code>即可看到内容</p><ul><li>接入<code>qiankun</code>脚本(<code>/sub-jquery-project/src/js/entry.js</code>)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> render = <span class="hljs-function">(<span class="hljs-params">$, isSub=<span class="hljs-literal">false</span></span>) =&gt;</span> &#123;<br>  $(<span class="hljs-string">&#x27;#sub-jquery-project&#x27;</span>).append(<span class="hljs-string">`And, I am mount in <span class="hljs-subst">$&#123;isSub ? <span class="hljs-string">&#x27;sub&#x27;</span> : <span class="hljs-string">&#x27;self&#x27;</span>&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve();<br>&#125;;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;<br>  render($)<br>&#125;<br><br><span class="hljs-comment">// 绑定qiankun的一些生命周期</span><br>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">global</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">global</span>[<span class="hljs-string">&#x27;sub-jquery-project&#x27;</span>] = &#123;<br>    <span class="hljs-attr">bootstrap</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve();<br>    &#125;,<br>    <span class="hljs-attr">mount</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> render($, <span class="hljs-literal">true</span>);<br>    &#125;,<br>    <span class="hljs-attr">unmount</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve();<br>    &#125;,<br>  &#125;;<br>&#125;)(<span class="hljs-built_in">window</span>);<br></code></pre></td></tr></table></figure><p>完成上面的步骤，子应用的搭建就算是完成了。<br>启动项目就能看到，如下图。<br><img src="/images/qiankun项目搭建实践/jquery子应用.jpg" /></p><h3 id="一些问题">一些问题</h3><h4 id="子应用静态资源404">子应用静态资源404</h4><h2 id="结束">结束</h2><blockquote><p>参考链接<br><a href="https://github.com/a1029563229/blogs/tree/master/BestPractices/qiankun">微前端实战 - 基于 qiankun 的最佳实践</a><br><a href="https://qiankun.umijs.org/zh/guide/tutorial">项目实践</a><br><a href="https://blog.csdn.net/w544924116/article/details/120105320">微前端系列讲解–应用集成方案（qiankun+umi+vue）</a><br><a href="https://juejin.cn/post/6986258669172490271#heading-24">基于qiankun的微前端最佳实践 -（同时加载多个微应用）</a><br><a href="https://juejin.cn/post/6844904016581754888#heading-8">Create React App无eject配置（react-app-rewired 和 customize-cra）</a><br><a href="https://www.cnblogs.com/chenxincoder/p/9163194.html">Angular刷新浏览器 404 问题</a><br><a href="https://www.cnblogs.com/wangyongping/p/16788537.html">qiankun angular12 single-spa-angular子应用的改造</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>todo-list-问题汇总</title>
    <link href="/2023/04/19/todo-list-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2023/04/19/todo-list-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="todo-list-问题汇总">todo-list-问题汇总</h2><h2 id="介绍">介绍</h2><p>前段时间刚刚完成了手绘风格的ToDoList的Demo，当中遇到了不少的问题，简单在这里做一下记录。</p><h2 id="开始">开始</h2><h3 id="几个关键的包：">几个关键的包：</h3><ul><li><a href="https://github.com/rough-stuff/rough">roughjs</a><br>用于绘制手绘风格的图形，此项目为下面<code>wired-elements</code>的基础，并且也是万<code>star</code>⭐️项目<a href="https://github.com/excalidraw/excalidraw">excalidraw</a>的基础。<br>只要简单的几行代码就能实现相关图形的绘制。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// canvas </span><br><span class="hljs-keyword">const</span> rc = rough.canvas(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;canvas&#x27;</span>));<br>rc.rectangle(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br><br><span class="hljs-comment">// svg</span><br><span class="hljs-keyword">const</span> rc = rough.svg(svg);<br><span class="hljs-keyword">let</span> node = rc.rectangle(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>); <br>svg.appendChild(node);<br></code></pre></td></tr></table></figure></li><li><a href="https://github.com/rough-stuff/wired-elements">wired-elements</a><br>基于<code>roughjs</code>实现的<code>web-component</code>组件库。<br>不同于<code>react</code>组件库或者<code>vue</code>组件库，<code>web-component</code>是不受框架影响的，能够接入任何框架或者说直接原生使用（当然他也实现了相关热门框架的组件库封装）。<br>因为他本是就是被浏览器所兼容的<code>api</code>。<br>有关<code>web-component</code>的内容，可以参看<a href="https://www.ruanyifeng.com/blog/2019/08/web_components.html">ruanyifeng的blog</a><br>此项目则是使用了<a href="https://github.com/lit/lit">lit</a>(一个用于快速构建<code>web-component</code>组件库的框架)</li></ul><h3 id="相关问题">相关问题</h3><p>因为上面的两个包都已经很久没有进行维护，虽然是一个团队的项目，但是版本相关的控制没有做的很好。</p><h4 id="问题一">问题一</h4><p>正常下载上面两个包时，在使用相关组件会触发保存。<br>比如使用里面的下拉组件(WiredCombo)</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; WiredCombo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;wired-elements-react/lib/WiredCombo&#x27;</span><br><span class="hljs-keyword">import</span> &#123; WiredItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;wired-elements-react/lib/wiredItem&#x27;</span><br><br><span class="hljs-keyword">const</span> RoughTest = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">WiredCombo</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">WiredItem</span>&gt;</span>全部<span class="hljs-tag">&lt;/<span class="hljs-name">WiredItem</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">WiredItem</span>&gt;</span>小于<span class="hljs-tag">&lt;/<span class="hljs-name">WiredItem</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">WiredItem</span>&gt;</span>大于<span class="hljs-tag">&lt;/<span class="hljs-name">WiredItem</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">WiredItem</span>&gt;</span>等于<span class="hljs-tag">&lt;/<span class="hljs-name">WiredItem</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">WiredCombo</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure>  <img src="/images/todo-list-问题汇总/combo.jpg" />  显示没有问题，但是当点击显示下拉时就会报错。   <img src="/images/todo-list-问题汇总/combo-error.png" />  <h4 id="解决办法">解决办法</h4><p>查看仓库<code>issue</code>发现了<a href="https://github.com/rough-stuff/wired-elements/issues/179#issuecomment-986052290">解决办法</a>。<br>因为没有做版本兼容，<code>hf.fillPolygon</code>这个<code>api</code>发生了变化，导致报错。<br>解决办法就是下载指定版本的<code>roughjs</code>（比如上面提到的版本<strong>4.4</strong>）</p><p>但是直接使用命令控制版本下载还不够<code>yarn add roughjs@4.4</code><br>虽然确实将版本下载成了<code>4.4</code><br>但是查看<code>node_modules</code>的<code>wired-elements</code>包中，仍然引用的是<code>4.5.2</code>（测试用的是<code>node=16.14.2</code>，<code>yarn=1.22.10</code>）<br><img src="/images/todo-list-问题汇总/rough-version-error.png" /></p><p>需要在项目<code>package.json</code>中添加属性</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;resolutions&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;roughjs&quot;</span>: <span class="hljs-string">&quot;4.4&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>顾名思义可以通过外部控制下载相应包的指定版本，防止冲突。</p><h4 id="问题二">问题二</h4><p>在项目即将完工之时，本地运行无问题，但是当把项目放到<a href="https://code.juejin.cn/">码上掘金</a>上时，却发生了错误。<br><img src="/images/todo-list-问题汇总/import-error.png" /></p><p>看报错应该是<code>lit</code>中重复定义了同一个节点名称导致了报错。<br>接着查看组件库源代码发现了问题。<br><img src="/images/todo-list-问题汇总/github-import.png" /><br><code>WiredCombo</code>组件依赖了<code>WiredCard</code>和<code>WiredItem</code>，目前来看问题就是引入了两次造成了<strong>多次初始化</strong>。<br>但是本地<code>umi</code>项目并未发现异样。</p><h5 id="解决办法-2">解决办法</h5><p>暂时还未找到有效的解决办法处理该问题，最后只得采用最朴素的办法–打包上传(`へ´*)ノ。</p><p>如果各位有了解这方面的<strong>欢迎指正</strong>。</p><h2 id="结束">结束</h2><p>结束🔚。</p><p>顺便看看<a href="https://code.juejin.cn/pen/7222841199583821885">效果</a>吧。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端基础回顾-4-React</title>
    <link href="/2023/02/17/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-4-React/"/>
    <url>/2023/02/17/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-4-React/</url>
    
    <content type="html"><![CDATA[<p>这是前端基础回顾的第四篇，记录一下React的相关问题。</p><h2 id="开始">开始</h2><h3 id="事件机制">事件机制</h3><p><code>react</code>内部定义了一套事件机制，帮助<br>- 抹平各个浏览器的差异<br>- 方便管理<br><code>react16</code>存在事件池的概念，帮助缓存事件对象，减少性能消耗。<br>通过内部的<strong>事务</strong>实现各种扩展。<br>统一将事件绑定在<code>document</code>上，先捕获后冒泡。<br>因为存在事件池的概念，如果回调中存在异步，则可能无法获取到<code>event</code>对象。</p><h3 id="class生命周期">class生命周期</h3><ul><li><s>componentWillMount</s></li><li>render</li><li>componentDidMount</li><li>更新state或props</li><li><s>componentWillReceiveProps</s>(更新props)</li><li>getDerivedStateFromProps</li><li>shouldComponentUpdate</li><li><s>componentWillUpdate</s></li><li>getSnapshotBeforeUpdate(替代上面的WillUpdate)</li><li>render</li><li>componentDidUpdate</li><li>componentWillUnmout</li></ul><h3 id="diff">diff</h3><p><a href="https://food-billboard.github.io/2022/11/21/dom-diff%E5%AD%A6%E4%B9%A0/">以前自己写的diff</a></p><h3 id="性能优化">性能优化</h3><ul><li>memo/pureComponent</li><li>useMemo</li><li>lazy、suspense</li><li>尽量通过css控制逻辑</li><li>key</li></ul><h2 id="结束">结束</h2><p>结束🔚。</p><blockquote><p>参考资料<br><a href="https://juejin.cn/post/7061588533214969892#heading-27">做了一份前端面试复习计划，保熟～</a><br><a href="https://pomb.us/build-your-own-react/">Build your own React</a><br><a href="https://juejin.cn/post/6844903975112671239">这可能是最通俗的 React Fiber(时间分片) 打开方式</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端基础回顾-5-Webpack</title>
    <link href="/2023/02/17/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-5-Webpack/"/>
    <url>/2023/02/17/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-5-Webpack/</url>
    
    <content type="html"><![CDATA[<p>这是前端基础回顾的第五篇，记录一下Webpack的相关问题。</p><h2 id="开始">开始</h2><h2 id="结束">结束</h2><p>结束🔚。</p><blockquote><p>参考资料<br><a href="https://juejin.cn/post/7061588533214969892#heading-27">做了一份前端面试复习计划，保熟～</a><br><a href="https://juejin.cn/post/6943468761575849992">当面试官问Webpack的时候他想知道什么</a><br><a href="https://juejin.cn/post/6844903520378814471">简单易懂的 webpack 打包后 JS 的运行过程</a><br><a href="https://juejin.cn/post/6888936770692448270">Webpack手写loader和plugin</a><br><a href="https://zhuanlan.zhihu.com/p/30669007">Webpack HMR 原理解析</a><br><a href="https://juejin.cn/post/6844904094281236487">「吐血整理」再来一打Webpack面试题</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端基础回顾-3-手写源码</title>
    <link href="/2023/02/15/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-3-%E6%89%8B%E5%86%99%E6%BA%90%E7%A0%81/"/>
    <url>/2023/02/15/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-3-%E6%89%8B%E5%86%99%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>这是前端基础回顾的第三篇，记录一下一些手写源码的例子。</p><h2 id="开始">开始</h2><h3 id="深拷贝">深拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">object, map=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> object !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> object <br>  &#125;<br>  <span class="hljs-keyword">if</span>(map.get(object)) <span class="hljs-keyword">return</span> map.get(object)<br>  <span class="hljs-keyword">let</span> result = &#123;&#125;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Object</span>.prototype.toString.call(object) === <span class="hljs-string">&#x27;[object Array]&#x27;</span>) &#123;<br>    result = []<br>  &#125;<br><br>  map.set(object, result)<br><br>  <span class="hljs-keyword">for</span>(objectKey <span class="hljs-keyword">in</span> object) &#123;<br>    <span class="hljs-keyword">if</span>(object.hasOwnProperty(objectKey)) &#123;<br>      result[objectKey] = deepClone(object[objectKey])<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-1-0-2-0-3">0.1 + 0.2 === 0.3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isNumberEqual</span>(<span class="hljs-params">number1, number2</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.abs(number1 - number2) &lt; <span class="hljs-built_in">Math</span>.EPSILON<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="call、apply、bind">call、apply、bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// call </span><br><span class="hljs-built_in">Function</span>.prototype.myCall = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;is not a function&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">const</span> symbol = <span class="hljs-built_in">Symbol</span>()<br>  <span class="hljs-keyword">const</span> args = [...arguments].slice(<span class="hljs-number">1</span>)<br>  context = context || <span class="hljs-built_in">window</span> <br>  context[symbol] = <span class="hljs-built_in">this</span>  <br>  <span class="hljs-keyword">const</span> result = context[symbol](...args)<br>  <span class="hljs-keyword">delete</span> context[symbol] <br>  <span class="hljs-keyword">return</span> result <br>&#125;<br><br><span class="hljs-comment">// apply </span><br><span class="hljs-built_in">Function</span>.prototype.myApply = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;is not a function&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">const</span> symbol = <span class="hljs-built_in">Symbol</span>()<br>  <span class="hljs-keyword">let</span> args = [...arguments][<span class="hljs-number">1</span>]<br>  args = <span class="hljs-built_in">Array</span>.isArray(args) ? args : [] <br>  context = context || <span class="hljs-built_in">window</span> <br>  context[symbol] = <span class="hljs-built_in">this</span> <br>  <span class="hljs-keyword">const</span> result = context[symbol](...args)<br>  <span class="hljs-keyword">delete</span> context[symbol] <br>  <span class="hljs-keyword">return</span> result <br>&#125;<br><br><span class="hljs-comment">// bind </span><br><span class="hljs-built_in">Function</span>.prototype.myBind = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;is not a function&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">const</span> args = [...arguments].slice(<span class="hljs-number">1</span>)<br>  context = context || <span class="hljs-built_in">window</span> <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> realArgs = [...args, ...arguments]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.call(<span class="hljs-built_in">this</span> instanceOf fn ? <span class="hljs-built_in">this</span> : context, ...realArgs)<br>  &#125;<br>  <span class="hljs-keyword">return</span> fn <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="new">new</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNew</span>(<span class="hljs-params">context</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> obj = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>)<br>  obj.__proto__ = context.prototype <br>  <span class="hljs-keyword">const</span> result = context.apply(obj, [...arguments].slice(<span class="hljs-number">1</span>))<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> result === <span class="hljs-string">&#x27;object&#x27;</span> ? result : obj  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="instanceof">instanceof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myInstanceof</span>(<span class="hljs-params">target, origin</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> proto = target.__proto__<br>  <span class="hljs-keyword">const</span> prototype = origin.prototype <br>  <span class="hljs-keyword">while</span>(proto) &#123;<br>    <span class="hljs-keyword">if</span>(prototype === proto) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <br>    proto = proto.__proto__<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="flag">flag</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-built_in">Array</span>.prototype.myFlat = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">deep</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> origin = <span class="hljs-built_in">this</span> <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flat</span>(<span class="hljs-params">array, deep</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = []<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i ++) &#123;<br>      <span class="hljs-keyword">const</span> item = array[i]<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Array</span>.isArray(item) &amp;&amp; (deep &gt; <span class="hljs-number">0</span>)) &#123;<br>        result.push(...flat(item, deep === <span class="hljs-literal">Infinity</span> ? deep : (deep - <span class="hljs-number">1</span>)))<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>        result.push(item)<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result <br>  &#125;<br>  <span class="hljs-keyword">return</span> flat(origin, deep || <span class="hljs-number">1</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="reduce">reduce</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-built_in">Array</span>.prototype.myReduce = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">handler, initialValue</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> total = initialValue || <span class="hljs-number">0</span> <br>  <span class="hljs-keyword">const</span> origin = <span class="hljs-built_in">this</span> <br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; origin.length; i ++) &#123;<br>    total = handler(total, origin[i], i, origin)<br>  &#125;<br>  <span class="hljs-keyword">return</span> total <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="防抖和节流">防抖和节流</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 节流</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">func, options=&#123;&#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; wait=<span class="hljs-number">100</span> &#125; = options <br>  <span class="hljs-keyword">let</span> done = <span class="hljs-literal">true</span> <br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(!done) <span class="hljs-keyword">return</span> <br>    done = <span class="hljs-literal">false</span> <br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      func(...args)<br>      done = <span class="hljs-literal">false</span> <br>    &#125;, wait)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 防抖  </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, options=&#123;&#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; wait=<span class="hljs-number">100</span> &#125; = options <br>  <span class="hljs-keyword">let</span> timeout <br>  <span class="hljs-keyword">let</span> done = <span class="hljs-literal">true</span> <br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(!done) <span class="hljs-built_in">clearTimeout</span>(timeout)<br>    done = <span class="hljs-literal">false</span> <br>    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      func(...args)<br>      done = <span class="hljs-literal">true</span> <br>    &#125;, wait)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Promise">Promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;PENDING&#x27;</span><br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;FULFILLED&#x27;</span><br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;REJECTED&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> &#123;<br>    executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject)<br>  &#125;<br><br>  status = PENDING <br>  value = <span class="hljs-literal">undefined</span> <br>  reason = <span class="hljs-literal">undefined</span> <br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>      <span class="hljs-built_in">this</span>.status = FULFILLED<br>      <span class="hljs-built_in">this</span>.value = value <br>    &#125;<br>  &#125;<br><br>  reject = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>      <span class="hljs-built_in">this</span>.status = REJECTED<br>      <span class="hljs-built_in">this</span>.reason = reason <br>    &#125;<br>  &#125;<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onReject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === FULFILLED) &#123;<br>      onFulfilled(<span class="hljs-built_in">this</span>.value)<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === REJECTED) &#123;<br>      onReject(<span class="hljs-built_in">this</span>.reason)<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Math</span>.random() &gt; <span class="hljs-number">0.5</span>) &#123;<br>    resolve(<span class="hljs-string">&#x27;resolve&#x27;</span>)<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    reject(<span class="hljs-string">&#x27;reject&#x27;</span>)<br>  &#125;<br>&#125;)<br><br>promise<br>.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(value)<br>&#125;, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="数字累加">数字累加</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (start + end) * (end - start + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="随机范围数字">随机范围数字</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomNumber</span>(<span class="hljs-params">start, end, startContain=<span class="hljs-literal">true</span>, endContain=<span class="hljs-literal">true</span></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> number = <span class="hljs-built_in">Math</span>.random() * (end - start + <span class="hljs-number">1</span>) + start <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="前几个斐波那契">前几个斐波那契</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fibonacci</span>(<span class="hljs-params">limit</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal</span>(<span class="hljs-params">number</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> number &lt; <span class="hljs-number">2</span> ? number : cal(number - <span class="hljs-number">1</span>) + cal(number - <span class="hljs-number">2</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(limit).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">_, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> cal(index + <span class="hljs-number">1</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="随机排序">随机排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> length = arr.length <br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; length; index ++) &#123;<br>    <span class="hljs-keyword">const</span> ind = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (length - index)) - index<br>    [arr[index], [arr[ind]]] = [arr[ind], arr[index]] <br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通用事件模型">通用事件模型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventUtil</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-title">addEventListener</span>(<span class="hljs-params">element, event, handler</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(element.addEventListener) &#123;<br>      element.addEventListener(event, handler)<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(element.attachEvent) &#123;<br>      element.attachEvent(<span class="hljs-string">`on<span class="hljs-subst">$&#123;event&#125;</span>`</span>, handler)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      element[<span class="hljs-string">`on<span class="hljs-subst">$&#123;event&#125;</span>`</span>] = handler <br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">removeEventListener</span>(<span class="hljs-params">element, event, handler</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(element.removeEventListener) &#123;<br>      element.removeEventListener(event, handler)<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(element.detachEvent) &#123;<br>      element.detachEvent(<span class="hljs-string">`on<span class="hljs-subst">$&#123;event&#125;</span>`</span>, handler)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      element[<span class="hljs-string">`on<span class="hljs-subst">$&#123;event&#125;</span>`</span>] = <span class="hljs-literal">null</span>  <br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">getEventTarget</span>(<span class="hljs-params">event</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> event.target || event.srcElement <br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">getEvent</span>(<span class="hljs-params">event</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> event || <span class="hljs-built_in">window</span>.event <br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">stopPropagation</span>(<span class="hljs-params">event</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(event.stopPropagation) &#123;<br>      event.stopPropagation()<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      event.cancelBubble = <span class="hljs-literal">true</span> <br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">preventDefault</span>(<span class="hljs-params">event</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(event.preventDefault) &#123;<br>      event.preventDefault()<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      event.returnValue = <span class="hljs-literal">false</span>  <br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ajax">ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br><br>xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/request&#x27;</span>, <span class="hljs-literal">true</span>)<br><br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.readyState == <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status == <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-comment">// TODO </span><br>  &#125;<br>&#125;<br><br>xhr.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><br>xhr.send()<br><br></code></pre></td></tr></table></figure><h3 id="jsonp">jsonp</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonp</span>(<span class="hljs-params">url, params, callback</span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> resonseCallbackName = <span class="hljs-string">&#x27;jsonpCallback&#x27;</span> + <span class="hljs-built_in">Date</span>.now()<br><br>  <span class="hljs-keyword">const</span> queryString = <span class="hljs-built_in">Object</span>.entries(&#123;<br>    ...params,<br>    <span class="hljs-attr">callback</span>: resonseCallbackName<br>  &#125;).map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;item[<span class="hljs-number">0</span>]&#125;</span>=<span class="hljs-subst">$&#123;item[<span class="hljs-number">1</span>]&#125;</span>`</span>).join(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>  <span class="hljs-keyword">let</span> src = url + <span class="hljs-string">`<span class="hljs-subst">$&#123;url.includes(<span class="hljs-string">&#x27;?&#x27;</span>) ? <span class="hljs-string">&#x27;&amp;&#x27;</span> : <span class="hljs-string">&#x27;?&#x27;</span>&#125;</span><span class="hljs-subst">$&#123;queryString&#125;</span>`</span><br><br>  <span class="hljs-keyword">const</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>)<br>  script.src = url <br><br>  <span class="hljs-built_in">window</span>[resonseCallbackName] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) </span>&#123;<br><br>    callback(...args)<br>    <span class="hljs-built_in">document</span>.body.removeChild(script)<br>  &#125;<br><br>  <span class="hljs-built_in">document</span>.body.appendChild(script)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="倒计时纠偏">倒计时纠偏</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">let</span> interval = <span class="hljs-number">1000</span> <br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span> <br><span class="hljs-keyword">let</span> timeout = <span class="hljs-number">5000</span> <br><span class="hljs-keyword">const</span> startTime = <span class="hljs-built_in">Date</span>.now()<br><span class="hljs-keyword">let</span> nextTime = interval<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countup</span>(<span class="hljs-params"></span>) </span>&#123;<br>  count ++ <br>  <span class="hljs-keyword">const</span> offset = <span class="hljs-built_in">Date</span>.now() - (count * interval + startTime)<br>  nextTime = interval - off<span class="hljs-keyword">set</span> <br>  <span class="hljs-title">if</span>(<span class="hljs-params">nextTime &lt; <span class="hljs-number">0</span></span>) &#123;<br>    nextTime = <span class="hljs-number">0</span><br>  &#125;<br><br>  timeout -= interval<br><br>  <span class="hljs-keyword">if</span>(!timeout) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;timeout&#x27;</span>)<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(countup, nextTime)<br>  &#125;<br><br>&#125;<br><br><span class="hljs-built_in">setTimeout</span>(countup, nextTime)<br><br></code></pre></td></tr></table></figure><h2 id="结束">结束</h2><p>结束🔚。</p><blockquote><p>参考资料<br><a href="https://juejin.cn/post/6844903784229896199">从URL输入到页面展现到底发生什么？</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端基础回顾-2-简单知识点</title>
    <link href="/2023/02/14/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-2-%E7%AE%80%E5%8D%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2023/02/14/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-2-%E7%AE%80%E5%8D%95%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>这是前端基础回顾的第二篇，记录一下一些简单的知识点，仅仅用于速记，详细的还是查看具体的一些文章吧。</p><h2 id="开始">开始</h2><h3 id="HTML">HTML</h3><ul><li><p>从浏览器地址栏输入 url 到请求返回发生了什么<br>url解析、缓存、dns解析、tcp链接、http请求、响应、渲染。</p></li><li><p>三次握手、四次挥手</p><ul><li>三次握手<br>客户端：我要发送<br>服务端：接收到客户端信息<br>客户端：接收到服务端信息</li><li>四次挥手<br>客户端：我要关闭<br>服务端：接收到客户端信息<br>服务端：发送关闭信息<br>客户端：接收到关闭信息</li></ul></li><li><p>浏览器内容解析<br>dom树<br>css树<br>render树<br>布局计算<br>渲染</p></li><li><p>http缓存</p><ul><li>强缓存<ul><li>cache-control: max-age=xxx(最大时间s)</li></ul></li><li>协商缓存<ul><li>last-modified -&gt; if-modified-since</li><li>etag -&gt; if-none-match</li></ul></li></ul></li><li><p>get和post的区别</p><ul><li>get可以缓存</li><li>get在url上</li><li>get明文传输，不安全</li><li>get一次性传输，post需要两次</li></ul></li><li><p>跨域</p><ul><li>同源策略<br>域名(<a href="http://baidu.com">baidu.com</a>) 协议(http) 端口(80)</li><li>简单请求<ul><li>get post head</li><li>headers只有<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Content-Type(application/x-www-form-urlencoded或者multipart/form-data或者text/plain)</code></li><li>请求中直接带<code>Origin: 192.168.x.x</code><br>响应带<br><code>Access-Control-Allow-Origin: 192.168.x.x</code> 允许的域名<br><code>Access-Control-Allow-Credential: true</code> 允许携带<code>cookie</code><br><code>Access-Control-Allow-Headers</code>  允许携带的<code>headers</code><br><code>Access-Control-Allow-Method</code>  允许请求的方法</li></ul></li><li>非简单请求<ul><li><code>options</code>请求预查</li><li>响应带<br><code>Access-Control-Max-Age: xxx</code> options缓存有效时间，时间内允许直接发送正式请求</li></ul></li><li><strong>解决办法</strong><ul><li>代理服务器，同源服务器代理客户端请求</li><li>nginx<br>正向代理<br>配置<code>Access-Control-Allow-Origin: xxx</code></li><li>webpack</li></ul></li></ul></li><li><p>常用meta</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span> 标签位于文档的头部，不包含任何内容。<span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span> 标签的属性定义了与文档相关联的名称/值对。<br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>  H5标准声明，使用 HTML5 doctype，不区分大小写<br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span> 标准的 lang 属性写法<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    声明文档使用的字符编码<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span>   优先使用 IE 最新版本和 Chrome<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;不超过150个字符&quot;</span>/&gt;</span>       页面描述<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span>      页面关键词者<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;name, email@gmail.com&quot;</span>/&gt;</span>    网页作<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;index,follow&quot;</span>/&gt;</span>      搜索引擎抓取<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;</span>&gt;</span> 为移动设备添加 viewport<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-title&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;标题&quot;</span>&gt;</span> iOS 设备 begin<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>/&gt;</span>  添加到主屏后的标题（iOS 6 新增）<br>是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-itunes-app&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;</span>&gt;</span><br>添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;black&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format-detection&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;telphone=no, email=no&quot;</span>/&gt;</span>  设置苹果工具栏颜色<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;webkit&quot;</span>&gt;</span>  启用360浏览器的极速模式(webkit)<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>     避免IE使用兼容模式<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Cache-Control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-siteapp&quot;</span> /&gt;</span>    不让百度转码<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;HandheldFriendly&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MobileOptimized&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;320&quot;</span>&gt;</span>   微软的老式浏览器<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;screen-orientation&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;portrait&quot;</span>&gt;</span>   uc强制竖屏<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x5-orientation&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;portrait&quot;</span>&gt;</span>    QQ强制竖屏<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;full-screen&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>              UC强制全屏<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x5-fullscreen&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>       QQ强制全屏<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;browsermode&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;application&quot;</span>&gt;</span>   UC应用模式<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x5-page-mode&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    QQ应用模式<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msapplication-tap-highlight&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>    windows phone 点击无高光<br>设置页面不缓存<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;pragma&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;cache-control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;expires&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CSS">CSS</h3><ul><li><p>盒模型<br><code>box = content + padding + border + margin</code></p><ul><li>标准盒模型(box-sizing: content-box)<br><code>width = content</code></li><li>怪异盒模型(box-sizing: border-box)<br><code>width = content + padding + border</code></li></ul></li><li><p>优先级<br><code>!important &gt; 内联 &gt; id &gt; class &gt; tag</code><br>优先级 = (A, B, C, D)</p><ul><li>A<br>内联，!important</li><li>B<br>#id</li><li>C<br>.class a[href=“http://”] :after</li><li>D<br>div ::after</li></ul></li><li><p>样式属性继承<br>样式可被继承到子元素，比如<code>font-size</code>、<code>font-weight</code>、<code>color</code>等</p></li><li><p><code>margin</code>重叠<br>垂直方向发生重叠</p><ol><li>相邻兄弟元素<code>margin-top[bottom]</code>重叠<br>解决：设置<code>BFC</code></li><li>父<code>margin-top</code>和子<code>margin-top</code>重叠<br>解决：设置父<code>padding</code>或<code>border</code></li><li>父高度<code>auto</code>的<code>margin-bottom</code>和子<code>margin-bottom</code>重叠<br>解决：设置父<strong>高度</strong></li><li>本身无高度，上下<code>margin</code>重叠<br>解决：设置<code>padding</code>或<code>border</code></li></ol><p>计算：</p><ol><li><code>Math.max(+, +)</code></li><li><code>Math.abs(+ - Math.abs(-))</code></li><li><code>-Math.abs(Math.abs(-) - Math.abs(-))</code></li></ol></li><li><p>设备像素、css 像素、设备独立像素、dpr、ppi 之间的区别</p><ul><li>设备像素<br>物理像素，不可变</li><li>css像素<br>css像素=设备独立像素，相对单位，相对于设备像素</li><li>dpr<br>dpr = 设备像素 / 设备独立像素<br>缩放会改变<code>dpr</code></li><li>ppi<br>每英寸的物理像素密度，密度越大，分辨率越大</li></ul></li><li><p>精灵图<br>合并图片，利用<code>background-</code>加载各个位置的小图<br>优点：</p><ul><li>减少<code>http</code>请求</li><li>提高压缩比<br>缺点：</li><li>动一图改全图</li></ul></li><li><p><code>rem</code>优缺点<br>优点：</p><ul><li>屏幕适配<br>缺点：</li><li>有些不同<code>dpr</code>设备显示错误</li><li><code>iframe</code>显示错误<br>ps:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">!<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resize</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.documentElement.style.fontSize = <span class="hljs-built_in">window</span>.innerWidth / <span class="hljs-number">540</span> <span class="hljs-comment">/*设计稿的宽度*/</span> * <span class="hljs-number">10</span> <span class="hljs-comment">/*1rem = 10px*/</span> + <span class="hljs-string">&quot;px&quot;</span><br>  &#125;;<br>  resize()<br>  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>, resize)<br>&#125;()<br></code></pre></td></tr></table></figure></li><li><p><code>margin</code> 无效</p><ul><li>内联元素无效</li><li>内联替换元素<strong>垂直</strong>有效，无<strong>合并</strong>问题</li><li><code>dispaly</code>的<code>table-row</code>和<code>table-cell</code>无效</li><li>定高容器的子元素的<code>margin-bottom</code>和定宽容器的子元素的<code>margin-right</code>无效</li></ul></li><li><p><code>min-width</code>、<code>max-width</code>、<code>width</code>关系<br><code>min-width &gt; max-width &gt; width</code></p></li><li><p><code>line-height</code><br>数值、百分比、长度<br>继承：<br>数值<strong>直接</strong>继承<br>百分比和长度为<strong>计算后</strong>继承</p></li><li><p><code>text-indent</code><br><code>inline</code>和替换元素无效<br>百分比相对<strong>包含块</strong>宽度</p></li><li><p><code>letter-spacing</code><br>字符间距<br>不支持<strong>百分比</strong><br>支持负值<br>默认值<code>normal</code></p><div style="letter-spacing: 10px;">hello world</div></li><li><p><code>word-spacing</code><br>文件间空格间距</p><div style="word-spacing: 10px;">hello world</div></li><li><p>文本省略</p></li></ul> <div     style="width:200px;overflow: hidden;text-overflow: ellipsis;white-space:nowrap;"  >    单行行文本省略单行行文本省略单行行文本省略单行行文本省略单行行文本省略单行行文本省略单行行文本省略  </div>    <div     style="width:200px;overflow: hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:2;"  >    多行行文本省略多行行文本省略多行行文本省略多行行文本省略多行行文本省略多行行文本省略多行行文本省略多行行文本省略多行行文本省略多行行文本省略多行行文本省略多行行文本省略  </div><ul><li><p>元素隐藏</p><ul><li><code>display: none</code></li><li><code>opacity: 0</code></li><li><code>visibility: hidden</code></li><li><code>z-index: -1</code></li></ul></li><li><p>重排和重绘</p><ul><li>重排<br>页面元素重新计算排列布局</li><li>重绘<br>页面元素重新渲染</li></ul><p>重排比重绘更消耗性能</p><ul><li>避免<ul><li>统一修改样式</li><li>临时存储需要计算的尺寸位置属性</li><li>统一增删改dom元素</li><li>position脱离文档流</li><li>transform GPU 加速</li></ul></li></ul></li><li><p>BFC<br>用于绝对块极盒子的布局以及浮动相互影响的区域。</p><ol><li>块极盒子垂直方向排列</li><li>BFC内元素的上下<code>margin</code>会重叠</li><li>BFC计算高度时，浮动元素也会参与计算</li><li>BFC不会与浮动元素发生重叠</li><li>BFC外部元素不会影响到内部</li><li>BFC内部元素的左<code>margin</code>和<code>border</code>接触</li></ol><p>创建BFC</p><ul><li>position: absolute fixed</li><li>display: inline-block</li><li>overflow: 不为visible</li></ul></li></ul><!-- - 布局    - 两栏布局(左侧固定，右侧自适应)      <details>    <summary>      点击查看代码1    </summary>    <div class="outer" style="height: 100px;border: 1px solid black;">      <div class="left" style="width: 100px;height:100%;float:left;background-color: red;">左侧</div>      <div class="right" style="height: 100%;overflow: auto;background-color: yellow;">右侧</div>    </div>  </details>  <details>    <summary>      点击查看代码2    </summary>    <div class="outer" style="height: 100px;border: 1px solid black;">      <div class="left" style="width: 100px;height:100%;float:left;background-color: red;">左侧</div>      <div class="right" style="height: 100%;margin-left: 100px;background-color: yellow;">右侧</div>    </div>  </details>    - 双飞翼布局(两边固定，中间自适应)    <style>    .clear-float::after {      content: "";      display: table;      clear: both;    }  </style>  <details>    <summary>      点击查看代码    </summary>    <div class="outer clear-float" style="height: 100px;width: 200px;margin: 0 -100px;">      <div class="left" style="width: 100px;height:100%;float:left;background-color: red;">左侧</div>      <div class="right" style="width: 100%;height: 100%;overflow: auto;background-color: green;float: left;">中间</div>      <div class="right" style="width: 100px;height: 100%;;background-color: yellow;float: left;">右侧</div>    </div>  </details> --><h3 id="Javascript">Javascript</h3><ul><li><p>基本数据类型<br><code>null</code>、<code>undefined</code>、<code>number</code>、<code>boolean</code>、<code>string</code>、<code>object</code>、<code>bigint</code>、<code>symbol</code></p></li><li><p>数据类型判断</p><ol><li>typeof<br>只能判断普通类型，引用类型无法判断</li><li>instanceof<br>只能判断引用类型，无法区分继承的原型属性</li><li>Object.prototype.toString.call<br>可以判断所有类型</li></ol></li><li><p>作用域和作用域链<br>规定如何查找变量<br>从当前作用域不断向上寻找变量，直至到全局。</p></li><li><p>执行上下文<br>执行一段代码都会创建一个执行上下文，当中包括：</p><ol><li>变量</li><li>this</li><li>作用域链</li></ol></li><li><p>闭包<br>函数的内部的函数可以访问其外部的作用域。</p><ul><li>作用<ol><li>私有变量</li><li>全局变量污染</li></ol></li><li>影响<ul><li>内存泄漏（无法GC）</li></ul></li></ul></li><li><p>event loop 事件流<br>javascript代码执行分为两个队列，宏任务和微任务，先执行一个<strong>宏任务</strong>，接着执行完所有的<strong>微任务</strong>，循环。</p><ul><li>宏任务<br>setTimeout、setInterval、DOM、request</li><li>微任务<br>Promise、async/await、nextTick、Observer</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2&#x27;</span>);<br>    process.nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4&#x27;</span>);<br>        resolve();<br>    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5&#x27;</span>)<br>    &#125;)<br>&#125;)<br>process.nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;6&#x27;</span>);<br>&#125;)<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;7&#x27;</span>);<br>    resolve();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;8&#x27;</span>)<br>&#125;)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;9&#x27;</span>);<br>    process.nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;10&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;11&#x27;</span>);<br>        resolve();<br>    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;12&#x27;</span>)<br>    &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><details>  <summary>点击查看答案</summary>  <pre>1 7 6 8 2 4 3 5 9 11 10 12</pre></details><ul><li><p>Promise</p><ul><li>all<br>全部成功才是成功</li><li>any<br>有一个成功就是成功</li><li>race<br>最先完成的算完成</li><li>allSettled<br>全部处理完才结束</li></ul></li><li><p>垃圾回收</p><ul><li>引用次数清除<br>计算对象引用次数，为0的清除。</li><li>标记清除<br>活动对象打标，未标记的清除。</li></ul></li><li><p>模块化<br>将多个不同的文件，按照一定规范进行划分，得到的一个个块。</p><ul><li>规范<ul><li>CommonJS<br>同步加载<br>可缓存<br>值的<strong>拷贝</strong>，内部值改变不会影响到外部<br><code>module.exports、exports.xxx = xxx、require</code></li><li>AMD<br>异步加载<br><code>define([module], callback)、require([module], callback)</code></li><li>CMD<br>可同步(<code>require</code>)也可异步(<code>require.async</code>)加载<br>使用时才加载(和AMD的区别)<br><code>define(function(require, exports, module) &#123;&#125;)</code></li><li>ESM<br>ES6新规范<br>静态化，<strong>编译</strong>时就确定依赖关系<br>值的<strong>引用</strong><br><code>export default、 export const xxx = xx、import xx from xx</code></li><li>UMD<br>通用模块规范，可以在任何环境运行<br>立即执行函数内实现前面各个规范的兼容</li></ul></li></ul></li><li><p>性能优化</p><ul><li>代码优化<ul><li>防抖节流</li><li>cssText</li><li>重绘重排</li><li>懒加载</li><li>事件委托</li></ul></li><li>构建优化<ul><li>代码压缩</li><li>gzip</li><li>cdn</li></ul></li><li>其他<ul><li>http2</li><li>图片压缩</li><li>减少请求</li><li>缓存</li></ul></li></ul></li><li><p><code>this</code>指向</p><ul><li>普通函数<br>不作为对象属性时，<code>this</code>指向<strong>全局</strong></li><li>方法函数<br>作为对象方法，<code>this</code>执行<strong>对象</strong></li><li>构造函数<br>作为构造函数，执行<code>new</code>前创建对象，<code>this</code>指向该<strong>对象</strong></li><li><code>call</code>、<code>apply</code>、<code>bind</code><br>指向传入<strong>对象</strong></li></ul></li><li><p><code>json</code><br><code>function</code>、<code>undefined</code>会被忽略<br><code>NaN</code>变为<code>null</code></p></li><li><p><code>offsetWidth</code>、<code>clientWidth</code>、<code>scrollWidth</code><br>clientWidth = width + padding<br>offsetWidth = width + padding + borderWidth + scrollBarWidth<br>scrollWidth = width + padding + scrollWidth</p></li><li><p>一道奇怪的题目</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-number">1</span>);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>) </span>&#123;<br>  alert(<span class="hljs-number">5</span>);<br>&#125;<br>Foo.getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  alert(<span class="hljs-number">2</span>);<br>&#125;;<br>Foo.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  alert(<span class="hljs-number">3</span>);<br>&#125;;<br><span class="hljs-keyword">var</span> getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  alert(<span class="hljs-number">4</span>);<br>&#125;;<br><br><span class="hljs-comment">//请写出以下输出结果：</span><br>Foo.getName();<br>getName(); <br>Foo().getName(); <br>getName();<br><span class="hljs-keyword">new</span> Foo.getName();<br><span class="hljs-keyword">new</span> Foo().getName();<br><span class="hljs-keyword">new</span> <span class="hljs-keyword">new</span> Foo().getName(); <br></code></pre></td></tr></table></figure><details>  <summary>    点击查看代码1  </summary>  <div>    2 4 1 1 2 3 3  </div></details><h2 id="结束">结束</h2><p>结束🔚。</p><blockquote><p>参考资料<br><a href="https://juejin.cn/post/6844903784229896199">从URL输入到页面展现到底发生什么？</a><br><a href="https://juejin.cn/post/7061588533214969892#heading-27">做了一份前端面试复习计划，保熟～</a><br><a href="https://juejin.cn/post/6844903512845860872#heading-3">这一次，彻底弄懂 JavaScript 执行机制</a><br><a href="https://zhuanlan.zhihu.com/p/149734572?from_voters_page=true">聊聊跨域的原理与解决方法</a><br><a href="https://www.cnblogs.com/xxcanghai/p/5189353.html">一道常被人轻视的前端JS面试题</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端基础回顾-1-原型和原型链</title>
    <link href="/2023/01/15/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-1-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2023/01/15/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE-1-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>兜兜转转工作了也有快两年了，最终还是决定拾起当初的<code>js</code>基础。<br>毕竟完全理解它才能更加深入前端这个行业，技术才能有更大的突破。</p><p>本文是重学基础的第一篇，关于<strong>原型和原型链</strong>。</p><h2 id="开始">开始</h2><p>最近想尝试阅读一下<a href="https://github.com/axios/axios">axios</a>的源码，参考大佬的<a href="https://mp.weixin.qq.com/s/GNYpgHo97xml0NxT93dHxQ">架构文章</a>，在看到第一个函数时就有点吃力 😓。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createInstance</span>(<span class="hljs-params">defaultConfig</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> Axios(defaultConfig);<br><br>  <span class="hljs-keyword">const</span> instance = bind(Axios.prototype.request, context);<br><br>  <span class="hljs-comment">// Copy axios.prototype to instance</span><br>  utils.extend(instance, Axios.prototype, context, &#123;<span class="hljs-attr">allOwnKeys</span>: <span class="hljs-literal">true</span>&#125;);<br><br>  <span class="hljs-comment">// Copy context to instance</span><br>  utils.extend(instance, context, <span class="hljs-literal">null</span>, &#123;<span class="hljs-attr">allOwnKeys</span>: <span class="hljs-literal">true</span>&#125;);<br><br>  <span class="hljs-comment">// Factory for creating new instances</span><br>  instance.create = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span>(<span class="hljs-params">instanceConfig</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> createInstance(mergeConfig(defaultConfig, instanceConfig));<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> instance;<br>&#125;<br><span class="hljs-keyword">const</span> axios = createInstance(defaults)<br><br>axios.xxx = xxx <br><span class="hljs-comment">// ...</span><br><br></code></pre></td></tr></table></figure><p>平常在使用的时候就发现，<code>axios</code>导出的实例有非常多的写法以及<code>api</code>。<br><code>axios.post()</code><br><code>axios()</code><br><code>axios.create</code><br>似乎是更改了实例的原型链关系。<br><img src="/images/前端基础回顾/原型和原型链/axios-structure.jpeg" /></p><blockquote><p>图片来源 <a href="https://mp.weixin.qq.com/s/GNYpgHo97xml0NxT93dHxQ">学习 axios 源码整体架构，打造属于自己的请求库</a></p></blockquote><h3 id="概念">概念</h3><ul><li>原型<br><code>js</code>当中，每一个对象（除了<code>null</code>）都会有一个关联对象，像是父子关系，它就是原型。<br><strong>对象</strong>都会从原型上面继承它的属性。</li><li>原型链<br>连续关联的原型即是原型链。<br>比如<code>A -&gt; B -&gt; Object</code></li><li>基础类型和引用类型<br>基础类型和引用类型的区别就是在堆栈中的<strong>存储方式</strong>不同。<br><strong>基础类型</strong>存储的是他的值。<br><strong>引用类型</strong>存储的是他的值的引用。<br>比如下面这样</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span> <br><span class="hljs-keyword">var</span> b = a <br>a = <span class="hljs-number">200</span> <br><span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">// 200 100 </span><br><br><span class="hljs-keyword">var</span> objA = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span> &#125;<br><span class="hljs-keyword">var</span> objB = objA <br>objA.a = <span class="hljs-number">200</span> <br><span class="hljs-comment">// 引用类型的值只是一个引用的地址，当实际值发生变化时，所有引用地址的值都会发生变化</span><br><span class="hljs-built_in">console</span>.log(objA.a, objB.a) <span class="hljs-comment">// 200 200</span><br></code></pre></td></tr></table></figure><ul><li>__proto__<br>所有的引用类型都有一个<code>__proto__</code>属性，一个普通的对象。<br><img src="/images/前端基础回顾/原型和原型链/proto.jpg" /></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">constructor</span>: xxx,<br>  <span class="hljs-attr">__proto__</span>: xx<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>prototype<br><code>__proto__</code>指向向了它的构造函数的<code>prototype</code>属性<br><img src="/images/前端基础回顾/原型和原型链/prototype.jpg" /></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">constructor</span>: xxx,<br>&#125;<br></code></pre></td></tr></table></figure><p>根据上面的图可以看到<code>const obj = &#123;&#125;</code>的<code>__proto__</code>指向的就是构造函数<code>Object</code>的<code>prototype</code><br>当试图去获取一个当前值上不存在的某个属性时，它会去它的<code>__proto__</code>上找，一直往上，直到为<code>null</code>为止（最顶层为<code>null</code>）。</p><blockquote><p>每个对象都有<code>__proto__</code>对象，只有函数对象才会有<code>prototype</code>对象。</p></blockquote><h4 id="构造函数的原型链关系">构造函数的原型链关系</h4><p>记录一下完整的构造函数的原型链关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>&#123;<br><br>  name = <span class="hljs-string">&quot;parent&quot;</span><br><br>  <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name <br>  &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span> </span>&#123;<br><br>  name = <span class="hljs-string">&quot;child&quot;</span><br><br>&#125;<br><br><span class="hljs-keyword">const</span> parent = <span class="hljs-keyword">new</span> Parent()<br><span class="hljs-keyword">const</span> child = <span class="hljs-keyword">new</span> Child() <br><br><span class="hljs-built_in">console</span>.log(parent.__proto__ === Parent.prototype) <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(child.__proto__ === Child.prototype) <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(child.__proto__ === Parent.prototype) <span class="hljs-comment">// false </span><br><span class="hljs-built_in">console</span>.log(Child.prototype === Parent.prototype) <span class="hljs-comment">// false  </span><br><span class="hljs-built_in">console</span>.log(Child.__proto__ === Parent) <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(Parent.prototype.__proto__ === <span class="hljs-built_in">Object</span>.prototype) <span class="hljs-comment">// true </span><br><br></code></pre></td></tr></table></figure><blockquote><p>图片来源 <a href="https://juejin.cn/post/6844903989088092174">轻松理解JS 原型原型链</a></p></blockquote><h3 id="小练习">小练习</h3><ol><li>parent.<strong>proto</strong> === Parent.prototype</li></ol><details>  <summary>点击显示答案</summary>  <pre>true</pre></details>  <ol start="2"><li>child.<strong>proto</strong> === Child.prototype</li></ol><details>  <summary>点击显示答案</summary>  <pre>true</pre></details><ol start="3"><li>Child.<strong>proto</strong> === Parent</li></ol><details>  <summary>点击显示答案</summary>  <pre>true</pre></details><ol start="4"><li>Parent.prototype.<strong>proto</strong> === Object.prototype</li></ol><details>  <summary>点击显示答案</summary>  <pre>true</pre></details><ol start="5"><li>Parent.prototype.constructor === Parent</li></ol><details>  <summary>点击显示答案</summary>  <pre>true</pre></details><ol start="6"><li>Object.prototype.<strong>proto</strong> = ?</li></ol><details>  <summary>点击显示答案</summary>  <pre>null</pre></details><ol start="7"><li>Function.prototype.<strong>proto</strong> = ?</li></ol><details>  <summary>点击显示答案</summary>  <pre>Object.prototype</pre></details><h3 id="继承">继承</h3><ul><li>构造函数继承</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name <br>&#125;<br>Parent.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span>(<span class="hljs-params">name, subName</span>) </span>&#123;<br><br>&#125;<br><span class="hljs-comment">// 原型执行Parent，可以访问到Parent的原型上的属性</span><br>Child.prototype = <span class="hljs-keyword">new</span> Parent()<br><span class="hljs-comment">// 构造器还是指向自己</span><br>Child.prototype.constructor = Child <br></code></pre></td></tr></table></figure><ul><li>寄生组合继承</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name <br>&#125;<br>Parent.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span>(<span class="hljs-params">name, subName</span>) </span>&#123;<br>  <span class="hljs-comment">// 唯一和上面不一样的地方</span><br>  <span class="hljs-comment">// 为了能将参数正确赋值给构造函数</span><br>  Parent.call(<span class="hljs-built_in">this</span>, name)<br>  <span class="hljs-built_in">this</span>.subName = subName<br>&#125;<br><span class="hljs-comment">// 原型执行Parent，可以访问到Parent的原型上的属性</span><br>Child.prototype = <span class="hljs-keyword">new</span> Parent()<br><span class="hljs-comment">// 构造器还是指向自己</span><br>Child.prototype.constructor = Child <br></code></pre></td></tr></table></figure><h2 id="总结">总结</h2><h3 id="四准则">四准则</h3><ol><li>js分为函数对象和普通对象，每个对象都有__proto__属性，但是只有函数对象才有prototype属性</li><li>Object、Function都是js内置的函数, 类似的还有我们常用到的Array、RegExp、Date、Boolean、Number、String</li><li>属性__proto__是一个对象，它有两个属性，constructor和__proto__</li><li>原型对象prototype有一个默认的constructor属性，用于记录实例是由哪个构造函数创建</li></ol><h2 id="结束">结束</h2><p>结束🔚。</p><blockquote><p>参考资料<br><a href="https://juejin.cn/post/6844903989088092174">轻松理解JS 原型原型链</a><br><a href="https://juejin.cn/post/7061588533214969892#heading-32">做了一份前端面试复习计划，保熟～</a><br><a href="https://mp.weixin.qq.com/s/GNYpgHo97xml0NxT93dHxQ">学习 axios 源码整体架构，打造属于自己的请求库</a><br><a href="https://juejin.cn/post/6934498361475072014#heading-2">面不面试的，你都得懂原型和原型链</a><br><a href="https://github.com/vortesnail/blog/issues/1">原型链继承图解</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>basic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端项目gh-pages部署</title>
    <link href="/2023/01/14/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AEgh-pages%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/01/14/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AEgh-pages%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="前端项目gh-pages部署">前端项目gh-pages部署</h2><h2 id="开始">开始</h2><p>最近的自己项目需要部署到<code>github-pages</code>，需要用到<a href="https://github.com/tschaub/gh-pages">gh-pages</a>这个包。</p><h3 id="命令行">命令行</h3><ul><li>安装依赖<br><code>yarn add gh-pages -D</code></li><li>package添加命令<br><code>deploy: gh-pages -d dist</code></li><li>配置<br>因为项目使用的是<code>github actions</code>，故在<code>yml</code>配置文件中添加。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">🚀</span><br>  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>    <span class="hljs-string">yarn</span> <span class="hljs-string">deploy</span><br></code></pre></td></tr></table></figure><ul><li>提交<br>但是发现报错了。<br><img src="/images/前端项目gh-pages部署/auth-error.jpg" /></li></ul><p>看是报了<code>auth</code>错误。</p><h3 id="github-action">github action</h3><p>后面发现可以直接使用<code>github action</code>完成。</p><ul><li>获取<code>access token</code><br>个人<code>github</code>的<code>settings/Developer settings/Personal access tokens/Tokens(classic)</code><br>Grenerate new token<br><img src="/images/前端项目gh-pages部署/access-token.jpg" /><br><img src="/images/前端项目gh-pages部署/access-token-detail.jpg" /></li></ul><p>生成新<code>token</code>，并复制。</p><ul><li>设置项目环境变量<br>在项目中<code>Settings/Secrets and variables/Actions</code><br>创建新的环境变量，例子中环境变量的名字为<code>DEPLOY_TOKEN</code><br><img src="/images/前端项目gh-pages部署/secrets.jpg" /></li><li>项目工作流设置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">🚀</span><br>  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    git remote set-url origin https://git:$&#123;GITHUB_TOKEN&#125;@github.com/your-github-username/your-registry-name.git</span><br><span class="hljs-string">    npx gh-pages -d dist -u &quot;github-actions-bot &lt;support+actions@github.com&gt;&quot;</span><br><span class="hljs-string"></span>  <span class="hljs-attr">env:</span><br>    <span class="hljs-attr">GITHUB_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>上面的<code>secrets.DEPLOY_TOKEN</code>即为刚刚设置的<strong>环境变量</strong>。<br><code>your-github-username</code>是你的github用户名。<br><code>your-registry-name</code>是你的仓库名。</p><ul><li>提交部署<br>以上即可完成项目的<code>gh-pages</code>部署。</li></ul><h2 id="结束">结束</h2><p>关于部署完整的例子，可以参考我项目的<a href="https://github.com/food-billboard/create-chart/blob/main/.github/workflows/static-deploy.yml">配置文件</a>。</p><blockquote><p>参考链接<br><a href="https://juejin.cn/post/6844903977897705485">如何部署create-react-app项目到Github pages步骤</a><br><a href="https://juejin.cn/post/7054872300922863624">GitHub Actions 实现提交代码自动打包部署到 gh-pages</a><br><a href="https://github.com/tschaub/gh-pages/issues/345">How to use with GitHub Actions?</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deploy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>umi环境变量</title>
    <link href="/2023/01/13/umi%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2023/01/13/umi%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1>umi环境变量</h1><h2 id="开始">开始</h2><p>umi平常都有用，关于他的环境变量，这里做一个踩坑记录。</p><p>自定义环境变量很容易。</p><h3 id="env文件">.env文件</h3><p>在根目录新增<code>.env</code>文件，将需要的环境变量设置进去即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">PORT=8000<br>CUSTOM=123<br></code></pre></td></tr></table></figure><h3 id="cross-env">cross-env</h3><p>根据不同的命令设置不同的环境变量<br>可以通过<code>cross-env</code>来进行设置。<br><code>cross-env PORT=8000 CUSTOM=123 umi dev</code></p><h3 id="坑">坑</h3><p>但是需要注意的一点是，如果只是像上面这样设置了是没有办法在项目中通过<code>process.env.xxx</code>来访问的。<br>你需要在配置文件中进行透传覆盖才能访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> config = &#123;<br>  <span class="hljs-attr">define</span>: &#123;<br>    <span class="hljs-string">&#x27;process.env.PORT&#x27;</span>: process.env.PORT,<br>    <span class="hljs-string">&#x27;process.env.CUSTOM&#x27;</span>: process.env.CUSTOM,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样才可以在项目中访问到。</p><h2 id="结束">结束</h2><p>结束🔚。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>umi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装修小记</title>
    <link href="/2023/01/11/%E8%A3%85%E4%BF%AE%E5%B0%8F%E8%AE%B0/"/>
    <url>/2023/01/11/%E8%A3%85%E4%BF%AE%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>装修小记</h1><h2 id="装前思考">装前思考</h2><h3 id="家庭结构">家庭结构</h3><ul><li>3人或5人住</li><li>基本无留宿情况</li><li>长期住</li><li>需要有办公区</li><li>有健身需求</li><li>呼叫铃（老人需求）</li><li>不需要客卧</li></ul><h3 id="生活习惯">生活习惯</h3><h4 id="睡眠">睡眠</h4><ul><li>需要有质量高的睡眠（隔音、遮阳）</li><li>卧室最好可以有电视</li></ul><h4 id="卫浴">卫浴</h4><ul><li>至少两卫</li><li>干湿分离</li><li>浴霸</li><li>无需智能卫浴</li></ul><h4 id="着装">着装</h4><ul><li>贴墙镜</li><li>衣帽间需要稍微大一点的位置</li><li>挂衣服不是叠放衣服</li><li>需要有一个放置穿过衣服的柜子</li></ul><h4 id="厨房">厨房</h4><ul><li>L型</li><li>处理食材、备餐、加工动线长度之和最好不要超过6米</li></ul><h4 id="用餐">用餐</h4><h4 id="休闲">休闲</h4><ul><li>看电影及打游戏（投影）</li><li>看电视（电视机）</li><li>健身（健身房）</li><li>代码（工作区）</li><li>阳台绿植</li></ul><h4 id="家务习惯">家务习惯</h4><ul><li>晾衣区（可升降衣架）</li><li>洗衣机应该是和晾衣服离得很近的吧</li><li>晾衣附近是否可以多一个干衣区</li></ul><h3 id="家具家电">家具家电</h3><ul><li>客厅电视</li><li>客厅空调</li><li>卧室电视</li><li>卧室空调</li><li>卧室或者客厅投影</li><li>直饮机</li><li>沙发茶几</li><li>电视柜</li></ul><h3 id="动线规划">动线规划</h3><ul><li>大家庭</li><li>家里做饭</li><li>中餐</li><li>几乎无访客</li><li>排序：吃饭、看电视、睡觉、上厕所、洗澡、打游戏、晾衣服。。。</li><li>父母在家家务做饭、儿女下班回家吃饭，看电视、聊天、娱乐，上厕所，洗澡睡觉。<br>偶尔周末节假日晒太阳吃烧烤。</li><li>主卧卫生间、客卧<strong>尽量</strong>卫生间、公共卫生间</li><li>衣帽间（或衣柜）、父母仅卧室衣柜</li><li>书房（可不要），但是需要一个电脑办公位（无过分类书房环境需求）</li></ul><h2 id="预算规划">预算规划</h2><h3 id="基础装修">基础装修</h3><p>30%：施工+辅料，也就是”水电瓦木油安装“六大基础工序；</p><h3 id="主材">主材</h3><p>30% - 35%：门窗、瓷砖、地板、全屋定制、厨卫吊灯等；</p><h3 id="家电设备">家电设备</h3><p>20%：中央空调、地暖、新风、电视、厨房电器等；</p><h3 id="家具软装">家具软装</h3><p>15%：床、沙发、桌椅、窗帘等。</p><h2 id="房屋结构">房屋结构</h2><p>此部分根据最后实际房屋接口进行参考。<br>这里贴下理想结构。</p><h2 id="装修流程">装修流程</h2><h3 id="完整详细">完整详细</h3><img src="/images/装修小记/装修流程图.jpeg" /> <h3 id="前期准备">前期准备</h3><ul><li>造价评估</li><li>预算分配</li><li>功能布局</li></ul><h3 id="拆除与新建">拆除与新建</h3><h4 id="现场保护">现场保护</h4><ul><li>装修材料保护</li><li>如果部分区域是不需要装修的，那么需要做一定的保护，比如原先的地砖，使用石膏板垫底。</li></ul><h4 id="拆除">拆除</h4><ul><li>拆除原生存在的白墙</li><li>按照<strong>设计图纸</strong>要求，对相关不符合的墙体进行拆除</li></ul><h4 id="砌墙">砌墙</h4><ul><li>新增墙体</li><li>最好用钢筋混凝土浇地梁，增加稳定性。</li><li>新旧墙体链接增加钢筋保证稳定性。</li><li>双面抹灰挂<strong>钢网</strong><br><img src="/images/装修小记/房梁砌墙形状.jpeg" /></li><li>门洞区域用工字钢或现浇过梁<br><img src="/images/装修小记/门洞区域.webp" /></li></ul><h4 id="墙地固涂刷">墙地固涂刷</h4><p>使墙地面更稳定。<br><a href="https://baijiahao.baidu.com/s?id=1744571166544438231&amp;wfr=spider&amp;for=pc">参考</a>。</p><h4 id="定制柜测量">定制柜测量</h4><p>因为定制柜制作需要时间，提前测量定做。</p><h4 id="厨卫设备定做">厨卫设备定做</h4><h3 id="水电工程">水电工程</h3><h4 id="水电交底">水电交底</h4><p>集合橱柜、空调、地暖、集成灶中央净水厂家，确定使用方式及摆放安装位置，一起进行水电定位，由厂家和水电工进行水电交底（用粉笔在墙上标注好、有图有序号 ）</p><h4 id="改造水电">改造水电</h4><h5 id="顺序">顺序</h5><ul><li>水电交底</li><li>水路改造</li><li>水电验收</li><li>挡水条安装</li><li>地暖（应该不用装地暖吧）</li><li>窗框安装</li><li>新风、中央空调安装（应该不用吧）</li><li>购买水泥、砂浆、瓷砖、收边条、石材、地漏等</li></ul><h5 id="注意">注意</h5><ul><li>冷热水管间距150mm</li><li>左热右冷</li><li>冷热水管都用保温棉包裹</li><li>水电不能同槽</li><li>强弱电交接处需要用<strong>锡箔纸</strong>包裹避免强弱电之间的干扰</li><li>水管每60公分需要用卡扣扣住固定起来，避免水压过大导致水管晃动。</li><li>水路<strong>走顶</strong>不走地，走竖不走横</li><li>不要开<strong>横槽</strong></li><li><strong>材料符合国家规范</strong></li></ul><h3 id="工程进度验收">工程进度验收</h3><h3 id="泥工">泥工</h3><h4 id="墙地面找平、回填">墙地面找平、回填</h4><h5 id="卫生间注意">卫生间注意</h5><ul><li>回填之前需要<strong>涂防水</strong></li><li>回填之前，排污都要带<strong>存水弯</strong></li><li>排污水管<strong>青石</strong>砖堆砌并用<strong>黄沙</strong>夯实，再用<strong>陶粒</strong>回填</li><li>回填后挂<strong>钢网</strong></li><li>防水层和水泥层中间做一个<strong>暗藏地漏</strong></li><li>下水管道<strong>隔音棉</strong>处理</li><li>水管包裹处用<strong>M型钢网</strong>抹平</li><li>地漏是<strong>最低点</strong>，<strong>梯形排水</strong>处理，最好在砖<strong>正中间</strong>。</li><li>浴室柜采用<strong>墙排</strong>。</li></ul><h4 id="防水、闭水">防水、闭水</h4><ul><li>卫生间<br>高度<strong>1800mm</strong><br>背面有衣柜需涂满墙，衣柜背面涂防潮。<br>回填前一次，之后一次<br><strong>渗透性的柔性防水</strong></li><li>阳台<br>高度<strong>30mm</strong></li><li>厨房<br>高度<strong>1000mm</strong></li></ul><h4 id="地漏、门槛石">地漏、门槛石</h4><h4 id="贴砖">贴砖</h4><ul><li>瓷砖、地砖、踢脚线</li><li>验收<strong>水平</strong>、<strong>平整度</strong>、<strong>空鼓</strong></li></ul><h4 id="勾缝">勾缝</h4><p>应该和<strong>填缝</strong>一个道理吧<br><a href="https://baike.baidu.com/item/%E5%8B%BE%E7%BC%9D/11051483?fr=aladdin">勾缝</a></p><h4 id="窗台石（可选）">窗台石（可选）</h4><h4 id="煤气管道改线（不确定）">煤气管道改线（不确定）</h4><h4 id="木材购买及成品木具定做">木材购买及成品木具定做</h4><h3 id="木工">木工</h3><h4 id="柜子">柜子</h4><p>一般都是<strong>定制柜</strong><br>衣柜、橱柜、鞋柜、储物柜</p><h4 id="吊顶">吊顶</h4><ul><li>轻钢龙骨</li><li>龙骨上有一层基层固定</li><li>石膏板吊顶七字转角处，用一整块切割。</li><li>固定螺丝涂防锈剂</li><li>每块石膏板的接缝处都要开<strong>V型槽</strong>，用<strong>填缝剂</strong>处理接缝。</li></ul><h4 id="造型墙">造型墙</h4><p>参考这个<a href="https://www.zhihu.com/question/23190694/answer/89808492">艺术形式的造型墙</a>。</p><h3 id="油工">油工</h3><h4 id="墙面找方">墙面找方</h4><ul><li>石膏墙面找平</li><li>腻子粉<strong>两遍</strong></li><li>装门</li><li>第三遍腻子粉</li><li>高光打磨</li><li>先一层底漆</li><li>如果是<strong>墙布</strong>则直接贴墙布（否则再刷<strong>两层面漆</strong>）<br><img src="/images/装修小记/墙面处理汇总.jpeg" /></li></ul><h4 id="柜体装饰面喷漆">柜体装饰面喷漆</h4><h3 id="安装">安装</h3><h4 id="厨卫">厨卫</h4><h4 id="地板、踢脚线">地板、踢脚线</h4><h4 id="窗台石">窗台石</h4><h4 id="门、垭口、窗套">门、垭口、窗套</h4><h4 id="定制柜">定制柜</h4><h4 id="开关、插座、灯具">开关、插座、灯具</h4><h3 id="软装">软装</h3><img src="/images/装修小记/装修流程.webp" /><h2 id="注意事项">注意事项</h2><h3 id="装修公司">装修公司</h3><ol><li>仔细核验报价单</li></ol><ul><li>故意漏报装修项</li><li>大项拆成小项让价格看起来低</li><li>材料的型号规格写清楚</li></ul><ol start="2"><li>禁止恶意增项</li></ol><ul><li>业主不更改设计得情况下应该是<strong>零增项</strong></li></ul><ol start="3"><li>工期</li></ol><ul><li>明确工期时间</li><li>严格限制工期延期的问题</li></ul><ol start="4"><li>设计图纸</li></ol><ul><li>不仅限于详细的平面图纸</li><li>需要有详细的效果图纸</li></ul><ol start="5"><li>售后服务哪个更好</li><li><strong>签约注意事项</strong></li></ol><ul><li>查看合同是不是工商部门统一印发的正规合同</li><li>付款比例一定要明确<br>开工付30%，瓦工结束付30%，油工结束付30%，全部竣工付尾款10%，水电单独结算</li><li>施工工期和延期的责任要明确<br>延期赔钱</li><li>要明确出现施工质量问题时解决的方案<br>出问题的赔付细则</li><li>要明确出现施工质量问题时解决的方案</li><li>明确竣工后的保修条款<br>一般来说，水电、防水隐蔽工程保修5年，其他施工工程保修2年</li></ul><h3 id="装修半包">装修半包</h3><h4 id="包含内容">包含内容</h4><p>水管、电线、电管、线盒、沙子、水泥、腻子、钉子、石膏板、乳胶漆、防水、勾缝剂等等</p><h5 id="客户购买">客户购买</h5>  <img src="/images/装修小记/半包材料汇总.webp" /> <h5 id="注意-2">注意</h5><p>必须白纸黑字把材料的<strong>品牌、型号、价格</strong>写清楚<br>在签装修合同的时候，一定要注意哪些材料是装修公司买，哪些需要业主自己购买。做到“白纸黑字”，把材料的品牌型号和规格都明确下来<br>装修报价：我们要留意报价表上是否详细，有没有增项、漏项、重复收费项等</p><h3 id="合同签订">合同签订</h3><blockquote><p>以下均为个人观点</p></blockquote><ol><li>装修过程中出现工人受伤等情况由乙方全权负责。</li><li>出现延期的情况的赔付金额，时间计算规则（节假日是否算在内）</li><li>负责的各个材料的清单（品牌、型号、数量），以及使用非对应材料的赔付规则。</li><li>是否已提供所有的设计图纸，效果图</li><li>甲乙双方交流在工作时间找不到人的情况如何处理</li><li>付款的流程（什么时间付多少比例的款）</li><li>保证在签订后，甲方不更改的情况下，不超过开始的预算金额</li><li>是否虚报了装修面积</li><li>明确建材的<strong>损耗</strong></li><li>保修细节</li><li>两份合同必须保证一致，后续必要<strong>变更</strong>，需要再出具两方合同</li><li>与设计不符的情况</li></ol><h3 id="设计图注意">设计图注意</h3><h3 id="少拆改">少拆改</h3><p>减少拆改就是在省钱，如果房屋结构整体没有问题的话尽量少拆改。</p><h2 id="材料">材料</h2><h3 id="电线">电线</h3><p>家用线路正常为<strong>2.5</strong>平方铜芯线，空调、热水器正常为<strong>4-6</strong>平方铜芯线，所有的电线必须用PVC电管铺设<br>电管PVC、水管PPR。</p><h3 id="乳胶漆">乳胶漆</h3><p>经济实惠</p><h3 id="石膏线">石膏线</h3><p>经济实惠，适合法式风、北欧风、轻奢风</p><h3 id="窗户">窗户</h3><p>静音窗</p><h3 id="背景墙">背景墙</h3><p>选择不同类型的背景墙，不一定贵就好。</p><h3 id="瓷砖">瓷砖</h3><ul><li>异型砖<br>好看，贵，可以小范围</li><li>木纹砖<br>好看，贵</li><li>文化砖<br>贵</li><li>马赛克<br>贵</li><li>玻璃砖<br>好看，贵，可以小范围</li></ul><h4 id="常见规格砖">常见规格砖</h4><p>不正常规格砖的施工费比较高。<br>常见规格如下：</p><blockquote><p>墙砖：300*300、300*600<br>地砖：300*300、600*600、800*800</p></blockquote><h3 id="木材">木材</h3><!-- 柜体 --><h2 id="结束">结束</h2><p>先这样把，后面有想到啥再补充。</p><h2 id="参考">参考</h2><p><a href="https://www.zhihu.com/question/33602748/answer/1338557186">装修房子有什么顺序和流程</a><br><a href="https://zhuanlan.zhihu.com/p/465614055">装修全系列干活~</a><br><a href="https://www.zhihu.com/people/18662821621/posts">装修用户相关好文</a><br><a href="https://zhuanlan.zhihu.com/p/199186378">120㎡的房子装修只花6万？不信！（含装修省钱攻略）</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA3ODY5MzQxNg==&amp;mid=2668195027&amp;idx=2&amp;sn=b630d7a703350bab87fa5f35e828d6e7&amp;chksm=85431994b2349082560396acf8b808ee35bcc5aa3e188aefa72aca4f8137c879a2a5929f3537&amp;scene=21#wechat_redirect">【干货】水电改造全攻略！</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA3ODY5MzQxNg==&amp;mid=2668232093&amp;idx=1&amp;sn=2ebb10674c6f00f4f11e8b0de2a8a139&amp;chksm=854388dab23401cc4da0b337bb0c2cd1fd5468ada4400e01bed35fc244efdfe2fac350ac6048&amp;scene=21#wechat_redirect">哪有什么买装修建材经验，不都是踩坑踩出来的…</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA3ODY5MzQxNg==&amp;mid=2668191454&amp;idx=1&amp;sn=75840a40435b0e80afca2f8bfa15f2ed&amp;chksm=85432b99b234a28f8cb6215fe57ca88947d4c1ab396f23d516b399b3813a8dadcfc60e2e0e3a&amp;scene=21#wechat_redirect">照着这份清单买家电，靠谱！</a><br><a href="https://www.zhihu.com/question/495225083/answer/2207491241">第一次装修，该从哪里下手？-装小蜜监理王志峰</a><br><a href="https://www.zhihu.com/question/23190694/answer/89808492">电视墙不想做太复杂，简约的设计如何做得出彩？</a></p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏设计器开发-多选拖拽</title>
    <link href="/2023/01/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E5%A4%9A%E9%80%89%E6%8B%96%E6%8B%BD/"/>
    <url>/2023/01/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E5%A4%9A%E9%80%89%E6%8B%96%E6%8B%BD/</url>
    
    <content type="html"><![CDATA[<h1>数据可视化大屏设计器开发-多选拖拽</h1><h2 id="开头">开头</h2><p>本文是数据可视化开始的开发细节第五章。关于画布中的元素的各种鼠标拖拽操作。</p><blockquote><p>简单声明<br>本人只是一个菜鸡，以下方法仅个人思路，如有错误，轻喷🙏🏻 。</p></blockquote><blockquote><p>开头说明<br>下面所说的<strong>元素</strong>表示的是<strong>组或者组件</strong>的简称。</p></blockquote><h2 id="开始">开始</h2><p>大屏设计当中，不乏需要调整图表组件的<strong>位置</strong>和<strong>尺寸</strong>。<br>相较于网页低代码，图表大屏低代码可能需要更复杂的操作，比如嵌套<strong>成组</strong>、<strong>多选</strong>、<strong>单元素拖拽缩放</strong>、<strong>多元素拖拽缩放</strong>。<br>并且需要针对鼠标的动作做相应的区分，当中包含了相当的细节，这里就一一做相应的讲解。</p><h3 id="涉及的依赖">涉及的依赖</h3><ul><li><p>react-rnd<br><a href="https://github.com/bokuweb/react-rnd">react-rnd</a>是一个包含了拖拽和缩放两个功能的<code>react</code>组件，并且有非常丰富的配置项。<br>内部是依赖了拖拽(<a href="https://github.com/react-grid-layout/react-draggable">react-draggable</a>)和缩放（<a href="https://github.com/bokuweb/re-resizable">re-resizable</a>）两个模块。<br>奈何它并没有内置多元素的响应操作，本文就是针对它来实现对应的操作。</p></li><li><p>react-selecto<br><a href="https://github.com/daybrush/selecto/tree/master/packages/react-selecto">react-selecto</a>是一个简单的简单易用的多选元素组件。</p></li><li><p>eventemitter3<br><a href="https://github.com/primus/eventemitter3">eventemitter3</a>是一个自定义事件模块，能够在任何地方触发和响应自定义的事件，非常的方便。</p></li></ul><h3 id="相关操作">相关操作</h3><h4 id="多选">多选</h4><p>画布当中可以通过鼠标点击拖拽形成选区，选区内的元素即是被选中的状态。</p><p>这里即可以使用<code>react-selecto</code>来实现此功能。<br><img src="/images/数据可视化大屏设计器开发/selecto-demo.gif" /></p><p>从图上操作可以看到，在选区内的元素即被选中（会出现黑色边框）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> ReactSelecto <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-selecto&#x27;</span>;<br><br><span class="hljs-keyword">const</span> Selecto = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ReactSelecto</span></span></span><br><span class="hljs-tag"><span class="xml">      // 会被选中元素的父容器 只有这个容器里的元素才会被选中  </span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">dragContainer</span>=<span class="hljs-string">&#123;</span>&#x27;#<span class="hljs-attr">container</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="xml">      // 被选择的元素的<span class="hljs-attr">query</span> </span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">selectableTargets</span>=<span class="hljs-string">&#123;[</span>&#x27;<span class="hljs-attr">.react-select-to</span>&#x27;]&#125;</span></span><br><span class="hljs-tag"><span class="xml">      // 表示元素有被选中的百分比为多少时才能被选中</span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">hitRate</span>=<span class="hljs-string">&#123;10&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      // 当已经存在选中项时，按住指定按键可进行继续选择  </span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">toggleContinueSelect</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">shift</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="xml">      // 可以通过点击选择元素</span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">selectByClick</span></span></span><br><span class="hljs-tag"><span class="xml">      // 是否从内部开始选择（？）</span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">selectFromInside</span></span></span><br><span class="hljs-tag"><span class="xml">      // 拖拽的速率（不知道是不是这个意思）</span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">ratio</span>=<span class="hljs-string">&#123;0&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      // 选择结束</span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onSelectEnd</span>=<span class="hljs-string">&#123;handleSelectEnd&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ReactSelecto</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里有几个需要注意的地方。</p><ol><li>操作互斥<br>画布当中的多选和拖拽都是通过鼠标左键来完成的，所以当一个元素是被选中的时候，鼠标想从元素上开始拖拽选择组件是不被允许的，此时应该是拖拽元素，而不是多选元素。</li></ol><p>而元素如果没有被<strong>选中</strong>时，上面的操作则变成了多选。</p><img src="/images/数据可视化大屏设计器开发/rnd-select.gif" />  <ol start="2"><li>内部选中<br>画布当中有<strong>组</strong>的概念，它是一个组与组件无限嵌套的结构，并且可以单独选中组内的元素。<br>当选中的是<strong>组内</strong>的元素时，即说明最外层的组是被<strong>选中</strong>的状态，同样需要考虑上面所说的<strong>互斥</strong>问题。</li></ol><h4 id="单元素拖拽缩放">单元素拖拽缩放</h4><p>单元素操作相对简单，只需要简单使用<code>react-rnd</code>提供的功能即可完成。<br><img src="/images/数据可视化大屏设计器开发/single-rnd.gif" /></p><h4 id="多元素拖拽缩放">多元素拖拽缩放</h4><p>这里就是本文的重点了，结合前面介绍的几个依赖，实现一个简单的多选拖拽缩放的功能。</p><h5 id="具体思路">具体思路</h5><p>多个元素拖拽，说到底其实鼠标拖拽的还是一个元素，就是<strong>鼠标拖动</strong>的那一个元素。<br>而<strong>其余</strong>被选中的元素，仅仅需要根据被拖动的元素的尺寸位置变动来做相应的<strong>加减处理</strong>即可。</p><h5 id="相关问题">相关问题</h5><ul><li>信息计算<br>联动元素的位置尺寸信息该如何计算。</li><li>组件间通信<br>因为每一个图表组件并非是单纯的同级关系，如果是通过层层<code>props</code>传递，免不了会有多余的刷新，造成<strong>性能</strong>问题。<br>而通过全局的<code>dva</code>状态同样在更新的时候会让组件刷新。</li><li>数据刷新<br>图表数据是来自于<code>dva</code>全局的数据，现在频繁自刷新相当于是一直更新全局的数据，同样会造成<strong>性能</strong>问题。</li><li>其他<br>一些细节问题</li></ul><h4 id="解决方法">解决方法</h4><ul><li><p>信息计算<br>关于位置的计算相对简单，只需要单纯的将操作的元素的位置和尺寸差值传递给联动组件即可。</p></li><li><p>组件间通信<br>根据上面问题的解析，可以使用<code>eventemitter3</code>来完成任意位置、层级的数据通信，并且它和<code>react</code>渲染无任何关系。</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useCallback, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> EventEmitter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;eventemitter3&#x27;</span><br><br><span class="hljs-keyword">const</span> eventemitter = <span class="hljs-keyword">new</span> EventEmitter()<br><br><span class="hljs-keyword">const</span> SonA = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;刷新&#x27;</span>)<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> listener = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(value)<br>    &#125;<br>    eventemitter.addListener(<span class="hljs-string">&#x27;change&#x27;</span>, listener)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      eventemitter.removeListener(<span class="hljs-string">&#x27;change&#x27;</span>, listener)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>son A<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  )<br><br>&#125;<br><br><span class="hljs-keyword">const</span> SonB = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> handleClick = useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>    eventemitter.emit(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-string">&#x27;son B&#x27;</span>)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>son B<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  )<br><br>&#125;<br><br><span class="hljs-keyword">const</span> Parent = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SonA</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SonB</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行上面的例子可以发现，点击<code>SonB</code>组件的按钮，可以让<code>SonA</code>接收到来自其的数据，并且并没有触发<code>SonA</code>的刷新。<br>需要<strong>接收数据</strong>的组件只需要监听(<code>addListener</code>)指定的事件即可，比如上面的<code>change</code>事件。<br>而需要<strong>发送数据</strong>的组件则直接发布(<code>emit</code>)事件即可。<br>这样就避免了一些不必要的刷新。<br><img src="/images/数据可视化大屏设计器开发/eventemitter3.gif" /></p><ul><li>数据刷新<br>频繁刷新全局数据，会导致所有依赖其数据的组件都会刷新，所以考虑为需要刷新数据的组件在内部单独维护一份状态。<br>当<strong>开始操作</strong>时，记录下状态，标识开始使用<strong>内部状态</strong>表示图表的信息，<strong>结束操作</strong>时处理下内部数据状态，将数据更新到全局中去。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useMemo, useEffect, useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> EventEmitter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;eventemitter3&#x27;</span><br><br><span class="hljs-keyword">const</span> eventemitter = <span class="hljs-keyword">new</span> EventEmitter()<br><br><span class="hljs-keyword">const</span> Component = <span class="hljs-function">(<span class="hljs-params">props: &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">  position: &#123;left: <span class="hljs-built_in">number</span>, top: <span class="hljs-built_in">number</span>&#125;</span></span><br><span class="hljs-params"><span class="hljs-function">&#125;</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> [ position, setPosition ] = useState(&#123;<br>    <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">top</span>: <span class="hljs-number">0</span><br>  &#125;)<br><br>  <span class="hljs-keyword">const</span> isDrag = useRef(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-keyword">const</span> dragStart = <span class="hljs-function">() =&gt;</span> &#123;<br>    isDrag.current = <span class="hljs-literal">true</span> <br>    setPosition(props.position)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> drag = <span class="hljs-function">(<span class="hljs-params">position</span>) =&gt;</span> &#123;<br>    setPosition(position)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> dragEnd = <span class="hljs-function">() =&gt;</span> &#123;<br>    isDrag.current = <span class="hljs-literal">false</span> <br>    <span class="hljs-comment">// TODO </span><br>    <span class="hljs-comment">// 更新数据到全局</span><br>  &#125;<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    eventemitter.addListener(<span class="hljs-string">&#x27;dragStart&#x27;</span>, dragStart)<br>    eventemitter.addListener(<span class="hljs-string">&#x27;drag&#x27;</span>, drag)<br>    eventemitter.addListener(<span class="hljs-string">&#x27;dragEnd&#x27;</span>, dragEnd)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      eventemitter.removeListener(<span class="hljs-string">&#x27;dragStart&#x27;</span>, dragStart)<br>      eventemitter.removeListener(<span class="hljs-string">&#x27;drag&#x27;</span>, drag)<br>      eventemitter.removeListener(<span class="hljs-string">&#x27;dragEnd&#x27;</span>, dragEnd)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">left:</span> (<span class="hljs-attr">isDrag.current</span> ? <span class="hljs-attr">position</span> <span class="hljs-attr">:</span> <span class="hljs-attr">props.position</span>)<span class="hljs-attr">.left</span>,</span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">top:</span> (<span class="hljs-attr">isDrag.current</span> ? <span class="hljs-attr">position</span> <span class="hljs-attr">:</span> <span class="hljs-attr">props.position</span>)<span class="hljs-attr">.top</span></span></span><br><span class="hljs-tag"><span class="xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span>图表组件<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  )<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>上面的数据更新还可以更加优化，对于<strong>短时间</strong>的<strong>多次</strong>更新操作，可以控制一下更新频率，将多次更新合并为一次。</p></blockquote><ul><li>其他<ul><li>控制刷新<br>这里的控制刷新指的是上述的内部刷新，不需要每次都响应<code>react-rnd</code>发出的相关事件，可以做对应的节流(<code>throttle</code>)操作，减少事件触发频率。</li><li>通信冲突问题<br>因为<strong>所有的组件</strong>都需要监听拖拽的事件，包括当前被拖拽的组件，所以在传递信息时，需要把自身的<code>id</code>类似值传递，防止冲突。</li><li>组件的缩放属性<br>这里是关于前文说到的<strong>成组</strong>的逻辑相关，因为组存在<code>scaleX</code>和<code>scaleY</code>两个属性，所以在<strong>调整大小</strong>的时候，也要兼顾此属性（本文先暂时不考虑这个问题）。</li><li>单元素选中情况<br>自定义事件的监听是<strong>无差别</strong>的，当只选中了一个元素进行拖拽缩放操作时，无须触发相应的事件。</li></ul></li></ul><h4 id="最后的DEMO">最后的DEMO</h4><img src="/images/数据可视化大屏设计器开发/final-demo.gif" /><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;<br>  useState,<br>  useRef,<br>  useCallback,<br>  useMemo,<br>  useEffect<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Rnd &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-rnd&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; RndResizeCallback, RndDragCallback, RndResizeStartCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-rnd&#x27;</span><br><span class="hljs-keyword">import</span> EventEmitter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;eventemitter3&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactSelecto <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-selecto&#x27;</span><br><span class="hljs-keyword">import</span> &#123; throttle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span><br><br><span class="hljs-comment">// 大屏组件的数据类型</span><br><span class="hljs-keyword">type</span> ComponentList = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">width</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">height</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">left</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">top</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">background</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-comment">// 创建事件</span><br><span class="hljs-keyword">const</span> eventEmitter = <span class="hljs-keyword">new</span> EventEmitter()<br><span class="hljs-keyword">const</span> EVENT_MAP = &#123;<br>  <span class="hljs-attr">DRAG_START</span>: <span class="hljs-string">&quot;DRAG_START&quot;</span>,<br>  <span class="hljs-attr">DRAG</span>: <span class="hljs-string">&quot;DRAG&quot;</span>,<br>  <span class="hljs-attr">DRAG_STOP</span>: <span class="hljs-string">&quot;DRAG_STOP&quot;</span>,<br>  <span class="hljs-attr">RESIZE_START</span>: <span class="hljs-string">&quot;RESIZE_START&quot;</span>,<br>  <span class="hljs-attr">RESIZE</span>: <span class="hljs-string">&quot;RESIZE&quot;</span>,<br>  <span class="hljs-attr">RESIZE_STOP</span>: <span class="hljs-string">&quot;RESIZE_STOP&quot;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> getComponentStyle = <span class="hljs-function">(<span class="hljs-params">position: <span class="hljs-built_in">any</span>, size: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> newWidth = <span class="hljs-built_in">parseInt</span>(size.style.width) || <span class="hljs-number">20</span>;<br>  <span class="hljs-keyword">const</span> newHeight = <span class="hljs-built_in">parseInt</span>(size.style.height) || <span class="hljs-number">20</span>;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">width</span>: newWidth,<br>    <span class="hljs-attr">height</span>: newHeight,<br>    <span class="hljs-attr">left</span>: position.x,<br>    <span class="hljs-attr">top</span>: position.y,<br>  &#125;;<br>&#125;;<br><br><span class="hljs-comment">// 这里用到的 dataset 是html原生data-的属性  </span><br><span class="hljs-comment">// 用于标识组件</span><br><span class="hljs-keyword">const</span> Selecto = <span class="hljs-function">(<span class="hljs-params">props: &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">  setSelect: (value: <span class="hljs-built_in">string</span>[]) =&gt; <span class="hljs-built_in">void</span>;</span></span><br><span class="hljs-params"><span class="hljs-function">  select: <span class="hljs-built_in">string</span>[]</span></span><br><span class="hljs-params"><span class="hljs-function">&#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; setSelect, select &#125; = props;<br><br>  <span class="hljs-comment">// 这里内部控制一个状态</span><br>  <span class="hljs-comment">// 是因为不想频繁刷新选中的状态 </span><br>  <span class="hljs-comment">// 其实也没有必要</span><br>  <span class="hljs-comment">// 最后拖拽完成再更改选中状态就可以了 </span><br>  <span class="hljs-keyword">const</span> currentSelect = useRef&lt;<span class="hljs-built_in">string</span>[]&gt;([]);<br><br>  <span class="hljs-comment">// 拖拽完成更改状态</span><br>  <span class="hljs-keyword">const</span> handleSelectEnd = useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>    setSelect(currentSelect.current);<br>  &#125;, [setSelect]);<br><br>  <span class="hljs-comment">// 拖拽中  </span><br>  <span class="hljs-keyword">const</span> handleSelect = useCallback(<span class="hljs-function">(<span class="hljs-params">e: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; added, removed &#125; = e;<br><br>    <span class="hljs-keyword">const</span> toAddList = added.reduce(<span class="hljs-function">(<span class="hljs-params">acc: <span class="hljs-built_in">any</span>, element: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> select = element.dataset.id;<br>      acc.push(select)<br>      <span class="hljs-keyword">return</span> acc;<br>    &#125;, []);<br>    <span class="hljs-keyword">const</span> toRemoveList = removed.map(<span class="hljs-function">(<span class="hljs-params">element: <span class="hljs-built_in">any</span></span>) =&gt;</span> element.dataset.id);<br><br>    <span class="hljs-keyword">const</span> newSelect = [<br>      ...currentSelect.current.filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> !toRemoveList.includes(item)),<br>      ...toAddList,<br>    ];<br>    currentSelect.current = newSelect;<br>  &#125;, []);<br><br>  <span class="hljs-keyword">const</span> handleDragStart = useCallback(<br>    <span class="hljs-function">(<span class="hljs-params">e: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 组件id</span><br>        <span class="hljs-keyword">const</span> componentId = e.inputEvent.target.dataset?.id;<br>        <span class="hljs-comment">// 组件缩放的边框  </span><br>        <span class="hljs-comment">// 不排除他的话无法缩放</span><br>        <span class="hljs-keyword">const</span> componentBorder =<br>          e.inputEvent.target.className.includes(<span class="hljs-string">&#x27;react-select-to-border&#x27;</span>);<br>        <span class="hljs-comment">// 可以在这里扩展更多的判断</span><br>        <span class="hljs-comment">// 因为根据前面介绍可能会从组内元素 或者 外层不同的元素开始拖拽  </span><br>        <span class="hljs-comment">// 可能会存在冲突  </span><br><br>        <span class="hljs-keyword">if</span> (!select.includes(componentId) &amp;&amp; !componentBorder) &#123;<br>          setSelect?.([]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          e.stop();<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        e.stop();<br>      &#125;<br>    &#125;,<br>    [setSelect, select],<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ReactSelecto</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">dragContainer</span>=<span class="hljs-string">&#123;</span>&#x27;#<span class="hljs-attr">container</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">selectableTargets</span>=<span class="hljs-string">&#123;[</span>&#x27;<span class="hljs-attr">.react-select-to</span>&#x27;]&#125;</span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">hitRate</span>=<span class="hljs-string">&#123;10&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">toggleContinueSelect</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">shift</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">selectByClick</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">selectFromInside</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">ratio</span>=<span class="hljs-string">&#123;0&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onDragStart</span>=<span class="hljs-string">&#123;handleDragStart&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onSelectEnd</span>=<span class="hljs-string">&#123;handleSelectEnd&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onSelect</span>=<span class="hljs-string">&#123;handleSelect&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ReactSelecto</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> Component = <span class="hljs-function">(<span class="hljs-params">props: ComponentList &amp; &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">  isSelect: <span class="hljs-built_in">boolean</span></span></span><br><span class="hljs-params"><span class="hljs-function">  isMultiSelect: <span class="hljs-built_in">boolean</span></span></span><br><span class="hljs-params"><span class="hljs-function">  onChange: (value: Partial&lt;ComponentList&gt; &amp; &#123; id: <span class="hljs-built_in">string</span> &#125;) =&gt; <span class="hljs-built_in">void</span></span></span><br><span class="hljs-params"><span class="hljs-function">&#125;</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> &#123;<br>    isSelect,<br>    background,<br>    left,<br>    top,<br>    width,<br>    height,<br>    id,<br>    onChange,<br>    isMultiSelect<br>  &#125; = props;<br><br>  <span class="hljs-comment">// 内部的位置信息</span><br>  <span class="hljs-keyword">const</span> [statePosition, setStatePosition] = useState(&#123;<br>    <span class="hljs-attr">x</span>: left,<br>    <span class="hljs-attr">y</span>: top<br>  &#125;);<br>  <span class="hljs-comment">// 内部的尺寸信息</span><br>  <span class="hljs-keyword">const</span> [stateSize, setStateSize] = useState(&#123;<br>    width,<br>    height<br>  &#125;)<br>  <span class="hljs-comment">// 是否处于拖拽中</span><br>  <span class="hljs-keyword">const</span> [isDealing, setIsDealing] = useState&lt;<span class="hljs-built_in">boolean</span>&gt;(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-comment">// 拖拽中的组件的信息</span><br>  <span class="hljs-comment">// 使用ref是为了刷新</span><br>  <span class="hljs-keyword">const</span> dragInfo = useRef(&#123;<br>    <span class="hljs-attr">left</span>: statePosition?.x || <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">top</span>: statePosition?.y || <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">drag</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br>  <span class="hljs-comment">// 缩放的组件信息</span><br>  <span class="hljs-keyword">const</span> resizeInfo = useRef(&#123;<br>    <span class="hljs-attr">left</span>: statePosition?.x || <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">top</span>: statePosition?.y || <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">width</span>: stateSize?.width || <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">height</span>: stateSize?.height || <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">resize</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br><br>  <span class="hljs-comment">// 根据是否操作的状态使用不同的状态信息</span><br>  <span class="hljs-comment">// 位置</span><br>  <span class="hljs-keyword">const</span> position = useMemo(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isDealing) &#123;<br>      <span class="hljs-keyword">return</span> statePosition;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">x</span>: left,<br>      <span class="hljs-attr">y</span>: top<br>    &#125;;<br>  &#125;, [left, top, statePosition, isDealing]);<br><br>  <span class="hljs-comment">// 根据是否操作的状态使用不同的状态信息</span><br>  <span class="hljs-comment">// 尺寸</span><br>  <span class="hljs-keyword">const</span> size = useMemo(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isDealing) <span class="hljs-keyword">return</span> stateSize;<br>    <span class="hljs-keyword">return</span> &#123;<br>      width,<br>      height<br>    &#125;;<br>  &#125;, [width, height, stateSize, isDealing]);<br><br>  <span class="hljs-comment">// 调整大小方法</span><br>  <span class="hljs-keyword">const</span> resizeMethod: <span class="hljs-built_in">any</span> = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    e: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    direction: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    ref: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    delta: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    position: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    isSelf: <span class="hljs-built_in">boolean</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    value: ComponentList,</span></span><br><span class="hljs-params"><span class="hljs-function">    outerResizeInfo: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取到之前的位置信息</span><br>    <span class="hljs-keyword">const</span> resizePositionX = (outerResizeInfo || resizeInfo.current).left;<br>    <span class="hljs-keyword">const</span> resizePositionY = (outerResizeInfo || resizeInfo.current).top;<br><br>    <span class="hljs-keyword">let</span> newWidth = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> newHeight = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// delta </span><br>    <span class="hljs-keyword">let</span> realDeltaX =<br>      <span class="hljs-keyword">typeof</span> resizePositionX === <span class="hljs-string">&#x27;number&#x27;</span> ? position.x - resizePositionX : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> realDeltaY =<br>      <span class="hljs-keyword">typeof</span> resizePositionY === <span class="hljs-string">&#x27;number&#x27;</span> ? position.y - resizePositionY : <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 获取当前的状态信息</span><br>    <span class="hljs-keyword">const</span> newStyle = getComponentStyle(position, ref);<br>    <span class="hljs-keyword">let</span> defaultChangeConfig: Partial&lt;ComponentList&gt; = &#123;&#125;;<br><br>    <span class="hljs-comment">// 鼠标操作组件</span><br>    <span class="hljs-keyword">if</span> (isSelf) &#123;<br>      <span class="hljs-keyword">const</span> &#123; width, height &#125; = newStyle;<br>      newWidth = width;<br>      newHeight = height;<br>      defaultChangeConfig = &#123;<br>        ...newStyle<br>      &#125;;<br>    &#125; <br>    <span class="hljs-comment">// 不是鼠标操作组件</span><br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; width, height, left, top &#125; = value;<br>      <span class="hljs-keyword">let</span> realDeltaWidth = outerResizeInfo<br>        ? newStyle.width - outerResizeInfo.width<br>        : <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">let</span> realDeltaHeight = outerResizeInfo<br>        ? newStyle.height - outerResizeInfo.height<br>        : <span class="hljs-number">0</span>;<br><br>      newWidth = width + realDeltaWidth;<br>      newHeight = height + realDeltaHeight;<br>      defaultChangeConfig = &#123;<br>        <span class="hljs-attr">width</span>: newWidth,<br>        <span class="hljs-attr">height</span>: newHeight,<br>        <span class="hljs-attr">left</span>: left + realDeltaX,<br>        <span class="hljs-attr">top</span>: top + realDeltaY,<br>      &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 不考虑嵌套组</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> defaultChangeConfig<br>    <span class="hljs-comment">// TODO </span><br>    <span class="hljs-comment">// 可以继续在下面处理操作组的逻辑</span><br>  &#125;;<br><br>  <span class="hljs-comment">// 拖拽方法</span><br>  <span class="hljs-keyword">const</span> dragMethod: <span class="hljs-built_in">any</span> = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    event: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    data: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    isSelf: <span class="hljs-built_in">boolean</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    value: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    outerDragInfo: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; x, y, deltaX, deltaY &#125; = data;<br><br>    <span class="hljs-keyword">const</span> left = x;<br>    <span class="hljs-keyword">const</span> top = y;<br><br>    <span class="hljs-comment">// 鼠标操作组件</span><br>    <span class="hljs-keyword">if</span> (isSelf) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        left,<br>        top,<br>      &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 不是鼠标操作组件则使用delta来进行计算</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">left</span>: value.left + deltaX,<br>      <span class="hljs-attr">top</span>: value.top + deltaY,<br>    &#125;;<br>  &#125;;<br><br>  <span class="hljs-comment">// 多组件复合调整大小</span><br>  <span class="hljs-keyword">const</span> multiOnResize: RndResizeCallback = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    e,</span></span><br><span class="hljs-params"><span class="hljs-function">    direction,</span></span><br><span class="hljs-params"><span class="hljs-function">    ref,</span></span><br><span class="hljs-params"><span class="hljs-function">    delta,</span></span><br><span class="hljs-params"><span class="hljs-function">    position,</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> newStyle = getComponentStyle(position, ref);<br><br>    resizeInfo.current.resize = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 触发事件</span><br>    eventEmitter.emit(<br>      EVENT_MAP.RESIZE,<br>      id,<br>      e,<br>      direction,<br>      ref,<br>      delta,<br>      position,<br>      resizeInfo.current,<br>    );<br><br>    <span class="hljs-comment">// 更新自身的状态</span><br>    resizeInfo.current = &#123;<br>      ...resizeInfo.current,<br>      ...newStyle,<br>    &#125;;<br>  &#125;;<br><br>  <span class="hljs-comment">// 复合拖拽</span><br>  <span class="hljs-keyword">const</span> multiOnDrag: RndDragCallback = <span class="hljs-function">(<span class="hljs-params">event, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; x, y &#125; = data;<br><br>    dragInfo.current.drag = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 计算delta给其他联动组件使用</span><br>    <span class="hljs-keyword">const</span> deltaX = x - dragInfo.current.left;<br>    <span class="hljs-keyword">const</span> deltaY = y - dragInfo.current.top;<br><br>    <span class="hljs-comment">// 触发事件</span><br>    eventEmitter.emit(<br>      EVENT_MAP.DRAG,<br>      id,<br>      event,<br>      &#123;<br>        ...data,<br>        deltaX,<br>        deltaY,<br>      &#125;,<br>      dragInfo.current,<br>    );<br><br>    <span class="hljs-comment">// 更新自身状态</span><br>    dragInfo.current = &#123;<br>      ...dragInfo.current,<br>      <span class="hljs-attr">left</span>: x,<br>      <span class="hljs-attr">top</span>: y,<br>    &#125;;<br>  &#125;;<br><br>  <span class="hljs-comment">// realtion开头的都是监听</span><br>  <span class="hljs-comment">// 鼠标操作的目标组件发出的自定义事件</span><br>  <span class="hljs-keyword">const</span> onRelationDragStart = <span class="hljs-function">(<span class="hljs-params">targetId: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isSelect || id === targetId) <span class="hljs-keyword">return</span>;<br>    setIsDealing(<span class="hljs-literal">true</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> onRelationDrag = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    targetId: <span class="hljs-built_in">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    event: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    data: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    outerDragInfo: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isSelect || id === targetId) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">const</span> nextPosition = dragMethod(<br>      event,<br>      data,<br>      <span class="hljs-literal">false</span>,<br>      &#123;<br>        <span class="hljs-attr">left</span>: dragInfo.current.left || <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">top</span>: dragInfo.current.top || <span class="hljs-number">0</span>,<br>      &#125;,<br>      outerDragInfo,<br>    );<br>    <span class="hljs-keyword">const</span> nextState = &#123;<br>      <span class="hljs-attr">x</span>: nextPosition.left || <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">y</span>: nextPosition.top || <span class="hljs-number">0</span>,<br>    &#125;;<br>    dragInfo.current = &#123;<br>      ...dragInfo.current,<br>      ...nextPosition,<br>    &#125;;<br>    setStatePosition(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> (&#123; ...nextState &#125;));<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> onRelationDragStop = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    targetId: <span class="hljs-built_in">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    event: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    data: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    outerDragInfo: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isSelect || id === targetId) <span class="hljs-keyword">return</span>;<br>    setIsDealing(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">const</span> nextPosition = dragMethod(<br>      event,<br>      data,<br>      <span class="hljs-literal">false</span>,<br>      &#123;<br>        <span class="hljs-attr">left</span>: dragInfo.current.left || <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">top</span>: dragInfo.current.top || <span class="hljs-number">0</span>,<br>      &#125;,<br>      outerDragInfo,<br>    );<br>    dragInfo.current = &#123;<br>      ...dragInfo.current,<br>      ...nextPosition,<br>    &#125;;<br><br>    <span class="hljs-keyword">const</span> &#123; left, top &#125; = dragInfo.current;<br>    onChange(&#123;<br>      id,<br>      left,<br>      top<br>    &#125;)<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> onRelationResizeStart = <span class="hljs-function">(<span class="hljs-params">targetId: <span class="hljs-built_in">string</span>, direction: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isSelect || id === targetId) <span class="hljs-keyword">return</span>;<br>    setIsDealing(<span class="hljs-literal">true</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> onRelationResize = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    targetId: <span class="hljs-built_in">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    e: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    direction: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    ref: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    delta: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    position: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    outerResizeInfo: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isSelect || id === targetId) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">const</span> nextConfig = resizeMethod(<br>      e,<br>      direction,<br>      ref,<br>      delta,<br>      position,<br>      <span class="hljs-literal">false</span>,<br>      &#123;<br>        <span class="hljs-attr">left</span>: resizeInfo.current.left || <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">top</span>: resizeInfo.current.top || <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">width</span>: resizeInfo.current.width || <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">height</span>: resizeInfo.current.height || <span class="hljs-number">0</span>,<br>      &#125;,<br>      outerResizeInfo,<br>    );<br><br>    <span class="hljs-keyword">const</span> &#123; left, top, width, height &#125; = nextConfig;<br>    resizeInfo.current = &#123;<br>      ...resizeInfo.current,<br>      left,<br>      top,<br>      width,<br>      height<br>    &#125;;<br><br>    setStatePosition(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> (&#123;<br>      <span class="hljs-attr">x</span>: resizeInfo.current.left,<br>      <span class="hljs-attr">y</span>: resizeInfo.current.top<br>    &#125;));<br>    setStateSize(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> (&#123;<br>      <span class="hljs-attr">width</span>: resizeInfo.current.width,<br>      <span class="hljs-attr">height</span>: resizeInfo.current.height<br>    &#125;));<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> onRelationResizeStop = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    targetId: <span class="hljs-built_in">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    e: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    direction: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    ref: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    delta: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    position: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    outerResizeInfo: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isSelect || id === targetId) <span class="hljs-keyword">return</span>;<br><br>    setIsDealing(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">const</span> nextConfig = resizeMethod(<br>      e,<br>      direction,<br>      ref,<br>      delta,<br>      position,<br>      <span class="hljs-literal">false</span>,<br>      &#123;<br>        <span class="hljs-attr">left</span>: resizeInfo.current.left || <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">top</span>: resizeInfo.current.top || <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">width</span>: resizeInfo.current.width || <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">height</span>: resizeInfo.current.height || <span class="hljs-number">0</span>,<br>      &#125;,<br>      outerResizeInfo,<br>    );<br><br>    <span class="hljs-keyword">const</span> &#123; left, top, width, height &#125; = nextConfig;<br>    resizeInfo.current = &#123;<br>      ...resizeInfo.current,<br>      left,<br>      top,<br>      width,<br>      height<br>    &#125;;<br><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">left</span>: x, <span class="hljs-attr">top</span>: y, <span class="hljs-attr">width</span>: currentWidth, <span class="hljs-attr">height</span>: currentHeight &#125; = resizeInfo.current;<br><br>    onChange(&#123;<br>      id,<br>      <span class="hljs-attr">left</span>: x || <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">top</span>: y || <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">width</span>: (currentWidth <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>) || <span class="hljs-number">20</span>,<br>      <span class="hljs-attr">height</span>: (currentHeight <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>) || <span class="hljs-number">20</span>,<br>    &#125;)<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> multiResizeStart: RndResizeStartCallback = <span class="hljs-function">(<span class="hljs-params">_, direction</span>) =&gt;</span> &#123;<br>    eventEmitter.emit(<br>      EVENT_MAP.RESIZE_START,<br>      id,<br>      direction,<br>    );<br>    resizeInfo.current.resize = <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> _onDrag: RndDragCallback = <span class="hljs-function">(<span class="hljs-params">event: <span class="hljs-built_in">any</span>, data: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// * 复合移动</span><br>    <span class="hljs-keyword">if</span> (isMultiSelect) &#123;<br>      multiOnDrag(event, data);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 节流帮助减少频繁的更新</span><br>  <span class="hljs-comment">// 因为每一次都更新时没有必要的</span><br>  <span class="hljs-keyword">const</span> multiDrag = throttle(_onDrag, <span class="hljs-number">100</span>);<br><br>  <span class="hljs-keyword">const</span> _onResize: RndResizeCallback = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// * 复合尺寸修改</span><br>    <span class="hljs-keyword">if</span> (isMultiSelect) &#123;<br>      multiOnResize(...args);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> multiResize = throttle(_onResize, <span class="hljs-number">100</span>);<br><br>  <span class="hljs-keyword">const</span> multiDragStop: RndDragCallback = <span class="hljs-function">(<span class="hljs-params">event, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; x, y &#125; = data;<br>    <span class="hljs-keyword">if</span> (isMultiSelect) &#123;<br>      <span class="hljs-keyword">const</span> deltaX = x - dragInfo.current.left;<br>      <span class="hljs-keyword">const</span> deltaY = y - dragInfo.current.top;<br><br>      eventEmitter.emit(<br>        EVENT_MAP.DRAG_STOP,<br>        id,<br>        event,<br>        &#123;<br>          ...data,<br>          deltaX,<br>          deltaY,<br>        &#125;,<br>        dragInfo.current,<br>      );<br><br>      dragInfo.current = &#123;<br>        ...dragInfo.current,<br>        <span class="hljs-attr">left</span>: x,<br>        <span class="hljs-attr">top</span>: y,<br>      &#125;;<br>    &#125;<br>    dragInfo.current.drag = <span class="hljs-literal">false</span>;<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> multiResizeStop: RndResizeCallback = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    e,</span></span><br><span class="hljs-params"><span class="hljs-function">    direction,</span></span><br><span class="hljs-params"><span class="hljs-function">    ref,</span></span><br><span class="hljs-params"><span class="hljs-function">    delta,</span></span><br><span class="hljs-params"><span class="hljs-function">    position,</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> newStyle = getComponentStyle(position, ref);<br><br>    resizeInfo.current.resize = <span class="hljs-literal">true</span>;<br><br>    eventEmitter.emit(<br>      EVENT_MAP.RESIZE_STOP,<br>      id,<br>      e,<br>      direction,<br>      ref,<br>      delta,<br>      position,<br>      resizeInfo.current,<br>    );<br><br>    resizeInfo.current.resize = <span class="hljs-literal">false</span>;<br><br>    resizeInfo.current = &#123;<br>      ...resizeInfo.current,<br>      ...newStyle,<br>    &#125;;<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> multiDragStart: RndDragCallback = <span class="hljs-function">() =&gt;</span> &#123;<br>    eventEmitter.emit(<br>      EVENT_MAP.DRAG_START,<br>      id,<br>    );<br>    dragInfo.current.drag = <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> onDragStart: RndDragCallback = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// * 未选中不触发事件</span><br>    <span class="hljs-keyword">if</span> (!isSelect) <span class="hljs-keyword">return</span>;<br>    multiDragStart(...args)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> onDrag: RndDragCallback = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// * 未选中不触发事件</span><br>    <span class="hljs-keyword">if</span> (!isSelect) <span class="hljs-keyword">return</span>;<br>    multiDrag(...args)<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> onResize: RndResizeCallback = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// * 未选中不触发事件</span><br>    <span class="hljs-keyword">if</span> (!isSelect) <span class="hljs-keyword">return</span>;<br>    multiResize(...args)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> onDragStop: RndDragCallback = <span class="hljs-function">(<span class="hljs-params">event, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// * 未选中不触发事件</span><br>    <span class="hljs-keyword">if</span> (!isSelect) <span class="hljs-keyword">return</span>;<br>    onChange(&#123;<br>      ...dragMethod(event, data, <span class="hljs-literal">true</span>),<br>      id<br>    &#125;)<br><br>    multiDragStop(event, data);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> onResizeStart: RndResizeStartCallback = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// * 未选中不触发事件</span><br>    <span class="hljs-keyword">if</span> (!isSelect) <span class="hljs-keyword">return</span>;<br>    multiResizeStart(...args)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> onResizeStop: RndResizeCallback = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    e,</span></span><br><span class="hljs-params"><span class="hljs-function">    direction,</span></span><br><span class="hljs-params"><span class="hljs-function">    ref,</span></span><br><span class="hljs-params"><span class="hljs-function">    delta,</span></span><br><span class="hljs-params"><span class="hljs-function">    position,</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// * 未选中不触发事件</span><br>    <span class="hljs-keyword">if</span> (!isSelect) <span class="hljs-keyword">return</span>;<br><br>    onChange(&#123;<br>      ...resizeMethod(e, direction, ref, delta, position, <span class="hljs-literal">true</span>),<br>      id<br>    &#125;)<br><br>    multiResizeStop(e, direction, ref, delta, position)<br>  &#125;;<br><br>  <span class="hljs-comment">// 绑定拖拽和缩放的事件</span><br>  <span class="hljs-comment">// 用于多选组件间通信</span><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(isSelect) &#123;<br>      eventEmitter.addListener(<br>        EVENT_MAP.DRAG_START,<br>        onRelationDragStart,<br>      );<br>      eventEmitter.addListener(<br>        EVENT_MAP.DRAG,<br>        onRelationDrag,<br>      );<br>      eventEmitter.addListener(<br>        EVENT_MAP.DRAG_STOP,<br>        onRelationDragStop,<br>      );<br>      eventEmitter.addListener(<br>        EVENT_MAP.RESIZE_START,<br>        onRelationResizeStart,<br>      );<br>      eventEmitter.addListener(<br>        EVENT_MAP.RESIZE,<br>        onRelationResize,<br>      );<br>      eventEmitter.addListener(<br>        EVENT_MAP.RESIZE_STOP,<br>        onRelationResizeStop,<br>      );<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      eventEmitter.removeListener(<br>        EVENT_MAP.DRAG_START,<br>        onRelationDragStart,<br>      );<br>      eventEmitter.removeListener(<br>        EVENT_MAP.DRAG,<br>        onRelationDrag,<br>      );<br>      eventEmitter.removeListener(<br>        EVENT_MAP.DRAG_STOP,<br>        onRelationDragStop,<br>      );<br>      eventEmitter.removeListener(<br>        EVENT_MAP.RESIZE_START,<br>        onRelationResizeStart,<br>      );<br>      eventEmitter.removeListener(<br>        EVENT_MAP.RESIZE,<br>        onRelationResize,<br>      );<br>      eventEmitter.removeListener(<br>        EVENT_MAP.RESIZE_STOP,<br>        onRelationResizeStop,<br>      );<br>    &#125;;<br>  &#125;, [isSelect]);<br><br>  <span class="hljs-comment">// 全局组件的尺寸信息状态更新时</span><br>  <span class="hljs-comment">// 同步到组件内部</span><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    setStatePosition(&#123;<br>      <span class="hljs-attr">x</span>: left,<br>      <span class="hljs-attr">y</span>: top<br>    &#125;);<br>    resizeInfo.current = &#123;<br>      ...resizeInfo.current,<br>      <span class="hljs-attr">left</span>: left ?? resizeInfo.current.left,<br>      <span class="hljs-attr">top</span>: top ?? resizeInfo.current.top,<br>    &#125;;<br>    dragInfo.current = &#123;<br>      ...dragInfo.current,<br>      <span class="hljs-attr">left</span>: left ?? dragInfo.current.left,<br>      <span class="hljs-attr">top</span>: top ?? dragInfo.current.top,<br>    &#125;;<br>  &#125;, [left, top]);<br><br>  <span class="hljs-comment">// 全局组件的宽高信息状态更新时</span><br>  <span class="hljs-comment">// 同步到组件内部</span><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    setStateSize(&#123;<br>      width,<br>      height<br>    &#125;);<br>    resizeInfo.current = &#123;<br>      ...resizeInfo.current,<br>      <span class="hljs-attr">width</span>: width ?? resizeInfo.current.width,<br>      <span class="hljs-attr">height</span>: height ?? resizeInfo.current.height,<br>    &#125;;<br>  &#125;, [width, height]);<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Rnd<br>      style=&#123;&#123;<br>        border: `1px solid $&#123;isSelect ? &#x27;black&#x27; : &#x27;transparent&#x27;&#125;`<br>      &#125;&#125;<br>      enableResizing=&#123;isSelect&#125;<br>      disableDragging=&#123;!isSelect&#125;<br>      default=&#123;&#123;<br>        x: 0,<br>        y: 0,<br>        width: 320,<br>        height: 200,<br>      &#125;&#125;<br>      onDragStart=&#123;onDragStart&#125;<br>      onDrag=&#123;onDrag&#125;<br>      onDragStop=&#123;onDragStop&#125;<br>      onResizeStart=&#123;onResizeStart&#125;<br>      onResize=&#123;onResize&#125;<br>      onResizeStop=&#123;onResizeStop&#125;<br>      minWidth=&#123;20&#125;<br>      minHeight=&#123;20&#125;<br>      position=&#123;position&#125;<br>      size=&#123;size&#125;<br>      // 设置缩放边框的class<br>      // 不设置的话会导致与缩放冲突 <br>      resizeHandleClasses=&#123;[<br>        &#x27;left&#x27;,<br>        &#x27;top&#x27;,<br>        &#x27;right&#x27;,<br>        &#x27;bottom&#x27;,<br>        &#x27;topLeft&#x27;,<br>        &#x27;topRight&#x27;,<br>        &#x27;bottomLeft&#x27;,<br>        &#x27;bottomRight&#x27;,<br>      ].reduce&lt;any&gt;((acc, cur) =&gt; &#123;<br>        acc[cur] = &#x27;react-select-to-border&#x27;;<br>        return acc;<br>      &#125;, &#123;&#125;)&#125;<br>    &gt;<br>      &lt;div<br>        style=&#123;&#123;<br>          backgroundColor: background,<br>          width: &#x27;100%&#x27;,<br>          height: &#x27;100%&#x27;<br>        &#125;&#125;<br>        // 用于Selecto组件中的组件标识<br>        data-id=&#123;id&#125;<br>        // 和Selecto组件中的selectableTargets对应<br>        className=&quot;react-select-to&quot;<br>      &gt;<br><br>      &lt;/div&gt;<br>    &lt;/Rnd&gt;<br>  )<br><br>&#125;<br><br>const Parent = () =&gt; &#123;<br><br>  const [componentList, setComponentList] = useState&lt;ComponentList[]&gt;([<br>    &#123;<br>      id: &#x27;1&#x27;,<br>      background: &#x27;red&#x27;,<br>      left: 20,<br>      top: 30,<br>      width: 200,<br>      height: 100<br>    &#125;,<br>    &#123;<br>      id: &#x27;2&#x27;,<br>      background: &#x27;green&#x27;,<br>      left: 200,<br>      top: 300,<br>      width: 100,<br>      height: 100<br>    &#125;,<br>    &#123;<br>      id: &#x27;3&#x27;,<br>      background: &#x27;gray&#x27;,<br>      left: 250,<br>      top: 50,<br>      width: 50,<br>      height: 50<br>    &#125;,<br>    &#123;<br>      id: &#x27;4&#x27;,<br>      background: &#x27;blue&#x27;,<br>      left: 250,<br>      top: 100,<br>      width: 100,<br>      height: 100<br>    &#125;,<br>    &#123;<br>      id: &#x27;5&#x27;,<br>      background: &#x27;pink&#x27;,<br>      left: 400,<br>      top: 150,<br>      width: 100,<br>      height: 100<br>    &#125;,<br>    &#123;<br>      id: &#x27;6&#x27;,<br>      background: &#x27;yellow&#x27;,<br>      left: 400,<br>      top: 300,<br>      width: 100,<br>      height: 100<br>    &#125;<br>  ])<br>  const [select, setSelect] = useState&lt;string[]&gt;([])<br><br>  // 更新组件信息<br>  const onComponentChange = useCallback((value: Partial&lt;ComponentList&gt; &amp; &#123; id: string &#125;) =&gt; &#123;<br>    const &#123; id &#125; = value<br>    setComponentList(prev =&gt; &#123;<br>      return prev.map(item =&gt; &#123;<br>        if (item.id !== id) return item<br>        return &#123;<br>          ...item,<br>          ...value<br>        &#125;<br>      &#125;)<br>    &#125;)<br>  &#125;, [])<br><br>  return (<br>    // 和Selecto组件中的container对应<br>    &lt;div<br>      id=&quot;container&quot;<br>      style=&#123;&#123;<br>        width: &#x27;100vw&#x27;,<br>        height: &#x27;100vh&#x27;<br>      &#125;&#125;<br>    &gt;<br>      &lt;Selecto<br>        select=&#123;select&#125;<br>        setSelect=&#123;setSelect&#125;<br>      /&gt;<br>      &#123;<br>        componentList.map(component =&gt; &#123;<br>          return (<br>            &lt;Component<br>              key=&#123;component.id&#125;<br>              &#123;...component&#125;<br>              isSelect=&#123;select.includes(component.id)&#125;<br>              onChange=&#123;onComponentChange&#125;<br>              isMultiSelect=&#123;select.length &gt; 1&#125;<br>            /&gt;<br>          )<br>        &#125;)<br>      &#125;<br>    &lt;/div&gt;<br>  )<br><br>&#125;<br><br>export default Parent<br></code></pre></td></tr></table></figure><h2 id="成品">成品</h2><p>其实在之前就已经发现其实<code>react-selecto</code>的作者也有研发其他的可视化操作模块，包括本文所说的多选拖拽的操作，但是奈何无法满足本项目的需求，故自己实现了功能。<br>如果有兴趣可以去看一下这个成品<a href="https://daybrush.com/moveable/">moveable</a>。</p><h2 id="总结">总结</h2><p>通过上面的思路，即可完成一个简单的多元素拖拽缩放的功能，其核心其实就是<code>eventemitter3</code>的自定义事件功能，它的用途在平常的业务中非常广泛。<br>比如我们完全可以在以上例子的基础上，加上元素拖拽时<strong>吸附</strong>的功能。</p><h2 id="结束">结束</h2><p>结束🔚。</p><p>顺便在下面附上相关的链接。</p><blockquote><p><a href="http://47.97.27.23/api/backend/screen/index.html">试用地址</a><br><a href="https://github.com/food-billboard/create-chart/issues/2">试用账号</a><br><a href="https://food-billboard.github.io/create-chart/index.html#/">静态版试用地址</a><br><a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">操作文档</a><br><a href="https://github.com/food-billboard/create-chart">代码地址</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>大屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lowcode react chart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>收集一些有用的文章</title>
    <link href="/2023/01/09/%E6%94%B6%E9%9B%86%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <url>/2023/01/09/%E6%94%B6%E9%9B%86%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="收集一些有用的文章">收集一些有用的文章</h2><p>在这里记录一些比较实用的文章。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/460238207">前端开发调试最佳实践</a></li><li><a href="https://mp.weixin.qq.com/s/VOoDHqIo4gh3scHVNxk3lA">前端容易忽略的 debugger 调试技巧</a></li><li><a href="https://juejin.cn/post/7061588533214969892#heading-32">做了一份前端面试复习计划，保熟～</a></li><li><a href="https://www.cnblogs.com/yaenli/p/16656064.html">gitignore匹配规则</a><br><code>bin/</code>: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件<br><code>/bin</code>: 忽略根目录下的bin文件<br><code>/*.c</code>: 忽略根目录cat.c，不忽略 build/cat.c<br><code>debug/*.obj</code>: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj<br><code>**/foo</code>: 忽略/foo, a/foo, a/b/foo等<br><code>a/**/b</code>: 忽略a/b, a/x/b, a/x/y/b等<br><code>!/bin/run.sh</code>: 不忽略 bin 目录下的 <a href="http://run.sh">run.sh</a> 文件<br><code>*.log</code>: 忽略所有 .log 文件<br><code>config.php</code>: 忽略当前路径的 config.php 文件<br><code>/mtk/do.c</code>: 过滤某个具体文件<br><code>!/mtk/one.txt</code>: 追踪（不过滤）某个具体文件</li></ul><h2 id="结束">结束</h2><p>持续更新…</p>]]></content>
    
    
    <categories>
      
      <category>文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏设计器开发-umi打包体积优化</title>
    <link href="/2022/12/29/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E6%89%93%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/"/>
    <url>/2022/12/29/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E6%89%93%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1>数据可视化大屏设计器开发-打包体积优化</h1><h2 id="开头">开头</h2><p>本文是数据可视化开始的开发细节第四章。关于项目打包体积优化。<br>虽然内容似乎不应该按这个顺序产出，不过因为最近的迭代中突然有涉及到这个方面，故就趁这个时机赶紧先记下来。</p><blockquote><p>简单声明<br>本人只是一个菜鸡，所以并没有什么新的东西，只是把网上碰到的一些点给统一处理了下。</p></blockquote><h2 id="开始">开始</h2><p>大屏是基于<a href="https://v3.umijs.org/zh-CN">umi</a>进行开发的，关于此库相信大家都不陌生，只需很少的配置即可开始研发。</p><p>但是随着时间的推移，项目的代码量越来越大，打包出来的产物也越来越大，这个时候便需要做一些优化配置。</p><p>体积优化是在开发<code>1.17</code>版本的时候，首先是上一个版本的打包详情。<br><img src="/images/数据可视化大屏设计器开发/之前的版本打包.jpg" /><br><img src="/images/数据可视化大屏设计器开发/首页加载之前.jpg" /></p><p>然后是当前优化后的打包详情。<br><img src="/images/数据可视化大屏设计器开发/现在的版本打包.jpg" /><br><img src="/images/数据可视化大屏设计器开发/首页加载之后.jpg" /></p><p>本文说得更明白些，应该说是<strong>主文件</strong>的体积优化，整体的思路：拆分主文件、按需加载、压缩。</p><h3 id="umi配置优化">umi配置优化</h3><h4 id="dynamicImport">dynamicImport</h4><p>正常情况下，<code>umi</code>打包只会生成一个<code>umi.js</code>，简单项目这样也很简洁，但是项目大的时候，网络加载速度就会变慢，此时就需要按照逻辑进行拆分。<br>可以看下官网的<a href="https://v3.umijs.org/zh-CN/docs/load-on-demand">按需加载</a>，开启按需加载后，<code>umi</code>就会将项目按模块进行拆分。</p><h4 id="targets"><a href="https://v3.umijs.org/zh-CN/config#targets">targets</a></h4><p>根据实际情况，针对项目应用的浏览器版本范围，按需引入<code>polyfill</code>，可以很好的减少产出代码体积。<br>如果项目只会应用于高版本的浏览器，就可以设置成高版本浏览器的配置，减少<code>polyfill</code>。</p><h4 id="externals"><a href="https://v3.umijs.org/zh-CN/config#externals">externals</a></h4><p>即是<code>webpack</code>的<code>externals</code>，把一些模块从打包项中直接给去除掉，采用<code>cdn</code>的形式引入。</p><ul><li>ps<br>本来是准备打算将<code>echarts</code>采用<code>cdn</code>形式引入的，奈何还依赖了<strong>词云</strong>和<strong>水球</strong>组件，删除了<code>echarts</code>的<code>npm</code>后，报错了，故没有做这个选择。</li></ul><h4 id="ignoreMomentLocale"><a href="https://v3.umijs.org/zh-CN/config#ignoremomentlocale">ignoreMomentLocale</a></h4><p>大多数情况下，业务项目基本都没有多语言的需求，把<a href="http://momentjs.cn/">moment</a>的语言包给去除。</p><p>当然更好的办法是把<code>moment</code>替换成<a href="https://dayjs.gitee.io/zh-CN/">dayjs</a>，毕竟其实平时没有太多时间转换的需求，采用更轻量的库是更好的选择。</p><h4 id="splitChunks"><a href="https://v3.umijs.org/zh-CN/config#chainwebpack">splitChunks</a></h4><p>根据上面的<code>dynamicImport</code>拆分了模块后，模块当中的第三方引入却被同时打进了不同的模块中，重复打包。</p><p>使用<code>webpack</code>的<a href="https://webpack.docschina.org/plugins/split-chunks-plugin/">splitChunks</a>配置，将一些比较大的，常用的第三方依赖单独抽离，可以有效减少包体积。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&#x27;antdesigns&#x27;</span>, <span class="hljs-string">&#x27;vendors&#x27;</span>, <span class="hljs-string">&#x27;commons&#x27;</span>, <span class="hljs-string">&#x27;umi&#x27;</span>],<br>  <span class="hljs-function"><span class="hljs-title">chainWebpack</span>(<span class="hljs-params">config: any</span>)</span> &#123;<br>    config.merge(&#123;<br>      <span class="hljs-attr">optimization</span>: &#123;<br>        <span class="hljs-attr">minimize</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">splitChunks</span>: &#123;<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>          <span class="hljs-attr">minSize</span>: <span class="hljs-number">30000</span>,<br>          <span class="hljs-attr">minChunks</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">automaticNameDelimiter</span>: <span class="hljs-string">&#x27;.&#x27;</span>,<br>          <span class="hljs-attr">cacheGroups</span>: &#123;<br>            <span class="hljs-attr">antdesigns</span>: &#123;<br>              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;antdesigns&#x27;</span>,<br>              <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>              <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/](antd|@ant-design)/</span>,<br>              priority: <span class="hljs-number">10</span>,<br>            &#125;,<br>            <span class="hljs-attr">echarts</span>: &#123;<br>              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;echarts&#x27;</span>,<br>              <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;async&#x27;</span>,<br>              <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/](echarts|zrender)/</span>,<br>              priority: <span class="hljs-number">10</span>,<br>            &#125;,<br>            <span class="hljs-attr">vendors</span>: &#123;<br>              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;vendors&#x27;</span>,<br>              <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>              <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/](lodash|moment|react|dva)/</span>,<br>              priority: <span class="hljs-number">10</span>,<br>            &#125;,<br>            <span class="hljs-attr">commons</span>: &#123;<br>              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;commons&#x27;</span>,<br>              <span class="hljs-comment">// 其余同步加载包</span><br>              <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>              <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>,<br>              <span class="hljs-attr">priority</span>: <span class="hljs-number">1</span>,<br>              <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>            &#125;,<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意的地方">注意的地方</h5><p><code>splitChunks</code>中还有几个需要注意的地方。</p><ul><li>priority<br>拆分的<strong>优先级</strong>，当一个包同时被多个<code>cacheGroups</code>中的<code>test</code>匹配上时，会将包<strong>拆</strong>到<code>priority</code>最高的那个<code>cacheGroups</code>中。</li><li>minSize<br>包被压缩前的体积超过<code>minSize</code>才会被拆包。</li><li>chunks（个人理解）<br><code>umi</code>配置中的<code>chunks</code>，表示预先需要加载的<code>cacheGroups</code>，比如上面的<code>echarts</code>模块不需要一开始就加载，则不需要添加到<code>chunks</code>中。</li></ul><h3 id="按需加载">按需加载</h3><p>这里说的按需加载，说的是代码的按需加载。<br>比如在加载首页的时候，我们不需要加载个人中心的页面代码，这样可以大大加快首页加载的速度。</p><p>此时就可以用到<code>React</code>的语法来达到这个效果（其实完全可以使用<code>umi</code>的<code>dynamic</code>，但是不不知道为啥报错了）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> React, &#123; lazy, Suspense &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-comment">// 一个比较大的组件</span><br><span class="hljs-keyword">const</span> HugeComponent = lazy(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;Chunk_Name&quot; */</span> <span class="hljs-string">&#x27;./path/to/component&#x27;</span>)<br>&#125;)<br><br><span class="hljs-keyword">const</span> App = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HugeComponent</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br>  )<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>按需加载组件，只有使用到组件的时候才进行加载，<code>lazy</code>支持一个异步函数，返回一个组件，<code>Suspense</code>组件的<code>children</code>为一些懒加载的组件，在未加载完成时，会显示<code>fallback</code>的加载内容。</p><p>大屏设计器当中有非常多的依赖，且体积巨大，通过此方法，实现了一个非常不错的效果。<br>比如经常使用的代码编辑器<a href="https://github.com/microsoft/monaco-editor">monaco-editor</a>。<br>还有每一个<strong>图表组件</strong>，默认都不进行加载，只有当拖拽到画布当中时，才会真正去加载图表。</p><h3 id="其他优化">其他优化</h3><h4 id="gzip">gzip</h4><p>之前的优化效果虽然显著，但是当开启了<code>gzip</code>之后，给项目最后的效果来了一个质的提升。</p><p>这是压缩前和压缩后的两个对比，效果非常明显。<br><img src="/images/数据可视化大屏设计器开发/gzip前.jpg" /><br><img src="/images/数据可视化大屏设计器开发/gzip后.jpg" /></p><ul><li><p>安装依赖<br><code>yarn add compression-webpack-plugin@5.0.1 -D</code><br>为什么安装这个<a href="https://blog.csdn.net/yolo_link/article/details/125255862">版本</a>？<br>项目使用的是<code>umi3</code>，而插件的最新版本是<code>10.0.0</code>，打包发现报错<code>Cannot read properties of undefined (reading ‘tapPromise‘)</code><br>大概率是<code>webpack</code>版本不匹配，查看插件<code>package.json</code>发现其依赖的<code>webpack</code>版本为<code>5</code>。<br>故选择了插件<code>5.0.1</code>版本（<code>webpack</code>可为<code>4</code>）。</p></li><li><p>配置</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> CompressionPlugin <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;compression-webpack-plugin&#x27;</span>;<br><span class="hljs-keyword">const</span> config = &#123;<br>  <span class="hljs-function"><span class="hljs-title">chainWebpack</span>(<span class="hljs-params">config: any</span>)</span> &#123;<br>    <span class="hljs-comment">// 生产环境配置</span><br>    <span class="hljs-keyword">if</span> (REACT_APP_ENV === <span class="hljs-string">&#x27;prod&#x27;</span>) &#123;<br>      config.plugin(<span class="hljs-string">&#x27;compression-webpack-plugin&#x27;</span>).use(CompressionPlugin, [<br>        &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(js|css|html)$/i</span>, <span class="hljs-comment">// 匹配</span><br>          threshold: <span class="hljs-number">102400</span>, <span class="hljs-comment">// 超过10k的文件压缩</span><br>          <span class="hljs-attr">deleteOriginalAssets</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 不删除源文件</span><br>        &#125;,<br>      ]);<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>nginx配置<br>当然只完成打包还不够，需要服务端也支持<code>gzip</code>。<br>只需要简单的在<code>nginx</code>配置当中添加如下配置，重启，即可。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gzip_static on;<br></code></pre></td></tr></table></figure><h3 id="剩余待优化">剩余待优化</h3><h4 id="组件优化">组件优化</h4><p>现在各个图表组件的<strong>配置</strong>和<strong>渲染</strong>已完成按需加载，但是每个组件的<strong>默认配置</strong>数据仍然是同步全量加载。<br>因为代码逻辑原因可能需要一番大修改，故在之后完善。</p><h4 id="图片优化">图片优化</h4><p>图片现在也是全量加载，待优化。</p><h4 id="依赖包替换">依赖包替换</h4><p>有相当多的依赖包只是简单使用，但占用体积巨大，考虑使用同功能的小包进行替换。</p><h2 id="结束">结束</h2><p>结束🔚。</p><p>顺便在下面附上相关的链接。</p><blockquote><p><a href="http://47.97.27.23/api/backend/screen/index.html">试用地址</a><br><a href="https://github.com/food-billboard/create-chart/issues/2">试用账号</a><br><a href="https://food-billboard.github.io/create-chart/index.html#/">静态版试用地址</a><br><a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">操作文档</a><br><a href="https://github.com/food-billboard/create-chart">代码地址</a></p></blockquote><p>参考链接</p><blockquote><p><a href="https://juejin.cn/post/7081453829375393823">https://juejin.cn/post/7081453829375393823</a><br><a href="https://blog.csdn.net/moozixiao/article/details/115791524">https://blog.csdn.net/moozixiao/article/details/115791524</a><br><a href="https://juejin.cn/post/7103831294013865992">https://juejin.cn/post/7103831294013865992</a><br><a href="https://juejin.cn/post/7155652261660590116">https://juejin.cn/post/7155652261660590116</a><br><a href="https://juejin.cn/post/6844903728374546445">https://juejin.cn/post/6844903728374546445</a><br><a href="https://juejin.cn/post/6844904183917871117">https://juejin.cn/post/6844904183917871117</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>大屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lowcode react chart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏设计器开发-右键菜单操作</title>
    <link href="/2022/12/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/12/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1>数据可视化大屏设计器开发-右键菜单操作</h1><h2 id="开头">开头</h2><p>本文是数据可视化开始的开发细节第三章。关于大屏中组件的一些操作，比如成组、复制粘贴、层级控制、复制样式、组件切换、前进后退等等。<br>本文就针对各个操作逐一讲解其实现思路。</p><h2 id="开始之前">开始之前</h2><p>在正式开始之前，先预先介绍一下相关的信息。</p><p>以下讲解均只涉及<strong>PC端</strong>的逻辑。</p><p>下面所说的<strong>元素</strong>表示的是<strong>组或者组件</strong>的简称。</p><p>因为本文说的是右键菜单，所以肯定无法避免二次操作。比如先进行复制，然后进行粘贴，所以一般认为二次操作所选中的元素为最终可能需要操作的位置（比如复制了组内的元素，然后右键粘贴选择的元素在组外，那么目标元素就会被粘贴到组外）。</p><h3 id="组件整体的数据结构。">组件整体的数据结构。</h3><p>组件在画布中的存在形式是一个<strong>树</strong>的结构，其实就是一个简单的数组形式，当然并不只是一个一层，它是一个深层嵌套的结构。<br>类似于下面这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> Components = &#123;<br>  <span class="hljs-comment">// 组件id</span><br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-comment">// 父级的组件id </span><br>  parent?: <span class="hljs-built_in">string</span> <br>  <span class="hljs-comment">// 元素标识 组或者组件</span><br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;component&#x27;</span> | <span class="hljs-string">&#x27;group&#x27;</span><br>  <span class="hljs-comment">// 子元素</span><br>  <span class="hljs-attr">components</span>: Components[]<br>  <span class="hljs-comment">// ...another config </span><br>&#125;[]<br></code></pre></td></tr></table></figure><ul><li>id<br>元素的id</li><li>parent<br>父级的id，如果为最上层的元素则不存在</li><li>type<br>标记当前元素是组还是组件</li><li>components<br>当前组的下层元素</li></ul><p>组可以嵌套组件，也可以嵌套组，组件为最下层。<br>元素通过<code>parent</code>来达到与父级的关联。<br>如此形成一个无限向下嵌套的结构。</p><h3 id="平滑结构">平滑结构</h3><p>虽然上述的结构可以很好的描述和直观的看到整个大屏的全貌，但是有时候操作起来相对来说还是有点不方便。<br>此时就需要一个临时的平滑的<strong>单层次结构</strong>来应对业务中的一些逻辑操作。<br>当前的想法是以<strong>对象</strong>的形式来表达。<br>类似于下面这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> ComponentPath = &#123;<br>  [key: <span class="hljs-built_in">string</span>]: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>;<br>    path: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-comment">// ...another info </span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>键名<br>key即为元素的id</li><li>id<br>与键名同意</li><li>path<br>这个是此结构的关键，它是当前元素在<strong>树</strong>结构中的路径，关于他的格式可以参考<a href="https://www.lodashjs.com/docs/lodash.get">lodash的get方法</a><br>比如<code>0.components.2</code>表示获取第一个组的第二个子元素。</li></ul><h2 id="开始">开始</h2><blockquote><p>首先讲一下本文所涉及的所有操作：<br>成组/取消成组、复制/粘贴、层级控制（置顶/置底/上一个/下一个）、删除、组件切换、复制组件样式、隐藏、锁定、恢复默认配置、前进后退。</p></blockquote><p>其实本来对于上述的操作，实现逻辑并不复杂，但是因为设计器当中存在<strong>多选</strong>操作的逻辑，以及<strong>成组</strong>的逻辑，导致上面的操作实现起来并没有看上去那么简单。</p><h3 id="成组-取消成组">成组/取消成组</h3><p>一上来就是最复杂的逻辑🤷🏻‍♀️ 。</p><p>先讲成组是因为它对后面的逻辑或多或少会产生一定的影响。<br>并且成组是所有操作当中，<strong>最难</strong>实现的部分。</p><p><strong>组</strong>即是将一个或多个元素进行包裹，组内元素的<strong>定位</strong>将不再基于画布，而是基于组。<br>因为多个元素成组后，免不了对组进行<strong>大小</strong>、<strong>位置</strong>调整等。<br><strong>位置</strong>调整相对来说影响不大，因为内部元素均基于组来进行定位。<br>而<strong>大小</strong>的变动会对内部的元素影响非常大。</p><blockquote><p>比如，初始组的宽度为<code>200px</code>，组内的一个组件的宽度为<code>50px</code>，之后将组调整为<code>400px</code>，那么组件的宽度应该调整为多少？<br>组的宽度放大了<code>2倍</code>，所以组件的宽度同时也放大<code>2倍</code>，变为<code>100px</code>。<br>同时还要注意，组件的位置同样也需要调整，如上述的，说明组件的<code>left</code>也要放大<code>2倍</code>。</p></blockquote><p>如此进行上述的计算调整，相对来说还是比较耗费性能的，因为他不仅仅是只有一层的结构。</p><p>最终选择的方案是，通过对每一个元素无差别带上<code>scale</code>配置：<code>scaleX</code>和<code>scaleY</code>，默认为<code>1</code>。<br>对于组件的操作，无须修改<code>scale</code>配置，而组的大小调整时，修改尺寸和<code>scale</code>配置即可。<br><code>const newScaleX = (newWidth / width) * (scaleX || 1)</code>，如此可以计算出新的<code>scaleX</code>。</p><p>而内部的元素在实际渲染前，只需要将父级的<code>scale</code>进行计算即可。<br><code>const componentWidth = width * parentScaleX</code><br>而组内组的话，则是需要将自己的<code>scale</code>与父级的<code>scale</code>进行相乘，因为组内组之下还有组件，是相互影响的。</p><h4 id="成组">成组</h4><p>成组的元素有两种情况：同级成组和非同级成组。</p><p>首先需要计算出对应的元素相对于画布的位置和尺寸。（上面已经说过，组内元素是根据父级组来进行定位的，尺寸也受到了<code>scale</code>配置的影响）<br>如果是组的话也要将<code>scale</code>配置计算出来。</p><p>接着获取到对应的成组位置的父级元素的信息（可以通过上面说的<code>parent</code>配置，用平滑结构获取到元素配置）。</p><p>创建新组并根据子元素信息重新计算宽高及位置。</p><p>接着递归去修改子组内的子元素（因为子组在树内的结构可能发生了变化），最重要的是子元素的<code>parent</code>配置，需要指向当前的父元素。</p><h4 id="取消成组">取消成组</h4><p>成组的反向操作。</p><p>相对于<strong>成组</strong>来说，简单一些，只需要去掉外层包裹的组的一些配置，比如<code>scale</code>配置，定位配置，<code>parent</code>配置。<br>因为现在是相对于原父组的再上一层父组进行定位，所以要将原父组的配置合并到对应的子元素上面。</p><h4 id="其他">其他</h4><p>具体的代码请查看<a href="https://github.com/food-billboard/create-chart/blob/main/src/utils/Assist/Group/index.ts">这里</a>。<br>当前版本还发现一个问题：组内元素的宽高通过右侧配置进行修改，外层组的尺寸未同步。预计在下一个版本进行处理。</p><h3 id="层级">层级</h3><p>层级控制包含四个操作：置顶、置底、上一个、下一个。<br>层级是指元素在画布当中显示的层级顺序。<br>虽然<strong>PC端</strong>和<strong>H5端</strong>显示的逻辑不一样，但是也大差不差。</p><blockquote><p>PC端中画布的元素，采用的是绝对定位的布局，那么层级即是元素的<code>zIndex</code>样式<br>H5端中画布的元素，采用普通的流式布局，那么层级就是元素在数组中的<strong>索引</strong>顺序。</p></blockquote><p>层级分成3种：1(置底）、2(正常)、3(置顶)。<br>元素在html的结构中也是按顺序进行渲染的，所以第一个元素和第二个元素虽然<code>zIndex</code>都是2，但是第二个元素还是会在第一个元素的上面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative;width:200px;height:100px;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: absolute;left: 0;top: 0;background-color: red;width: 200px;height: 100px;&quot;</span>&gt;</span><br>      第一个元素<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: absolute;left: 80px;top: 0;background-color: yellow;width: 100px;height: 100px;&quot;</span>&gt;</span><br>      第二个元素<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="position: relative;width:200px;height:100px;">  <div style="position: absolute;left: 0;top: 0;background-color: red;width: 200px;height: 100px;">      第一个元素  </div>  <div style="position: absolute;left: 80px;top: 0;background-color: yellow;width: 100px;height: 100px;">      第二个元素  </div></div><p>所以逻辑就很简单了：</p><ul><li>置顶<br>将元素的<code>zIndex</code>修改为3。</li><li>置底<br>将元素的<code>zIndex</code>修改1。</li><li>上一个/下一个<br>修改元素在数组中的索引位置。</li></ul><p>因为组本身也是一个容器，所以对于此部分的逻辑，基本处理都是一样的。</p><p>当多选了多个元素时，为了操作方便，统一显示的都是一个状态。<br>比如<strong>置顶</strong>，如果一个元素已经置顶了，那么操作按钮显示的是<strong>取消置顶</strong>，根据上面的逻辑，多个元素同时操作时，操作按钮统一显示成<strong>置顶</strong>。</p><h3 id="删除">删除</h3><p>删除操作就很简单了，单纯的从数据结构中，删除对应的元素即可。</p><p>而在大屏中，需要弹出确认提示：是否删除xxx、xxx等组件。如果从<strong>树</strong>结构中寻找，难免显得麻烦。<br>此时就可以使用上面的平滑结构来进行操作，只需要简单的拿到对应元素的<code>path</code>路径，接着拿到他的父级，删除即可👍 。</p><h3 id="隐藏">隐藏</h3><p>隐藏操作即是将组件在画布当中隐藏。<br>此操作也十分简单，设置组件的样式即可，这里使用的是<code>visibility</code>样式来控制，实践中因为<code>display</code>可能会使部分组件的<strong>宽高</strong>计算出现问题，故使用<code>visibility</code>。</p><p>需要注意的是， 因为<code>visibility</code>的特性，可能会使得鼠标多选时还是能选中该元素，所以需要特别处理。</p><h3 id="锁定">锁定</h3><p>锁定操作与隐藏操作类似，不同的是锁定是<strong>正常显示</strong>元素的，但是无法对其进行相应的操作罢了，比如选中、修改配置等。<br>这是为了防止有人误操作，导致相关已经完成设计的元素被修改，因为整体数据是实时保存的。</p><h3 id="组件切换">组件切换</h3><p>组件切换为根据<strong>数据</strong>进行组件切换。<br>比如当在设计完成一个组件时，突然想换成另外一种呈现形式，此时就可以通过组件切换达到目的。<br>当然要求是被切换的组件和切换组件的数据格式是相同的。</p><p>关于数据格式，即对应组件所需要的数据的类型，及字段。<br>比如<strong>柱形图</strong>，他的数据格式为：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> BarData = &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">string</span> <br>  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span> <br>  s?: <span class="hljs-built_in">string</span> <br>&#125;[]<br></code></pre></td></tr></table></figure><p><strong>折线图</strong>的数据格式同样也是上面的形式。<br>所以说明柱形图和折线图是可以进行相互切换的。</p><img src="/images/数据可视化大屏设计器开发/组件切换操作.jpg" /><h3 id="复制组件样式">复制组件样式</h3><p>复制组件样式类似于复制操作，当然他是把复制和粘贴操作进行了合并。<br>和名称一样，复制的是组件的<strong>样式</strong>配置，对于组件的<strong>数据</strong>和<strong>交互</strong>等，均为组件的初始值。</p><p>逻辑即简单使用<code>lodash</code>的<code>mergeWith</code>将组件配置和默认配置进行合并即可。</p><h3 id="恢复默认配置">恢复默认配置</h3><p>恢复默认配置，将组件的配置恢复成初始值，简单覆盖即可。</p><h3 id="前进后退">前进后退</h3><p>前进和后退，允许操作可以前进和后退。<br>比如将一个组件右移<code>100px</code>，后退操作可以将组件回到原来的位置。</p><p>这里使用的是自己实现的类库<a href="https://github.com/food-billboard/react-undo-component">react-undo-component</a>。<br>他可以让<code>class</code>组件或者<code>function</code>组件，在内部记录<code>state</code>的一系列操作记录，方便进行前进和后退。<br>比如<code>function</code>组件，可以使用<code>useUndo</code>方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useUndo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-undo-component&#x27;</span><br><br><span class="hljs-keyword">const</span> UndoComponent = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> [ counter, setCounter, &#123;<br>    undo<br>  &#125; ] = useUndo&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">const</span> handleAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>    setCounter(<span class="hljs-function"><span class="hljs-params">prev</span> =&gt;</span> prev + <span class="hljs-number">1</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> handleUndo = <span class="hljs-function">() =&gt;</span> &#123;<br>    undo()<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>counter: &#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleAdd&#125;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleUndo&#125;</span>&gt;</span>undo<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>内部即是简单拦截了<code>useState</code>方法来记录<code>state</code>变化。<br>因为设计器使用的是<code>dva</code>，所以不能简单使用上述的方法，但是他同样导出了内部class的<code>Histroy</code>可以自行实现对应细节。<br>具体的实现代码可以查看<a href="https://github.com/food-billboard/create-chart/blob/main/src/utils/Assist/History/index.ts">这里</a></p><h2 id="结束">结束</h2><p>以上逻辑均为本人自己的想法，如有问题或错误可指正🙏🏻 。</p><p>结束🔚。</p><p>顺便在下面附上相关的链接。</p><blockquote><p><a href="http://47.97.27.23/api/backend/screen/index.html">试用地址</a><br><a href="https://github.com/food-billboard/create-chart/issues/2">试用账号</a><br><a href="https://food-billboard.github.io/create-chart/index.html#/">静态版试用地址</a><br><a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">操作文档</a><br><a href="https://github.com/food-billboard/create-chart">代码地址</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>大屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lowcode react chart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码库记录</title>
    <link href="/2022/12/20/%E4%BB%A3%E7%A0%81%E5%BA%93%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/12/20/%E4%BB%A3%E7%A0%81%E5%BA%93%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="代码库记录">代码库记录</h2><p>本文是记录平时看到的一些实用的库，方便后续有需求。</p><h3 id="开始">开始</h3><ul><li>react-rnd<br>元素拖拽</li><li>react-color<br>颜色选择</li><li>html2canvas<br>html转canvas</li><li>dom-to-image<br>html转canvas</li><li>gif.js<br>多张图片转gif</li><li>file-saver<br>文件下载</li><li>postmate<br>页面信息传递，类似于postmessage</li><li>fast-json-stringify<br>高效json转字符串</li><li>koa-compress<br>服务端压缩</li><li>node-images<br>服务端图片处理</li><li>vimejs<br>视频播放</li><li>clipboard<br>复制剪切板</li><li>jieba<br>中文分词-关键字抽取</li><li><a href="http://css.gg">css.gg</a><br>图标</li><li>lottie-web<br>帧动画</li><li>cropperjs<br>图片裁剪</li><li>viewerjs<br>图片预览</li><li>animnxyz<br>通用动画库</li><li>d3<br>高度可定制可视化库</li><li>xterm.js<br>web终端</li><li>semantic-release<br>github持续集成</li><li>react-use<br>react hooks</li><li>color.js<br>颜色处理</li><li>jscover<br>代码覆盖率</li><li>benchmark<br>基准测试</li><li>grunt<br>构建工具</li><li>node-inspector<br>node调试</li><li>fabric.js<br>图像处理</li><li>globby.js<br>文件读取</li><li>execa<br>命令行</li><li>brackets<br>代码编辑器</li><li>turndown<br>html2markdown</li><li>jsdom<br>服务端dom模拟</li><li>np<br>npm publish</li><li>rc-steps<br>步骤条</li><li>dexie.js<br>前端离线数据存储</li><li>react-datasheet<br>前端类excel组件</li><li>chatui<br>聊天ui</li><li>react-flow<br>流程图绘制</li><li>react-router-cache-router<br>页面缓存</li><li>tailwindcss<br>css in js</li><li>cypress<br>浏览器端测试</li><li>rxdb<br>前端跨平台数据库</li><li>immutabiluty-helper<br>复杂数据更新</li><li>hammer.js<br>移动端手指事件（比较老）</li><li>webpack-chain<br>链式webpack配置</li><li>nanoid<br>uuid</li><li>redux-undo<br>redux前进后退</li><li>chart.css<br>css chart 图表</li><li>swiper<br>pc h5 轮播图</li><li>rrweb<br>前端页面录制</li><li>eva.js<br>前端游戏渲染引擎</li><li>winbox<br>前端小窗</li><li>vue-i18n<br>vue国际化</li><li>node-util<br>通用工具库</li><li>yeoman<br>通用脚手架</li><li>webfunny<br>前端监控</li><li>helmet<br>node安全校验</li><li>jszip<br>前端文件解压缩</li><li>node-stream-zip<br>node文件解压缩</li><li>plopjs<br>模板代码生成</li><li>sharp<br>node图片处理</li><li>colorthief<br>获取图片主题色</li><li>gocr.js<br>图片文字识别</li><li>css3d-engine<br>css 3d</li><li>tween.js<br>缓动动画</li><li>stats.js<br>three fps显示</li><li>hover.css<br>hover样式</li><li>squoosh<br>图片压缩</li><li>nativefier<br>web页面转桌面app</li><li>lowdb<br>轻量前端json文件数据库</li><li>eruda<br>移动端调试</li><li>ts-toolbelt<br>typescript工具类型</li><li>emoji-mart<br>表情</li><li>tracking.js<br>人脸检测</li><li>react-sortable-hoc<br>列表拖拽排序</li><li>is-mobile<br>是否是手机浏览器</li><li>sjcl<br>数据加密</li><li>browser-fs-access<br>文件下载</li><li>reveal.js<br>ppt</li><li>grapesjs<br>低代码</li><li>fuse.js<br>前端数据检索</li><li>hoist-non-react-statics<br>拷贝组件静态属性</li><li>tesseract.js<br>文字识别</li><li>countup<br>数字动画</li><li>ua-parse-js<br>获取用户ua信息</li><li>leaflet<br>移动端地图</li><li>react95<br>复古组件库</li><li>wired-elements<br>手绘风格组件库</li><li>signature-pad<br>手写签名</li><li>tui.editor<br>markdown编辑器</li><li>tui.image-editor<br>图片编辑器</li><li>unlock-music<br>浏览器解锁加密音乐文件</li><li>csshake<br>css抖动效果</li><li>schema-typed<br>数据校验</li><li>model-viewer<br>3d模型展示</li><li>waypoints<br>滚动监听</li><li>omi<br>跨端组件库</li><li>ffcreator<br>node端可视化制作</li><li>zx.js<br>javascript写shell脚本</li><li>heti<br>中文排版</li><li>tvlist-awesome-m3u-m3u8<br>电视节目直播源地址</li><li>urlcat<br>url地址生成</li><li>shepherd.js<br>引导页</li><li>react-pdf<br>pdf生成</li><li>chonky<br>文件目录预览</li><li>remotion<br>react视频生成</li><li>lax.js<br>滚动动画</li><li>tinykeys<br>键盘事件监听</li><li>mantine<br>感觉组件比较多的组件库</li><li>capture-website<br>截取屏幕截图</li><li>filpper.js<br>移动端调试</li><li>react-image-crop<br>图片裁剪</li><li>rainEffect<br>雨滴效果</li><li>multiscroll.js<br>复合滚动效果</li><li>midnight.js<br>炫酷固定头部</li><li>typed.js<br>打字机效果</li><li>favico.js<br>个性化网站图标</li><li>particles.js<br>粒子效果</li><li>lexical<br>富文本编辑器</li><li>automerge<br>多人协作可复制数据类型</li><li>party.js<br>烟花特效</li><li>whirl<br>loading特效</li><li>gitleaks<br>git静态安全分析</li><li>node-notifier<br>电脑端消息提示框</li><li>css-doodle<br>grid布局</li><li>pannellumjs<br>全景查看器</li><li>rough<br>手绘风格图形绘制</li><li>use-gesture<br>动画比较好的拖拽</li><li>lit<br>web component 构建脚手架</li><li>turn.js<br>jquery翻书效果</li><li>nodegui<br>js写桌面端</li><li>react-toastify<br>全局弹出框提示组件</li><li>pannellum<br>全景查看器</li><li>watching-you<br>眼睛跟踪鼠标或物体移动</li><li>shine.js<br>阴影效果</li><li>tauri<br>桌面应用框架</li><li>vite<br>web构建工具</li><li>qwik<br>类react，但是体积应该更小</li><li>zustand<br>react的hook型状态管理</li><li>react-useportal<br>react的createPortal</li><li>hamburger-react<br>菜单展开收起图标</li><li>ui-button<br>各种样式的按钮</li><li>proton<br>各种粒子特效</li><li>phytouch<br>非常丝滑的手指touch</li><li>twemoji<br>emoji</li><li>satori<br>html和css转svg</li><li>floating-ui<br>tooltip组件</li><li>fast-average-color<br>获取图片平均色</li></ul><h3 id="结束">结束</h3><p>持续更新中。。。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年终总结</title>
    <link href="/2022/12/12/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2022/12/12/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="2022年终总结">2022年终总结</h2><p>从大学毕业到如今已经两年了，遥想当初刚毕业时的自己，无数个晚上想要放弃自己向往的前端行业。</p><blockquote><p>简单介绍下自己的情况<br>三本大学+非本专业。<br>大三偶然的一次机会接触了前端，自此开始了孤独的自学之路。</p></blockquote><p>想想这一路走来，辛酸只有自己知道。</p><h3 id="曾今的自己">曾今的自己</h3><h4 id="大学">大学</h4><p>大学的专业是电子商务，从一进入学校，开始第一门课程时，就发现了自己并不喜欢这个专业，就这样混着混着到了大三。<br>因为学习的课程非常杂，包含非常多种类的课程：会计学、统计学、经济学、计算机。<br>在大三接触到<code>Java</code>时，才彻底决定了以后的方向（其实自己也不知道为啥却选择了前端）。</p><p>之后就是拼命的学习（🧠 笨，但相信勤能补拙），早上8点起床，基本除了上课时间，都在宿舍自学，看教学视频、做练习（轮播图、菜单、扫雷、贪吃蛇、2048、别踩白块🙂 🙂 🙂 ）。。。</p><p>毕业的论文也选择了做毕设（做毕设的在学校里基本是只有个位数😓 ，毕竟是个财经类的大学）。</p><h4 id="初入社会">初入社会</h4><p>19年搞定了学校杂七杂八一堆事情后，回了杭州开始了自己的找工作之旅，学着人家刷题（用了🐂 客），虽然大部分公司都被自己的学历劝退，好在还是得到了几个笔试的机会，最有希望的两个huashu和tonghuashun，走到最后的面试，奈何自己的水平实在太差，最终还是倒在了门口，没有把脚迈进去。</p><p>正当自己准备打退堂鼓的时候，一家公司的老板打来了电话，并且在电话当中做了简单的面试，问的都是一些js的基础问题，算是考察自己的基础知识吧。<br>公司很小，小到除了老板除了我，只有一个员工，但是他却给了我莫大的帮助。<br>两个老板，一个做前端，一个做后端，虽然自己平常工作空闲，但是他们却很忙，尽管如此，他也不忘给我做很多的科普，<code>git</code>使用、<code>react</code>入门、<code>typescript</code>的好处，<code>vue</code>的技巧（因为本人是vue起步，但是公司主要使用<code>react</code>，一开始花了大功夫学习的<code>react</code>），而且他会<code>review</code>我的代码，告诉我一些技巧以及代码书写的规范等等，他对我的一些指导对我如今也是相当受益，让我在之后的进步当中，少走了很多的弯路，更是拓宽了自己的视野（在这里由衷的感谢🙏🏻 ）。</p><p>好景不长，2020年疫情如期而至，在家发霉了好几个月，学校也开始催促我的就业计划（因为该公司没有非常完善的手续，导致学校那边可能会认定自己是非就业状态，无奈只得离开了那里）。<br>因为社会形势的压力，最终在现在的公司定居，一定就是到现在。。。</p><h3 id="2022的自己">2022的自己</h3><p>废话讲了这么多，该进入正题了。</p><h4 id="工作上的自己">工作上的自己</h4><p>工资不算高，一年1k向上进步。<br>工作不算难，基本都能完成。<br>工作不算忙，基本到点都下班。</p><blockquote><p>今年的工作任务，基本都是按期完成。</p></blockquote><p>公司分成两个技术组，一组主营业务是对外的c端业务以及大量长期迭代的b端业务，所以经常看到他们频繁的开会以及加班。<br>而我幸运的来到了二组，基本保持一种缓慢的进度在持续迭代一个非常大型的项目，但是可能只是针对后端。</p><p>当然也还算是有所收获：</p><ol><li>帮助一组完成了一个草草的单据的可视化设计器。</li><li>完成了针对公司业务嵌入的可视化数据大屏设计器。</li><li>基于<code>antd</code>二次开发了符合公司规范的组件库。</li><li>参加了公司两次技术分享活动（文件上传+diff算法简析）。</li><li>第一次接手了公司维护已久且经N人之手的超级辣鸡代码。</li><li>第一次加了一个11点的班（结果第二天是周末，没有调休😤 ）。</li><li>第一次合作了一个超级墨迹的tongshi（延期一个月，差点骂人）。</li></ol><p>这一年走来，它让我渐渐的融入了前端这个行业。<br>当初的自己只知道闷头干，现在也知道了用户体验的重要性，为了完成一个需求，花费一天时间，去摸索（百度），去参考（copy）别人的意见。<br>掘金以及<code>github</code>也让我慢慢开始关注一些新奇的东西，平常逛逛掘金、看看阮一峰的<code>weekly</code>、看看<code>github</code>的大神都关注了啥东西，<a href="https://juejin.cn/user/1574156384091320">HelloGitHub</a>也能看到最近有哪些优质的项目（感谢🙏🏻），让自己不再拘泥于只有眼前工作的东西。</p><p>曾经的手写笔记也变成了博客笔记，虽然输出量不高，也算是对自己进步的肯定吧，各位有兴趣也可以过来<a href="https://food-billboard.github.io/">参观一下</a>（不算是高深内容，都是平常写东西时碰到的问题）。</p><h4 id="工作之外的自己">工作之外的自己</h4><p>悄悄来说，其实这一年来，除了工作外，大部分的时间自己都活跃在<code>github</code>当中。<br><img src="/images/每日进步小记/提交记录.jpg" /><br>做了好多个简单的小项目，也算是当做锻炼自己的技术吧。</p><p>从开始工作到现在，正经做迭代的项目的话，大概也有个10个项目吧，现在还在持续维护的可能一个手指头也数的过来了吧。</p><ol><li><a href="https://github.com/food-billboard/create-chart">create-chart</a><br>这个在前面的文章中也有介绍到，一个可视化大屏的设计器。<br>算是被<code>star</code>数量最多的项目了（10⭐️），虽然有几个是pengyou给点的😁 ，还有2个<code>fork</code>。<br>- 2021年底~至今</li><li><a href="https://github.com/food-billboard/create-chart-docs">create-chart-docs</a><br>上面可视化大屏项目的操作文档。<br>- 2022年中~至今</li><li><a href="https://github.com/food-billboard/bomber-man">bomber-man</a><br>FC游戏炸弹人复刻。<br>这个不是一个持续迭代的项目（因为前段时间在<strong>码上挑战</strong>拿了优秀奖😁 ，简单记录下）。<br><a href="https://code.juejin.cn/pen/7162350895340978189">游戏地址</a><br>- 2022-11~2022-11</li><li><a href="https://github.com/food-billboard/movie-weapp">movie-weapp</a><br>一个电影推荐的<code>Taro</code>项目。<br>这是最早开始的一个项目，虽然最近已经没有接着迭代了，简简单单记录下自己看过的电影，也还不错。<br>- 2020~2021年底</li><li><a href="https://github.com/food-billboard/mini-app-management">mini-app-management </a><br>前面的<code>create-chart</code>和<code>movie-weapp</code>项目的数据管理后台，用于管理相关的数据，以及用户数据还有媒体资源数据等等。<br>- 2021~至今</li><li><a href="https://github.com/food-billboard/node-server">node-server</a><br>包含了前面大屏、电影推荐以及管理后台的所有接口服务，以及文件资源的管理服务。<br>- 2020~至今</li><li><a href="https://github.com/food-billboard/chunk-file-load">chunk-file-load</a><br>文件分片上传的前端实现，多加了点小功能，比如支持其他的类型（blob、file、arraybuffer），支持小程序端分片上传。<br>- 2020~2022年中</li><li><a href="https://github.com/food-billboard/react-undo-component">react-undo-component</a><br><code>react</code>的<code>state</code>管理，支持<code>class</code>组件全量监听以及单个监听，以及<code>function</code>组件监听。<br>- 2021-12~2021-12</li><li><a href="https://github.com/food-billboard/food-billboard.github.io">food-billboard.github.io</a><br>当然还有自己的博客，基于<code>hexo</code>和<code>fluid</code>风格的博客。<br>- 2121~至今</li></ol><p>其实也不难看出，进步的来源还是在于不断的尝试和练习。<br>因为要独立完成一个前端项目，不得不去学习一下<code>node</code>。<br>因为要写后端，不得不去学习一下数据库、redis。<br>因为要部署，不得不去学习了一下服务器相关的概念。<br>之后衍生的各种需求：文件上传、docker、自动化部署<code>github action</code>。<br>有时因为依赖包功能与需求不符，也需要去查看源码。</p><blockquote><p>今年的小进步<br>长期活跃在<code>github</code>，终于在今年年底，完成了一次对开源项目的代码贡献😁 。<br>在开发大屏设计器时，发现了<code>antd</code>的<code>rc-input</code>有一个<code>bug</code>，成功提交<code>pr</code>。<br><img src="/images/每日进步小记/贡献列表.jpg" /></p></blockquote><blockquote><p>今年的小拓展<br>不知道从什么时候开始，突然想去搞一搞自动化交易，可能是一年被割了太多的韭菜，可能不想再努力了，可能想拓个副业。。。<br>尝试着去看了几本书，梦想着一步登天（海龟的交易法则、期货市场技术分析，也去学习了Python，看了一些视频）。<br>虽然到现在都还没有正式开始，哈哈哈。<br>相信有一天能靠自己的知识，变成真正的躺着赚钱（韭菜之王）。</p></blockquote><h3 id="向往的自己">向往的自己</h3><p>回首走过来的这一年，虽然有进步，但总让自己觉得似乎还不够，明明有那么多的时间，却也是举步维艰。<br>好多东西明明应该学习，应该了解的，却始终没有完成任务。</p><p>希望今后的自己能做到碰到问题就解决问题，不要再拖延了。<br>不要好高骛远，站在巨人的肩膀上，也不要忘记低头看看。<br>学习学习算法，数据结构。<br>多看看大佬写的代码。<br>多看看大佬看的文章。<br>多逛逛掘金😁 。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技术交易系统新概念笔记</title>
    <link href="/2022/11/28/%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E6%96%B0%E6%A6%82%E5%BF%B5%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/28/%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E6%96%B0%E6%A6%82%E5%BF%B5%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>技术交易系统新概念笔记</h1><h2 id="介绍">介绍</h2><p>本文是本人在阅读了《技术交易系统新概念》所作的笔记。</p><h2 id="开始">开始</h2><h3 id="目录">目录</h3><p>记录一下目录：</p><blockquote></blockquote><p>第一章 基本概念<br>第二章 抛物式时间/价格交易系统<br>第三章 波动交易系统<br>第四章 动向指标<br>第五章 动量概念-趋势平衡点交易系统<br>第六章 相对强弱指数<br>第七章 趋势-回调交易系统<br>第八章 摆动指标-短线交易系统<br>第九章 期货品种选择指标CSI<br>第十章 资金管理</p><h3 id="基本概念">基本概念</h3><p>这里用到的一些概念会贯穿所有章节使用，需要提前记好。</p><h4 id="LOP-HIP">LOP | HIP</h4><ul><li>LOP<br>其相邻的两根K线的最低价都高于其最低价</li><li>HIP<br>其相邻的两根K线的最高价均低于其最高价</li></ul><img src="/images/技术交易系统新概念笔记/基本概念-LOP-HIP.png" /><h4 id="SIP-HI-SIP-LO-SIP">SIP(HI SIP | LO SIP)</h4><p>简单来说应该就是最高和最低价格的意思吧。</p><img src="/images/技术交易系统新概念笔记/基本概念-SIP.png" /><h4 id="SIC">SIC</h4><p>表示交易中最有利的<strong>收盘价</strong>。<br>多头表示最高价。<br>空头表示最低价。</p><h4 id="SAR">SAR</h4><p>停止反转点，表示停止现有头寸，反方向操作。</p><h4 id="TR">TR</h4><p>真实价格范围<br>去下列值中的最大值</p><ol><li>最高价与最低价的差</li><li>最高价与昨日收盘价的差</li><li>最低价与昨日收盘价的差</li></ol><h4 id="MOCK模板">MOCK模板</h4><p>这里简单记录一下<code>javascript</code>实现的一个代码任务运行模板（其实就是怕自己忘记😁 ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> DATA_SOURCE = []<br><br><span class="hljs-comment">// 获取指定时间间隔的历史数据</span><br><span class="hljs-comment">// mock </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHistoryData</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">return</span> [&#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;date.getFullYear()&#125;</span>-<span class="hljs-subst">$&#123;date.getMonth() + <span class="hljs-number">1</span>&#125;</span>-<span class="hljs-subst">$&#123;date.getDate()&#125;</span>`</span><br>  &#125;]<br>&#125;<br><br><span class="hljs-comment">// 获取真实价格范围</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTR</span>(<span class="hljs-params">currentData, yestodayData</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> abs = <span class="hljs-built_in">Math</span>.abs<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(abs(currentData.high - currentData.low), abs(currentData.high - yestodayData.close), abs(currentData.low - yestodayData.close))<br>&#125;<br><br><span class="hljs-comment">// 定时任务执行</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dailyFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="抛物式时间-价格交易系统">抛物式时间/价格交易系统</h3><p>个人认为：<br>非常偏向数学方法的趋势跟踪系统。<br>只要记住他的计算功能，就非常容易完成整个系统。<br>马上就可以尝试使用代码完成系统。</p><p>记住几个关键的参数：</p><ul><li>AF<br>加速因子[0.02-0.2]<br>当日创下价格新高则<code>AF+0.02</code>(多头为新高，空头为新低)</li><li>SAR<br>停止反转点</li><li>SIP<br>价格极值</li><li>EP<br>此次交易开始的最极值（多头为最高，空头为最低）。</li></ul><p><code>明日SAR = 今日SAR + AF(今日最高价 - 今日SAR)</code></p><h4 id="规则">规则</h4><ul><li>入市时机<br>价格突破<code>SAR</code></li><li>建仓第一天<br>SAR = 前一次交易SIP</li><li>第一天之后<br>多头：<code>明日SAR = 今日SAR + AF(最高价 - 今日SAR)</code><br>空头：<code>明日SAR = 今日SAR - AF(最低价 - 今日SAR)</code></li><li>SAR不允许出现在前一日或今日价格区域<br>多头：明日SAR不能大于昨日或今日最低价，大于则<code>明日SAR = min(今日最低价，明日最低价)</code><br>空头：明日SAR不能小于昨日或今日最高价，小于则<code>明日SAR = max(今日最高价，明日最高价)</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> DATASOURCE: &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-number">1</span> | -<span class="hljs-number">1</span> <span class="hljs-comment">// 1 多头 -1 空头</span><br>  <span class="hljs-attr">dailyData</span>: &#123; <span class="hljs-comment">// 每日的交易数据</span><br>    <span class="hljs-attr">date</span>: <span class="hljs-built_in">string</span> <span class="hljs-comment">// 日期</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 开盘价</span><br>    <span class="hljs-attr">high</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 最高价</span><br>    <span class="hljs-attr">low</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 最低价</span><br>    <span class="hljs-attr">close</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 收盘价</span><br>    <span class="hljs-attr">SAR</span>: <span class="hljs-built_in">number</span> <br>    <span class="hljs-attr">EP</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 此次交易的极值</span><br>    <span class="hljs-attr">EP_SAR</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// EP+-SAR 当前最高价和今日SAR 的差值</span><br>    <span class="hljs-attr">AF</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 加速因子</span><br>    <span class="hljs-attr">AF_DIFF</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// EP_SAR * AF  </span><br>  &#125;[]<br>&#125; = []<br><br><span class="hljs-comment">// 模拟交易</span><br><span class="hljs-comment">// 用于下面的首次入市前的准备工作</span><br><span class="hljs-keyword">let</span> MOCK_DATASOURCE = []<br><br><span class="hljs-comment">// 获取指定时间间隔的历史数据</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHistoryData</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">return</span> [&#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;date.getFullYear()&#125;</span>-<span class="hljs-subst">$&#123;date.getMonth() + <span class="hljs-number">1</span>&#125;</span>-<span class="hljs-subst">$&#123;date.getDate()&#125;</span>`</span><br>  &#125;]<br>&#125;<br><br><span class="hljs-comment">// 之前从未做过交易</span><br><span class="hljs-comment">// 需要先找出前几周前的 最高|最低 点  </span><br><span class="hljs-comment">// 基于是上升还是下跌趋势  </span><br><span class="hljs-comment">// 当前设置为3周前  </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBeforeWeekPeak</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-comment">// 获取3周的时间间隔</span><br>  <span class="hljs-keyword">let</span> startDate<br>  <span class="hljs-keyword">let</span> endDate <br><br>  <span class="hljs-comment">// 第一天启用程序</span><br>  <span class="hljs-keyword">if</span>(!MOCK_DATASOURCE.length) &#123;<br>    <span class="hljs-keyword">const</span> historyData = getHistoryData()<br>    <span class="hljs-comment">// TODO </span><br>    <span class="hljs-comment">// 判断前几周的趋势</span><br>    <br>    <span class="hljs-keyword">let</span> peakData <br>    <span class="hljs-keyword">let</span> peakIndex <br>    <span class="hljs-comment">// 如果是上升</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-comment">// 找出前三周的最高点</span><br>      historyData.forEach(<span class="hljs-function">(<span class="hljs-params">history, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(!peakData || history.high &gt; peakData.high) &#123;<br>          peakData = history <br>          peakIndex = index <br>        &#125;<br>      &#125;)<br>      <span class="hljs-comment">// 找出最高点后4天的最低点</span><br>      <span class="hljs-comment">// 作为入市点</span><br>      <span class="hljs-keyword">const</span> enterDate = historyData.slice(peakIndex, peakIndex + <span class="hljs-number">4</span>)<br>      <span class="hljs-keyword">const</span> SAR = peakData.high<br>      <span class="hljs-keyword">const</span> EP = enterDate.low<br>      <span class="hljs-keyword">const</span> EP_SAR = <span class="hljs-built_in">Math</span>.abs(SAR - EP)<br>      MOCK_DATASOURCE.push(&#123;<br>        <span class="hljs-attr">state</span>: -<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">dailyData</span>: [<br>          date: enterDate.date,<br>          <span class="hljs-attr">open</span>: enterDate.open,<br>          <span class="hljs-attr">high</span>: enterDate.high,<br>          <span class="hljs-attr">low</span>: enterDate.low,<br>          <span class="hljs-attr">close</span>: enterDate.close,<br>          SAR, <br>          EP,<br>          EP_SAR,<br>          <span class="hljs-attr">AF</span>: <span class="hljs-number">0.02</span>,<br>          <span class="hljs-attr">AF_DIFF</span>: EP_SAR * <span class="hljs-number">0.02</span><br>        ]<br>      &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 下跌</span><br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 找出前三周的最低点</span><br>      historyData.forEach(<span class="hljs-function">(<span class="hljs-params">history, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(!peakData || history.low &lt; peakData.low) &#123;<br>          peakData = history <br>          peakIndex = index <br>        &#125;<br>      &#125;)<br>      <span class="hljs-comment">// 找出最低点后4天的最高点</span><br>      <span class="hljs-comment">// 作为入市点</span><br>      <span class="hljs-keyword">const</span> enterDate = historyData.slice(peakIndex, peakIndex + <span class="hljs-number">4</span>)<br><br>      <span class="hljs-keyword">const</span> SAR = peakData.low<br>      <span class="hljs-keyword">const</span> EP = enterDate.high<br>      <span class="hljs-keyword">const</span> EP_SAR = <span class="hljs-built_in">Math</span>.abs(SAR - EP)<br>      MOCK_DATASOURCE.push(&#123;<br>        <span class="hljs-attr">state</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">dailyData</span>: [<br>          date: enterDate.date,<br>          <span class="hljs-attr">open</span>: enterDate.open,<br>          <span class="hljs-attr">high</span>: enterDate.high,<br>          <span class="hljs-attr">low</span>: enterDate.low,<br>          <span class="hljs-attr">close</span>: enterDate.close,<br>          SAR, <br>          EP,<br>          EP_SAR,<br>          <span class="hljs-attr">AF</span>: <span class="hljs-number">0.02</span>,<br>          <span class="hljs-attr">AF_DIFF</span>: EP_SAR * <span class="hljs-number">0.02</span><br>        ]<br>      &#125;)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// TODO </span><br>  <span class="hljs-comment">// 持续进行模拟记录数据</span><br>  <span class="hljs-comment">// 但是这里有一点还没有弄清楚</span><br>  <span class="hljs-comment">// 先暂时卡着吧</span><br><br>&#125;<br><br><span class="hljs-comment">// 每日需要执行的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dailyFunction</span>(<span class="hljs-params">options=&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">  mock: <span class="hljs-literal">false</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  date: <span class="hljs-literal">null</span> </span></span><br><span class="hljs-params"><span class="hljs-function">&#125;</span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> &#123; mock, date &#125; = options <br>  <span class="hljs-keyword">const</span> _DATASOURCE = mock ? MOCK_DATASOURCE : DATASOURCE<br><br>  <span class="hljs-comment">// 初始化今日数据</span><br>  <span class="hljs-keyword">const</span> todayData = getHistoryData(date, date)<br>  <span class="hljs-keyword">const</span> newDailyData = &#123;<br>    ...todayData,<br>  &#125;<br><br>  <span class="hljs-comment">// 之前未做过交易</span><br>  <span class="hljs-comment">// 可以选择以下方法</span><br>  <span class="hljs-comment">// 也可以选择使用后面说到的第四章的方法（动向指数）</span><br>  <span class="hljs-keyword">if</span>(!_DATASOURCE.length) &#123;<br>    <span class="hljs-keyword">return</span> getBeforeWeekPeak()<br>  &#125;<br><br>  <span class="hljs-comment">// 是否今日开启交易</span><br>  <span class="hljs-keyword">const</span> lastTradeNote = _DATASOURCE[_DATASOURCE.length - <span class="hljs-number">2</span>]<br>  <span class="hljs-keyword">const</span> currentTradeNote = _DATASOURCE[_DATASOURCE.length - <span class="hljs-number">1</span>]<br>  <span class="hljs-keyword">const</span> &#123; dailyData, state &#125; = currentTradeNote<br><br>  <span class="hljs-comment">// 第一天</span><br>  <span class="hljs-keyword">if</span>(!dailyData.length) &#123;<br>    <span class="hljs-comment">// 之前存在交易</span><br>    <span class="hljs-keyword">if</span>(!!lastTradeNote &amp;&amp; <span class="hljs-built_in">Array</span>.isArray(lastTradeNote.dailyData) &amp;&amp; lastTradeNote.dailyData.length) &#123;<br>      <span class="hljs-keyword">const</span> &#123; dailyData, state &#125; = lastTradeNote<br>      <span class="hljs-comment">// 多头则获取前一次交易的最低价</span><br>      <span class="hljs-comment">// 空头则获取前一次交易的最高价</span><br>      <span class="hljs-comment">// 这里只需要取前一次交易的最后一天的极值EP即可</span><br>      newDailyData.SAR = dailyData[dailyData.length - <span class="hljs-number">1</span>].EP<br>      newDailyData.EP = state === <span class="hljs-number">1</span> ? newDailyData.high : newDailyData.low<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 非第一天</span><br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 前一天的数据</span><br>    <span class="hljs-keyword">const</span> yestodayData = dailyData[dailyData.length - <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">const</span> beforeYestodayData = dailyData[dailyData.length - <span class="hljs-number">2</span>] || &#123;<br>      <span class="hljs-attr">low</span>: <span class="hljs-number">999999</span>,<br>      <span class="hljs-attr">high</span>: -<span class="hljs-number">1</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(state === <span class="hljs-number">1</span>) &#123;<br>      newDailyData.SAR = yestodayData.SAR + yestodayData.AF_DIFF<br>      <span class="hljs-comment">// 多头 SAR 不得大于前一日或今日最低价，大于则选择当日或昨日最低价</span><br>      <span class="hljs-keyword">const</span> lessThenPrize = <span class="hljs-built_in">Math</span>.min(yestodayData.low, beforeYestodayData.low)<br>      newDailyData.SAR = newDailyData.SAR === <span class="hljs-built_in">Math</span>.min(lessThenPrize, newDailyData.SAR) ? newDailyData.SAR : lessThenPrize<br><br>      newDailyData.EP = <span class="hljs-built_in">Math</span>.max(yestodayData.EP, newDailyData.high)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      newDailyData.SAR = yestodayData.SAR - yestodayData.AF_DIFF<br>      <span class="hljs-comment">// 空头 SAR 不得小于前一日或今日最高价，小于则选择党日或昨日最高价</span><br>      <span class="hljs-keyword">const</span> greatThenPrize = <span class="hljs-built_in">Math</span>.max(yestodayData.high, beforeYestodayData.high)<br>      newDailyData.SAR = newDailyData.SAR === <span class="hljs-built_in">Math</span>.max(lessThenPrize, newDailyData.SAR) ? newDailyData.SAR : lessThenPrize<br><br>      newDailyData.EP = <span class="hljs-built_in">Math</span>.min(yestodayData.EP, newDailyData.low)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取 EP 和 SAR 的差值</span><br>  newDailyData.EP_SAR = <span class="hljs-built_in">Math</span>.abs(newDailyData.SAR - newDailyData.EP)<br>  newDailyData.AF = newDailyData.AF || <span class="hljs-number">0.02</span> <br>  <span class="hljs-comment">// 创新高或新低则增加AF值</span><br>  <span class="hljs-keyword">if</span>(state === <span class="hljs-number">1</span>) &#123;<br>    newDailyData.AF += newDailyData.high &gt; newDailyData.EP ? <span class="hljs-number">0.02</span> : <span class="hljs-number">0</span><br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    newDailyData.AF += newDailyData.low &lt; newDailyData.EP ? <span class="hljs-number">0.02</span> : <span class="hljs-number">0</span><br>  &#125;<br>  newDailyData.AF = <span class="hljs-built_in">Math</span>.min(<span class="hljs-number">0.2</span>, newDailyData.AF)<br>  newDailyData.AF_DIFF = newDailyData.AF * newDailyData.EP_SAR<br><br>  <span class="hljs-comment">// 多头发生价格突破</span><br>  <span class="hljs-keyword">const</span> isMultiBreak = state === <span class="hljs-number">1</span> &amp;&amp; newDailyData.low &lt; newDailyData.SAR<br>  <span class="hljs-comment">// 空头发生价格突破</span><br>  <span class="hljs-keyword">const</span> isEmptyBreak = state === -<span class="hljs-number">1</span> &amp;&amp; newDailyData.high &gt; newDailyData.SAR<br><br>  <span class="hljs-keyword">if</span>(isMultiBreak || isEmptyBreak) &#123;<br>    newDailyData.AF = <span class="hljs-number">0.02</span> <br>    newDailyData.SAR = newDailyData.EP <br>    newDailyData.EP = state === <span class="hljs-number">1</span> ? newDailyData.low : newDailyData.high <br>    newDailyData.EP_SAR = <span class="hljs-built_in">Math</span>.abs(newDailyData.SAR - newDailyData.EP)<br>    newDailyData.AF_DIFF = newDailyData.EP_SAR * newDailyData.AF<br><br>    <span class="hljs-built_in">console</span>.log((state === <span class="hljs-number">1</span> ? <span class="hljs-string">&#x27;多头&#x27;</span> : <span class="hljs-string">&#x27;空头&#x27;</span>) + <span class="hljs-string">&#x27;价格发生突破&#x27;</span>)<br><br>    _DATASOURCE.push(&#123;<br>      <span class="hljs-attr">state</span>: -<span class="hljs-number">1</span>,<br>      <span class="hljs-attr">dailyData</span>: [<br>        &#123;<br>          ...newDailyData,<br>        &#125;<br>      ]<br>    &#125;)<br>  &#125;<br>  <span class="hljs-comment">// 记录今日数据</span><br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;今日价格数据:&#x27;</span> + <span class="hljs-built_in">JSON</span>.stringify(newDailyData))<br>    _DATASOURCE[_DATASOURCE.length - <span class="hljs-number">1</span>].dailyData.push(newDailyData)<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 数据清空</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clearData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  DATASOURCE = &#123;<br>    <span class="hljs-attr">state</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">dailyData</span>: []<br>  &#125;<br>  MOCK_DATASOURCE = &#123;<br>    <span class="hljs-attr">state</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">dailyData</span>: []<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="波动交易系统">波动交易系统</h3><p>也是一个趋势跟踪的系统。<br>根据市场的波动性来作出相应的操作。</p><ul><li><code>ATR</code>计算<br><img src="/images/技术交易系统新概念笔记/波动交易系统-ATR.jpg" /></li></ul><p><code>ATR_t</code>是当日平均真实价格范围，<code>ATR_p</code>是前一日的平均真实价格范围。<br><code>TR</code>是当日真实价格范围。</p><p>上述计算是根据七个交易日为标的做的计算。<br><code>ATR_p</code>即将加上今日以及前6个交易日的真实价格范围相加，并除7得出的，之后每一日的计算只要简单得将<strong>前一日的平均真实价格范围</strong>带入上述公式即可。</p><ul><li><p>ARC<br><code>ARC = ATR * C</code><br>C是一个[2.8, 3.1]之间的常数（一般为3）。</p></li><li><p>系统交易规则</p><p>计算出七天的<code>ARC</code>，找出七天最高收盘价<code>SIC</code>，<code>SAR = SIC - ARC</code><br>若第二日的收盘价低于<code>SAR</code>，平仓建立空头。</p></li></ul><h4 id="真实价格范围">真实价格范围</h4><p>取以下三种的最大值。</p><ol><li>当日最高价到当日最低价的范围。</li><li>昨日收盘价到当日最高价的范围。</li><li>昨日收盘价到当日最低价的范围。</li></ol><h4 id="代码实现">代码实现</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-comment">// 常数C </span><br><span class="hljs-keyword">const</span> C = <span class="hljs-number">3</span> <span class="hljs-comment">// [2.8, 3]</span><br><br><span class="hljs-keyword">const</span> DATA_SOURCE: &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-number">1</span> | -<span class="hljs-number">1</span> <span class="hljs-comment">// 当前是空头(-1)还是多头(1)</span><br>  <span class="hljs-attr">TR</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 当日的真实价格范围</span><br>  <span class="hljs-attr">ATR</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 当日的平均真实价格范围</span><br>  <span class="hljs-attr">ARC</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// ATR * C</span><br>  <span class="hljs-attr">SAR</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 停止反转点  </span><br>  <span class="hljs-attr">SIC</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 最低收盘价</span><br>  <span class="hljs-attr">high</span>: <span class="hljs-built_in">number</span> <br>  <span class="hljs-attr">close</span>: <span class="hljs-built_in">number</span> <br>  <span class="hljs-attr">low</span>: <span class="hljs-built_in">number</span> <br>  <span class="hljs-attr">open</span>: <span class="hljs-built_in">number</span> <br>  <span class="hljs-attr">date</span>: <span class="hljs-built_in">string</span> <br>&#125; = []<br><br><span class="hljs-comment">// 获取指定时间间隔的历史数据</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHistoryData</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">return</span> [&#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;date.getFullYear()&#125;</span>-<span class="hljs-subst">$&#123;date.getMonth() + <span class="hljs-number">1</span>&#125;</span>-<span class="hljs-subst">$&#123;date.getDate()&#125;</span>`</span><br>  &#125;]<br>&#125;<br><br><span class="hljs-comment">// 获取真实价格范围</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTR</span>(<span class="hljs-params">currentData, yestodayData</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> abs = <span class="hljs-built_in">Math</span>.abs<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(abs(currentData.high - currentData.low), abs(currentData.high - yestodayData.close), abs(currentData.low - yestodayData.close))<br>&#125;<br><br><span class="hljs-comment">// 每日定时执行方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dailyFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> currentDateData = getHistoryData()<br><br>  <span class="hljs-comment">// 之前未做过任何交易</span><br>  <span class="hljs-keyword">if</span>(DATA_SOURCE.length &lt; <span class="hljs-number">7</span>) &#123;<br>    <span class="hljs-comment">// 简单从空头位置开始准备进入市场</span><br>    <span class="hljs-keyword">if</span>(DATA_SOURCE.length &lt; <span class="hljs-number">6</span>) &#123;<br>      DATA_SOURCE.push(&#123;<br>        ...currentDateData,<br>        <span class="hljs-attr">TR</span>: getTR()<br>      &#125;)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">const</span> TR = getTR()<br>      <span class="hljs-keyword">const</span> ATR = DATA_SOURCE.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.TR).reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc + cur, <span class="hljs-number">0</span>) / <span class="hljs-number">7</span><br>      DATA_SOURCE.push(&#123;<br>        ...currentDateData,<br>        TR,<br>        ATR,<br>        <span class="hljs-attr">ARC</span>: ATR * C<br>      &#125;)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> [lastDayData] = DATA_SOURCE.slice(-<span class="hljs-number">1</span>)<br><br>  <span class="hljs-keyword">const</span> todayTR = getTR(currentDateData, lastDayData)<br>  <span class="hljs-keyword">const</span> todayATR = (<span class="hljs-number">6</span> * lastDayData.ATR + todayTR) / <span class="hljs-number">7</span><br>  <span class="hljs-keyword">const</span> ARC = todayATR * C<br>  <span class="hljs-keyword">let</span> SIC <br>  <span class="hljs-keyword">let</span> SAR <br>  <span class="hljs-keyword">let</span> state <br>  <span class="hljs-comment">// 空头</span><br>  <span class="hljs-keyword">if</span>(lastDayData.state == -<span class="hljs-number">1</span>) &#123;<br>    SIC = <span class="hljs-built_in">Math</span>.min(lastDayData.SIC, currentDateData.close)<br>    SAR = lastDayData.SIC + lastDayData.ARC<br>    <span class="hljs-comment">// 收盘价上穿SAR 变为多头</span><br>    state = currentDateData.close &gt; SAR ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span><br>    <span class="hljs-comment">// 变为多头更改SIC为当日收盘价</span><br>    <span class="hljs-keyword">if</span>(state === <span class="hljs-number">1</span>) &#123;<br>      SIC = currentDateData.close<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 多头</span><br>  <span class="hljs-keyword">else</span> &#123;<br>    SIC = <span class="hljs-built_in">Math</span>.max(lastDayData.SIC, currentDateData.close)<br>    SAR = lastDayData.SIC - lastDayData.ARC<br>    <span class="hljs-comment">// 收盘价下穿SAR 变为空头</span><br>    state = currentDateData.close &lt; SAR ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span><br>    <span class="hljs-comment">// 变为空头更改SIC为当日收盘价</span><br>    <span class="hljs-keyword">if</span>(state === <span class="hljs-number">1</span>) &#123;<br>      SIC = currentDateData.close<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> newData = &#123;<br>    ...currentDateData,<br>    <span class="hljs-attr">TR</span>: todayTR,<br>    <span class="hljs-attr">ATR</span>: todayATR,<br>    ARC,<br>    SIC,<br>    SAR,<br>    state<br>  &#125;<br><br>  <span class="hljs-comment">// 上面state改变则触发交易操作</span><br>  DATA_SOURCE.push(newData)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="动向指标">动向指标</h3><p>根据一个<code>0-100</code>的指标来跟踪产品趋势。</p><h4 id="几个指标概念">几个指标概念</h4><h5 id="DM和-DM">+DM和-DM</h5><p>今日的价格范围与昨日价格返回的差值<br>比如：昨天的价格范围是<code>[100 200]</code>，今日的价格范围是<code>[150, 300]</code>，则使用<code>+DM</code>表示为<code>300 - 200 = 100</code><br><img src="/images/技术交易系统新概念笔记/动向指标-DM.jpg" /></p><p>当今日与昨日是<strong>包含</strong>关系时，DM为<code>0</code>。<br><code>+DM</code>和<code>-DM</code>始终是<strong>正数</strong>。</p><blockquote><p>计算规则<br>党日价格范围超出昨日价格范围中的较大部分。</p></blockquote><h5 id="DI和-DI">+DI和-DI</h5><p>方向指数，相对于真实价格范围，变动的百分比。<br><img src="/images/技术交易系统新概念笔记/动向指标-DI.jpg" /></p><p>价格<strong>上涨</strong>用<code>+DI</code>，<strong>下跌</strong>用<code>-DI</code>。</p><img src="/images/技术交易系统新概念笔记/动向指标-DI14.png" />  <blockquote><p>求出<code>14</code>天的平均值来作为指标，<br>计算出14天的值以后便可以用简便方法进行计算。</p></blockquote><img src="/images/技术交易系统新概念笔记/动向指标-DI14-next.jpg" />  <h5 id="DX">DX</h5><p>动向指标<br><code>DX = DIDiff / DISum</code>（参数详见下表）<br><code>DX</code>值越大，运动越<strong>强</strong>；<code>DX</code>值月销，运动越<strong>弱</strong>。<br>无论价格向上或向下运动，不会影响数值，即向上或向下运动幅度大，那么他的值都很<strong>大</strong>。</p><h5 id="ADX">ADX</h5><p>14天<code>DX</code>的平均值</p><h5 id="ADXR">ADXR</h5><p>方向运动的坐标系上用于量度期货、货币、股票等等的价格变化的一个指标<br><code>ADXR = (当日ADX + 14天前的ADX14) / 2</code></p><h5 id="CSI-K">CSI &amp; K</h5><ul><li>CSI<br>根据相关关联参数计算而得来的产品选择指标</li><li>K<br>与<code>CIS</code>相关的常量系数</li></ul><h4 id="数据记录">数据记录</h4><table><thead><tr><th>date</th><th>open</th><th>high</th><th>low</th><th>close</th><th>TR</th><th>DMHigh</th><th>DMLow</th><th>TR14</th><th>DI14High</th><th>DI14Low</th><th>DIDiff</th><th>DISum</th><th>DX</th><th>ADX</th></tr></thead><tbody><tr><td>日期</td><td>开盘价</td><td>最高价</td><td>最低价</td><td>收盘价</td><td>真实价格范围</td><td>+DM</td><td>-DM</td><td>TR14</td><td>+DI14</td><td>-DI14</td><td>+DI14 - (-DI14)</td><td>+DI14 + (-DI14)</td><td>DIDiff / DISum</td><td>14天DX的平均值</td></tr></tbody></table><h4 id="js实现">js实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  &#123;</span><br><span class="hljs-comment">    // 日期</span><br><span class="hljs-comment">    date: &#x27;2022-02-25&#x27;,</span><br><span class="hljs-comment">    // 开盘价</span><br><span class="hljs-comment">    open: 100,</span><br><span class="hljs-comment">    // 最高价</span><br><span class="hljs-comment">    high: 100,</span><br><span class="hljs-comment">    // 最低价</span><br><span class="hljs-comment">    low: 100,</span><br><span class="hljs-comment">    // 收盘价</span><br><span class="hljs-comment">    close: 100,</span><br><span class="hljs-comment">    // TR  </span><br><span class="hljs-comment">    TR: 10,</span><br><span class="hljs-comment">    // +DM </span><br><span class="hljs-comment">    DMHigh: 10, </span><br><span class="hljs-comment">    // -DM  </span><br><span class="hljs-comment">    DMLow: 0,</span><br><span class="hljs-comment">    // TR14  </span><br><span class="hljs-comment">    TR14: 14,</span><br><span class="hljs-comment">    // DMHigh14</span><br><span class="hljs-comment">    DMHigh14: 10,</span><br><span class="hljs-comment">    // DMLow14</span><br><span class="hljs-comment">    DMLow14: 10,</span><br><span class="hljs-comment">    // +DI14 </span><br><span class="hljs-comment">    DI14High: 10,</span><br><span class="hljs-comment">    // -DI14</span><br><span class="hljs-comment">    DI14Low: 10,</span><br><span class="hljs-comment">    // +DI14和-DI14的差值  </span><br><span class="hljs-comment">    DIDiff: 10,</span><br><span class="hljs-comment">    // +DI14和-DI14的和</span><br><span class="hljs-comment">    DISum: 10,</span><br><span class="hljs-comment">    // 上面两个值的比值 动向指标</span><br><span class="hljs-comment">    DX: 10,</span><br><span class="hljs-comment">    // 14日DX的平均值</span><br><span class="hljs-comment">    ADX: 30,</span><br><span class="hljs-comment">    // 平均动向指标比率</span><br><span class="hljs-comment">    ADXR: 30,</span><br><span class="hljs-comment">    // 平均14天真实价格范围</span><br><span class="hljs-comment">    ATR14: 20,</span><br><span class="hljs-comment">    // 期货品种选择指标</span><br><span class="hljs-comment">    CSI: 20,</span><br><span class="hljs-comment">    // 手续费</span><br><span class="hljs-comment">    charge: 20 </span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> DATA_SOURCE = []<br><span class="hljs-comment">// 当前的交易信息</span><br><span class="hljs-keyword">const</span> TRADE_INFO = &#123;<br>  <span class="hljs-comment">// -1 初始化 0 空头 1 多头</span><br>  <span class="hljs-attr">status</span>: -<span class="hljs-number">1</span>,<br>  <span class="hljs-comment">// DI14和-DI14交叉时的极端价位，用于消除价格波动噪声  </span><br>  <span class="hljs-attr">limit</span>: -<span class="hljs-number">1</span>,<br>&#125;<br><br><span class="hljs-comment">// 时间跨度 14 天</span><br><span class="hljs-keyword">const</span> RANGE_DAY_COUNT = <span class="hljs-number">14</span> <br><br><span class="hljs-comment">// 获取指定时间间隔的历史数据</span><br><span class="hljs-comment">// mock </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHistoryData</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">return</span> [&#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;date.getFullYear()&#125;</span>-<span class="hljs-subst">$&#123;date.getMonth() + <span class="hljs-number">1</span>&#125;</span>-<span class="hljs-subst">$&#123;date.getDate()&#125;</span>`</span>,<br>    charge,<br>  &#125;]<br>&#125;<br><br><span class="hljs-comment">// 获取DM值 </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDMData</span>(<span class="hljs-params">currentData, yestodayData</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123;  <br>    <span class="hljs-attr">high</span>: currHigh,<br>    <span class="hljs-attr">low</span>: currLow<br>  &#125; = currentData <br>  <span class="hljs-keyword">const</span> &#123;  <br>    high,<br>    low<br>  &#125; = yestodayData <br>  <span class="hljs-keyword">let</span> DMHigh = <span class="hljs-number">0</span> <br>  <span class="hljs-keyword">let</span> DMLow = <span class="hljs-number">0</span> <br><br>  <span class="hljs-keyword">const</span> condition1 = currHigh - high <br><br>  <span class="hljs-keyword">const</span> condition2 = low - currLow <br><br>  <span class="hljs-comment">// 如果是包含关系就都为0 </span><br>  <span class="hljs-keyword">if</span>(condition1 &gt; <span class="hljs-number">0</span> || condition2 &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 向上运动更多</span><br>    <span class="hljs-keyword">if</span>(condition1 &gt; condition2) &#123;<br>      DMHigh = condition1<br>    &#125;<br>    <span class="hljs-comment">// 向下运动更多</span><br>    <span class="hljs-keyword">else</span> &#123;<br>      DMLow = condition2<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    DMHigh,<br>    DMLow<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 获取真实价格范围</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTR</span>(<span class="hljs-params">currentData, yestodayData</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> abs = <span class="hljs-built_in">Math</span>.abs<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(abs(currentData.high - currentData.low), abs(currentData.high - yestodayData.close), abs(currentData.low - yestodayData.close))<br>&#125;<br><br><span class="hljs-comment">// 定时任务执行</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dailyFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> currentData = getHistoryData() <br>  <span class="hljs-keyword">const</span> &#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    date,<br>    charge<br>  &#125; = currentData <br>  <span class="hljs-keyword">const</span> newData = &#123;<br>    date,<br>    high,<br>    open,<br>    close,<br>    low,<br>    charge<br>  &#125; <br><br>  <span class="hljs-comment">// 不是第一天，如果是第一天只需要简单记录数据就可以了</span><br>  <span class="hljs-keyword">if</span>(!DATA_SOURCE.length) &#123;<br>    <span class="hljs-keyword">const</span> yestoday = DATA_SOURCE[DATA_SOURCE.length - <span class="hljs-number">1</span>]<br><br>    <span class="hljs-comment">// DM</span><br>    <span class="hljs-keyword">const</span> &#123; DMHigh, DMLow &#125; = getDMData(newData, yestoday)<br>    newData.DMHigh = DMHigh<br>    newData.DMLow = DMLow<br><br>    <span class="hljs-comment">// TR  </span><br>    <span class="hljs-keyword">const</span> tr = getTR(newData, yestoday)<br>    newData.TR = tr <br><br>    <span class="hljs-comment">// 大于最短时间周期（14天），满足所有数据的计算条件</span><br>    <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= (RANGE_DAY_COUNT - <span class="hljs-number">1</span>)) &#123;<br>      <br>      <span class="hljs-comment">// 如果是刚好满足条件，需要做累计计算</span><br>      <span class="hljs-keyword">if</span>(DATA_SOURCE.length == (RANGE_DAY_COUNT - <span class="hljs-number">1</span>)) &#123;<br>        <span class="hljs-keyword">const</span> previousData = DATA_SOURCE.slice(DATA_SOURCE.length - RANGE_DAY_COUNT - <span class="hljs-number">1</span>)<br><br>        <span class="hljs-comment">// tr14 </span><br>        newData.TR14 = tr + previousData.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>          acc += cur.TR<br>          <span class="hljs-keyword">return</span> acc <br>        &#125;, <span class="hljs-number">0</span>)<br><br>        <span class="hljs-comment">// dmhigh14 </span><br>        newData.DMHigh14 = DMHigh + previousData.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>          acc += (cur.DMHigh || <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">return</span> acc <br>        &#125;, <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// dmlow14</span><br>        newData.DMLow14 = DMLow + previousData.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>          acc += (cur.DMLow || <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">return</span> acc <br>        &#125;, <span class="hljs-number">0</span>)<br><br>      &#125;<br>      <span class="hljs-comment">// 超过条件只要简单使用昨日数据进行计算即可</span><br>      <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; TR14, DMHigh14, DMLow14 &#125; = yestoday<br><br>        <span class="hljs-comment">// tr14</span><br>        newData.TR14 = TR14 - TR14 / RANGE_DAY_COUNT + tr <br>        <span class="hljs-comment">// dmhigh14 </span><br>        newData.DMHigh14 = DMHigh14 - DMHigh14 / RANGE_DAY_COUNT + DMHigh <br>        <span class="hljs-comment">// dmlow14 </span><br>        newData.DMLow14 = DMLow14 - DMLow14 / RANGE_DAY_COUNT + DMLow <br><br>      &#125;<br><br>      <span class="hljs-comment">// ATR14</span><br>      newData.ATR14 = newData.TR14 / <span class="hljs-number">14</span> <br>      <span class="hljs-comment">// +DI14</span><br>      newData.DI14High = newData.DMHigh14 / newData.TR14 * <span class="hljs-number">100</span> <br>      <span class="hljs-comment">// -DI14</span><br>      newData.DI14Low = newData.DMLow14 / newData.TR14 * <span class="hljs-number">100</span><br>      <span class="hljs-comment">// DIDiff </span><br>      newData.DIDiff = <span class="hljs-built_in">Math</span>.abs(newData.DI14High - newData.DI14Low)<br>      <span class="hljs-comment">// DISum</span><br>      newData.DISum = newData.DI14High + newData.DI14Low<br>      <span class="hljs-comment">// DX  </span><br>      newData.DX = newData.DIDiff / newData.DISum * <span class="hljs-number">100</span><br><br>      <span class="hljs-comment">// 超过28天可以开始计算ADX</span><br>      <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= (RANGE_DAY_COUNT * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>)) &#123;<br>        <span class="hljs-comment">// 如果是刚好满足条件，需要做累计计算</span><br>        <span class="hljs-keyword">if</span>(DATA_SOURCE.length == (RANGE_DAY_COUNT * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>)) &#123;<br>          <span class="hljs-keyword">const</span> previousData = DATA_SOURCE.slice(DATA_SOURCE.length - RANGE_DAY_COUNT - <span class="hljs-number">1</span>)<br><br>          <span class="hljs-comment">// adx </span><br>          newData.ADX = (newData.DX + previousData.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>            acc += cur.DX<br>            <span class="hljs-keyword">return</span> acc <br>          &#125;, <span class="hljs-number">0</span>)) / RANGE_DAY_COUNT<br><br>        &#125;<br>        <span class="hljs-comment">// 超过条件只要简单使用昨日数据进行计算即可</span><br>        <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">const</span> &#123; ADX &#125; = yestoday<br><br>          <span class="hljs-comment">// adx</span><br>          newData.ADX = (ADX * (RANGE_DAY_COUNT - <span class="hljs-number">1</span>) + newData.DX) / RANGE_DAY_COUNT<br><br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// 超过14 * 3 天开始计算ADXR</span><br>      <span class="hljs-comment">// 因为28天后才能计算ADX</span><br>      <span class="hljs-comment">// ADXR计算需要14天前的ADX</span><br>      <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= RANGE_DAY_COUNT * <span class="hljs-number">3</span>) &#123;<br>        newData.ADXR = (newData.ADX + newData[newData.length - RANGE_DAY_COUNT]) / <span class="hljs-number">2</span><br>        newData.CSI = newData.ADXR * newData.ATR14 * ( <span class="hljs-number">100</span> / <span class="hljs-number">1</span> * (<span class="hljs-number">1</span> / <span class="hljs-number">150</span> + newData.charge) ) * <span class="hljs-number">100</span> <br>      &#125;<br><br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-comment">// ---具体的交易操作---</span><br>  <span class="hljs-comment">// 计算出ADXR才算能开始真正的交易</span><br>  <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= RANGE_DAY_COUNT * <span class="hljs-number">3</span>) &#123;<br><br>    <span class="hljs-comment">// ADXR超过25表示有利可图</span><br>    <span class="hljs-comment">// CSI越高越好</span><br>    <span class="hljs-comment">// 关于CSI的大小标准还有待考证</span><br>    <span class="hljs-keyword">if</span>(newData.ADXR &gt; <span class="hljs-number">25</span> &amp;&amp; newData.CSI &gt; <span class="hljs-number">400</span>) &#123;<br><br>      <span class="hljs-comment">// DI14 &lt; -DI14 时多头</span><br>      <span class="hljs-comment">// DI14 &gt; -DI14 时空头</span><br>      <span class="hljs-comment">// ADX &lt; (DI14&amp;-DI14) 时空头</span><br>      <span class="hljs-comment">// DI14 == -DI14</span><br><br><br>      <span class="hljs-comment">// 空头 ADX &lt; (DI14&amp;-DI14)</span><br>      <span class="hljs-keyword">if</span>(newData.ADX &lt; newData.DI14High &amp;&amp; newData.ADX &lt; newData.DI14Low) &#123;<br>        <span class="hljs-keyword">if</span>(TRADE_INFO.status === <span class="hljs-number">1</span>) &#123;<br>          TRADE_INFO.status = <span class="hljs-number">0</span><br>          TRADE_INFO.limit = newData.high <br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 空头</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(newData.DI14High &gt; newData.DI14Low) &#123;<br>        <span class="hljs-comment">// 初始化或者当日最低价 低于 交叉时的最低价</span><br>        <span class="hljs-comment">// 改动为空头</span><br>        <span class="hljs-keyword">if</span>(TRADE_INFO.status === -<span class="hljs-number">1</span> || newData.low &lt; TRADE_INFO.limit) &#123;<br>          <span class="hljs-comment">// 赋值当前的买卖信息，为下次做准备</span><br>          TRADE_INFO.status = <span class="hljs-number">1</span> <br>          TRADE_INFO.limit = newData.high<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 多头</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(newData.DI14High &lt; newData.DI14Low) &#123;<br>        <span class="hljs-comment">// 初始化或者当日最高价 高于 交叉时的最高价</span><br>        <span class="hljs-comment">// 改动为多头</span><br>        <span class="hljs-keyword">if</span>(TRADE_INFO.status === -<span class="hljs-number">1</span> || newData.high &gt; TRADE_INFO.limit) &#123;<br>          TRADE_INFO.status = <span class="hljs-number">0</span> <br>          TRADE_INFO.limit = newData.low <br>        &#125;<br>      &#125;<br><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// ---具体的交易操作---</span><br><br>  DATA_SOURCE.push(newData)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>存在问题</p></blockquote><ol><li>上面<code>ADXR</code>超过25才是有利可图，但是如果在产品的<code>ADXR</code>超过25时买入，但是之后降低到了25以下，此时，入市的资金该如何处理。</li><li>大趋势下，如持续上涨，是否需要对持续<strong>DI交叉</strong>做更多的资金买入。</li><li>具体的交易操作还可以根据<strong>ADX</strong>来进行更细致的判断，更多细节有待接着研究（55页）。</li><li>上述代码需要一个特殊的指标<code>CSI</code>，可能在第九章有讲到，待阅读😁 （经过阅读，九章中对于<code>CSI</code>的定义是越高越好，但是做的是一个相对比较，并没有明确说明高于某一个值表示有利可图，待考证）。</li></ol><h3 id="期货品种选择指标CSI">期货品种选择指标CSI</h3><p>为什么先写这一章，因为他跟前面第四章有关（但是也没有那么有关）。</p><blockquote><p>ps<br>因为本人并没有想去做期货等相关的交易，所以可能对于本章，作用不大，简单带过。</p></blockquote><h4 id="公式">公式</h4>  <img src="/images/技术交易系统新概念笔记/期货品种选择指标CSI-CSI公式.jpg" />  <ol><li>ADXR<br>第四章中提到的动向指标。</li><li>ATR14<br>14天的平均真实价格范围。<br>根据前面基本概念中提到的<code>TR</code>计算而来。</li><li>V<br>每运动1分（货币单位）、实际代表的价值（即以货币单位计量的ATR14的基本增幅）<br>笔者理解的意思应该就是市场每运动一个货币单位时，每份合约所发生的价格变动（那在股票中是不是就是<strong>一手</strong>的意思）。</li><li>M<br>保证金数量</li><li>C<br>手续费</li></ol><h4 id="总结">总结</h4><pre><code>根据上面的公式以及书中的介绍，`CSI`越高，说明交易越有利，并且可能风险也更小。  （本人因为可能交易的是股票，所以上面的保证金并不存在）。  </code></pre><h3 id="动量概念-趋势平衡点交易系统">动量概念-趋势平衡点交易系统</h3><h4 id="几个概念">几个概念</h4><h5 id="MF">MF</h5><p>动量因子，描述价格变化的加速度，比如昨天比前天增加了1块，今天比昨天多增加1块的话，动量因子为0，因为加速度没有发生变化。<br><img src="/images/技术交易系统新概念笔记/动量概念-趋势平衡点交易系统-动量因子.jpg" /></p><ul><li>计算<br>当日收盘价 - 前天的收盘价</li></ul><h5 id="TBP">TBP</h5><p>趋势平衡点</p><h5 id="AverageX">AverageX</h5><p>最高价、最低价、收盘价的平均值</p><h5 id="ProtectStop">ProtectStop</h5><p>防御停损点<br>指定当价格达到点时<strong>停止头寸</strong>。</p><ul><li>空头：<code>ProtectStop = AverageX + TR</code></li><li>多头：<code>ProtectStop = AverageX - TR</code></li></ul><h5 id="TargetPoint">TargetPoint</h5><p>目标价位<br>指定当价格到达指定获利位置时<strong>停止头寸</strong></p><ul><li>空头：<code>2 * AverageX - H</code></li><li>多头：<code>2 * AverageX - L</code><br><code>L &amp; H</code>表示最低和最高价</li></ul><h4 id="交易过程">交易过程</h4><ol><li>当日MF &gt; 昨日MF &amp;&amp; 当日MF &gt; 前天MF<br><strong>多头</strong></li><li>当日MF &lt; 昨日MF &amp;&amp; 当日MF &lt; 前天MF<br><strong>空头</strong></li><li><strong>目标价位</strong>了结，不做<strong>反向</strong>交易</li><li><strong>停止点</strong>结束交易，不做<strong>反向</strong>交易</li><li>了结后再次进入遵循<code>1、2</code>规则</li></ol><h4 id="js实现-2">js实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  // 日期</span><br><span class="hljs-comment">  date: &#x27;2022-02-25&#x27;,</span><br><span class="hljs-comment">  // 开盘价</span><br><span class="hljs-comment">  open: 100,</span><br><span class="hljs-comment">  // 最高价</span><br><span class="hljs-comment">  high: 100,</span><br><span class="hljs-comment">  // 最低价</span><br><span class="hljs-comment">  low: 100,</span><br><span class="hljs-comment">  // 收盘价</span><br><span class="hljs-comment">  close: 100,</span><br><span class="hljs-comment">  // 动量因子</span><br><span class="hljs-comment">  MF: 20,</span><br><span class="hljs-comment">  // 趋势平衡点</span><br><span class="hljs-comment">  TBP: 20,</span><br><span class="hljs-comment">  // TR </span><br><span class="hljs-comment">  TR: 20,</span><br><span class="hljs-comment">  // 最高 最低 收盘价的平均值</span><br><span class="hljs-comment">  AverageX: 20,</span><br><span class="hljs-comment">  // 防御停损点</span><br><span class="hljs-comment">  ProtectStop: 20,</span><br><span class="hljs-comment">  // 目标价位</span><br><span class="hljs-comment">  TargetPoint: 20 </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> DATA_SOURCE = []<br><span class="hljs-comment">// 当前的交易信息</span><br><span class="hljs-keyword">const</span> TRADE_INFO = &#123;<br>  <span class="hljs-comment">// -1 初始化 0 空头 1 多头</span><br>  <span class="hljs-attr">status</span>: -<span class="hljs-number">1</span>,<br>&#125;<br><br><span class="hljs-comment">// 获取真实价格范围</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTR</span>(<span class="hljs-params">currentData, yestodayData</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> abs = <span class="hljs-built_in">Math</span>.abs<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(abs(currentData.high - currentData.low), abs(currentData.high - yestodayData.close), abs(currentData.low - yestodayData.close))<br>&#125;<br><br><span class="hljs-comment">// 获取指定时间间隔的历史数据</span><br><span class="hljs-comment">// mock </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHistoryData</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">return</span> [&#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;date.getFullYear()&#125;</span>-<span class="hljs-subst">$&#123;date.getMonth() + <span class="hljs-number">1</span>&#125;</span>-<span class="hljs-subst">$&#123;date.getDate()&#125;</span>`</span><br>  &#125;]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dailyFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> currentData = getHistoryData() <br>  <span class="hljs-keyword">const</span> &#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    date,<br>    charge<br>  &#125; = currentData <br>  <span class="hljs-keyword">const</span> newData = &#123;<br>    date,<br>    high,<br>    open,<br>    close,<br>    low,<br>    charge,<br>    <span class="hljs-attr">AverageX</span>: (high + low + close) / <span class="hljs-number">3</span><br>  &#125; <br><br>  <span class="hljs-comment">// 超过1天可以计算TR </span><br>  <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= <span class="hljs-number">1</span>) &#123;<br>    newData.TR = getTR(newData, DATA_SOURCE[DATA_SOURCE.length - <span class="hljs-number">1</span>])<br>  &#125;<br><br>  <span class="hljs-comment">// 超过2天才能计算动量因子</span><br>  <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">const</span> [beforeYestoday, yestoday] = DATA_SOURCE.slice(-<span class="hljs-number">2</span>)<br>    newData.MF = newData.close - beforeYestoday.close<br><br><br>    <span class="hljs-comment">// 超过4天才能进行交易判断</span><br>    <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= <span class="hljs-number">4</span>) &#123;<br>      <br>      <span class="hljs-comment">// 退出市场判断</span><br>      <span class="hljs-keyword">if</span>(<br>        <span class="hljs-comment">// 在市且达到防御停损点 就退出市场</span><br>        (TRADE_INFO == <span class="hljs-number">1</span> &amp;&amp; newData.close &lt; yestoday.ProtectStop) <br>        || <br>        (TRADE_INFO == -<span class="hljs-number">1</span> &amp;&amp; newData.close &gt; yestoday.ProtectStop)<br>        ||<br>        <span class="hljs-comment">// 在市且达到目标价位</span><br>        (TRADE_INFO == <span class="hljs-number">1</span> &amp;&amp; newData.close &gt; yestoday.TargetPoint) <br>        || <br>        (TRADE_INFO == -<span class="hljs-number">1</span> &amp;&amp; newData.close &lt; yestoday.TargetPoint)<br>      ) &#123;<br>        <span class="hljs-comment">// 退出市场</span><br>        TRADE_INFO.status = -<span class="hljs-number">1</span> <br>      &#125;<br>      <span class="hljs-comment">// 今日MF 大于 前两天MF 多头</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(newData.MF &gt; beforeYestoday.MF &amp;&amp; newData.MF &gt; yestoday.MF) &#123;<br>        <span class="hljs-keyword">if</span>(TRADE_INFO.status !== <span class="hljs-number">1</span>) &#123;<br>          TRADE_INFO.status = <span class="hljs-number">1</span><br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 今日MF 小于 前两天MF 空头</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(newData.MF &lt; beforeYestoday.MF &amp;&amp; newData.MF &lt; yestoday.MF) &#123;<br>        <span class="hljs-keyword">if</span>(TRADE_INFO.status !== <span class="hljs-number">0</span>) &#123;<br>          TRADE_INFO.status = <span class="hljs-number">0</span><br>        &#125;<br>      &#125;<br>      <br>      <span class="hljs-keyword">if</span>(TRADE_INFO.status === <span class="hljs-number">1</span>) &#123;<br>        newData.ProtectStop = newData.AverageX - newData.TR<br>        newData.TargetPoint = <span class="hljs-number">2</span> * newData.AverageX - newData.low<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(TRADE_INFO.status === <span class="hljs-number">0</span>) &#123;<br>        newData.ProtectStop = newData.AverageX + newData.TR<br>        newData.TargetPoint = <span class="hljs-number">2</span> * newData.AverageX - newData.high<br>      &#125;<br><br>    &#125;<br>  &#125;<br><br>  DATA_SOURCE.push(newData)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>存在问题</p></blockquote><ol><li>关于上面的了结头寸的说法，对于空头和多头来说，不太能理解，空头和退出市场的区别在哪里。</li></ol><h3 id="相对强弱指数">相对强弱指数</h3><p>通过一个相对指标概念来描述所有产品的价格震荡情况。<br>通过描述该指标可以看到哪个产品的价格变动是有利可图</p><h4 id="几个概念-2">几个概念</h4><h5 id="RSI">RSI</h5><p>相对强弱指数<br><img src="/images/技术交易系统新概念笔记/相对强弱指数-RSI.jpg" /><br>70以上或者30以下表示市场的顶部或底部，即将<strong>反转</strong>的信号。</p><h4 id="js实现-3">js实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  &#123;</span><br><span class="hljs-comment">    // 日期</span><br><span class="hljs-comment">    date: &#x27;2022-02-25&#x27;,</span><br><span class="hljs-comment">    // 开盘价</span><br><span class="hljs-comment">    open: 100,</span><br><span class="hljs-comment">    // 最高价</span><br><span class="hljs-comment">    high: 100,</span><br><span class="hljs-comment">    // 最低价</span><br><span class="hljs-comment">    low: 100,</span><br><span class="hljs-comment">    // 收盘价</span><br><span class="hljs-comment">    close: 100,</span><br><span class="hljs-comment">    // 上涨交易日平均增幅</span><br><span class="hljs-comment">    riseAverage: 20,</span><br><span class="hljs-comment">    // 下跌交易日平均减负</span><br><span class="hljs-comment">    fallAverage: 20,</span><br><span class="hljs-comment">    // 上涨交易日增幅</span><br><span class="hljs-comment">    rise: 20,</span><br><span class="hljs-comment">    // 下跌交易日增幅</span><br><span class="hljs-comment">    fall: 20,</span><br><span class="hljs-comment">    // 上涨交易日增幅 / 下跌交易日减幅</span><br><span class="hljs-comment">    RS: 20,</span><br><span class="hljs-comment">    // 相对强弱指数</span><br><span class="hljs-comment">    RSI: 20,</span><br><span class="hljs-comment">    // 手续费</span><br><span class="hljs-comment">    charge: 20 </span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> DATA_SOURCE = []<br><span class="hljs-comment">// 当前的交易信息</span><br><span class="hljs-keyword">const</span> TRADE_INFO = &#123;<br>  <span class="hljs-comment">// -1 初始化 0 空头 1 多头</span><br>  <span class="hljs-attr">status</span>: -<span class="hljs-number">1</span>,<br>&#125;<br><br><span class="hljs-comment">// 获取指定时间间隔的历史数据</span><br><span class="hljs-comment">// mock </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHistoryData</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">return</span> [&#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;date.getFullYear()&#125;</span>-<span class="hljs-subst">$&#123;date.getMonth() + <span class="hljs-number">1</span>&#125;</span>-<span class="hljs-subst">$&#123;date.getDate()&#125;</span>`</span>,<br>    charge,<br>  &#125;]<br>&#125;<br><br>  <span class="hljs-comment">// 定时任务执行</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dailyFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> currentData = getHistoryData() <br>  <span class="hljs-keyword">const</span> &#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    date,<br>    charge<br>  &#125; = currentData <br>  <span class="hljs-keyword">const</span> newData = &#123;<br>    date,<br>    high,<br>    open,<br>    close,<br>    low,<br>    charge<br>  &#125; <br><br>  <span class="hljs-keyword">if</span>(!!DATA_SOURCE.length) &#123;<br>    <span class="hljs-keyword">const</span> [ yestodayData ] = DATA_SOURCE.slice(-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">// 上涨</span><br>    <span class="hljs-keyword">if</span>(newData.close &gt; yestodayData.close) &#123;<br>      newData.rise = newData.close - yestodayData.close<br>    &#125;<br>    <span class="hljs-comment">// 下跌</span><br>    <span class="hljs-keyword">else</span> &#123;<br>      newData.fall = yestodayData.close - newData.close<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 超过14天才能计算RS和RSI </span><br>  <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= <span class="hljs-number">14</span>) &#123;<br>    <span class="hljs-comment">// 第一天计算需要结合前14天的数据</span><br>    <span class="hljs-keyword">if</span>(DATA_SOURCE.length === <span class="hljs-number">14</span>) &#123;<br>      <span class="hljs-keyword">const</span> &#123; rise, fall &#125; = DATA_SOURCE.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>        acc.rise += (cur.rise || <span class="hljs-number">0</span>)<br>        acc.fall += (cur.fall || <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> acc <br>      &#125;, &#123;<br>        <span class="hljs-attr">rise</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">fall</span>: <span class="hljs-number">0</span><br>      &#125;)<br>      newData.riseAverage = rise / <span class="hljs-number">14</span> <br>      newData.fallAverage = fall / <span class="hljs-number">14</span> <br>      newData.RS = newData.riseAverage / newData.fallAverage<br>      newData.RSI = <span class="hljs-number">100</span> - (<span class="hljs-number">100</span> / (<span class="hljs-number">1</span> + newData.RS))<br>    &#125;<br>    <span class="hljs-comment">// 后面只需要前一天的数据即可</span><br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">const</span> [ yestodayData ] = DATA_SOURCE.slice(-<span class="hljs-number">1</span>)<br>      <span class="hljs-comment">// 上涨</span><br>      <span class="hljs-keyword">if</span>(newData.close &gt; yestodayData.close) &#123;<br>        newData.rise = newData.close - yestodayData.close<br>      &#125;<br>      <span class="hljs-comment">// 下跌</span><br>      <span class="hljs-keyword">else</span> &#123;<br>        newData.fall = yestodayData.close - newData.close<br>      &#125;<br>      newData.riseAverage = (yestodayData.riseAverage * <span class="hljs-number">13</span> + (yestodayData.rise || <span class="hljs-number">0</span>)) / <span class="hljs-number">14</span> <br>      newData.fallAverage = (yestodayData.fallAverage * <span class="hljs-number">13</span> + (yestodayData.fall || <span class="hljs-number">0</span>)) / <span class="hljs-number">14</span> <br>      newData.RSI = <span class="hljs-number">100</span> - (<span class="hljs-number">100</span> / (<span class="hljs-number">1</span> + newData.RS))<br>    &#125;<br><br>    <span class="hljs-comment">// TODO </span><br>    <span class="hljs-comment">// 具体的判断交易逻辑</span><br><br>  &#125;<br><br>  DATA_SOURCE.push(newData)<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>存在问题</p></blockquote><ol><li>文中所说的各种图表形态，如<strong>头肩顶|底</strong>，<strong>旗形</strong>，只是简单的使用<strong>图例标识</strong>何时买入卖出，并没有真正解释计算的方法，暂时还无法完善整个交易流程。</li></ol>  <img src="/images/技术交易系统新概念笔记/相对强弱指数-RSI顶部.jpg" />    <img src="/images/技术交易系统新概念笔记/相对强弱指数-RSI底部.png" />  <h3 id="摆动指数-短线交易系统">摆动指数-短线交易系统</h3><p>顾名思义是做短期交易或高频交易的，个人认为对于短线交易来说，需要关注到更多的细节，毕竟在短时间内做多次交易，需要付出更多的手续费。</p><h4 id="几个概念-3">几个概念</h4><ul><li><p>Cn、Ln、Hn、On<br>第n天的收盘价、最低价、最高价、开盘价</p></li><li><p>SI<br>摆动因子<br><img src="/images/技术交易系统新概念笔记/摆动指数-短线交易系统-SI.jpg" /><br><strong>L</strong>表示极限运动值常量（比如3）</p><p><strong>K</strong>表示下列两数值的最大值（<strong>绝对值最大</strong>）</p><ul><li><code>H2 - C1</code></li><li><code>L2 - C1</code></li></ul><p><strong>R</strong>为以下条件之一</p><ol><li>求出下列三个条件中的最大值（<strong>绝对值最大</strong>）<br>1. <code>H2 - C1</code><br>2. <code>L2 - C1</code><br>3. <code>H2 - L2</code></li><li>根据上面的最大值来定义<strong>R</strong><br>1. <code>R = (H2 - C1) - 0.5 * (L2 - C1) + 0.25 * (C1 - O1)</code><br>2. <code>R = (L2 - C1) - 0.5 * (H2 - C1) + 0.25 * (C1 - O1)</code><br>3. <code>R = (H2 - L2) + 0.25 * (C1 - O1)</code></li></ol></li><li><p>ASI<br>累计摆动指标<br><code>ASI = 今日SI + 前一日ASI</code><br>它可以是正数也可以是负数<br>长期上升可能是正数，下降可能是负数，摆动可能是正负交替</p></li><li><p>HSP<br>高位摆动点<br>是由ASI定义的交易日，该交易日的ASI值<strong>高于</strong>相邻的前后两个交易日的ASI值。</p></li><li><p>LSP<br>低位摆动点<br>是由ASI定义的交易日，该交易日的ASI值<strong>低于</strong>相邻的前后两个交易日的ASI值。</p></li></ul><h4 id="规则-2">规则</h4><ul><li>初入市<br>ASI超过前一个高位摆动点的ASI，次日建立多头<br>ASI跌破前一个低位摆动点的ASI，次日建立空头</li><li>指标停损反转点<ul><li>多头<ol><li>SAR = 前一个LSP</li><li>新的HSP形成后，SAR = 下一个LSP</li></ol></li><li>空头<ol><li>SAR = 前一个HSP</li><li>新的LSP形成后，SAR = 下一个HSP</li></ol></li></ul></li><li>指标尾随停损点<ul><li>多头<br>最高HSP与(ASI - 60)之间的交易日的收盘价中的最低价</li><li>空头<br>最低LSP与(ASI + 60)之间的交易日的收盘价中的最高价</li></ul></li></ul><h4 id="js实现-4">js实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  &#123;</span><br><span class="hljs-comment">    // 日期</span><br><span class="hljs-comment">    date: &#x27;2022-02-25&#x27;,</span><br><span class="hljs-comment">    // 开盘价</span><br><span class="hljs-comment">    open: 100,</span><br><span class="hljs-comment">    // 最高价</span><br><span class="hljs-comment">    high: 100,</span><br><span class="hljs-comment">    // 最低价</span><br><span class="hljs-comment">    low: 100,</span><br><span class="hljs-comment">    // 收盘价</span><br><span class="hljs-comment">    close: 100,</span><br><span class="hljs-comment">    // 手续费</span><br><span class="hljs-comment">    charge: 20,</span><br><span class="hljs-comment">    // 摆动因子</span><br><span class="hljs-comment">    SI: 20,</span><br><span class="hljs-comment">    // 累计摆动指标</span><br><span class="hljs-comment">    ASI: 20,</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> DATA_SOURCE = []<br><span class="hljs-comment">// 当前的交易信息</span><br><span class="hljs-keyword">const</span> TRADE_INFO = &#123;<br>  <span class="hljs-comment">// -1 初始化 0 空头 1 多头</span><br>  <span class="hljs-attr">status</span>: -<span class="hljs-number">1</span>,<br>&#125;<br><span class="hljs-comment">// 极限运动值常量</span><br><span class="hljs-keyword">const</span> L = <span class="hljs-number">3</span> <br><span class="hljs-comment">// 最近一次的HSP  </span><br><span class="hljs-keyword">let</span> CURRENT_HSP = <span class="hljs-number">0</span> <br><span class="hljs-comment">// 最近一次的LSP  </span><br><span class="hljs-keyword">let</span> CURRENT_LSP = <span class="hljs-number">0</span> <br><span class="hljs-comment">// 最近一次的HIP </span><br><span class="hljs-keyword">let</span> CURRENT_HIP = <span class="hljs-number">0</span> <br><span class="hljs-comment">// 最近一次的LOP  </span><br><span class="hljs-keyword">let</span> CURRENT_LOP = <span class="hljs-number">0</span> <br><span class="hljs-comment">// 需要进入的状态</span><br><span class="hljs-comment">// 因为在检测到需要转变状态时，需要等待价格到达目标价位才能进入或退出市场，所以在这里记录一下状态</span><br><span class="hljs-comment">// -1 等待 0 空头 1 多头</span><br><span class="hljs-keyword">let</span> NEXT_NEED_STEP = -<span class="hljs-number">1</span> <br><span class="hljs-comment">// 停损点</span><br><span class="hljs-keyword">let</span> SAR = <span class="hljs-number">0</span> <br><br><span class="hljs-comment">// 获取指定时间间隔的历史数据</span><br><span class="hljs-comment">// mock </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHistoryData</span>(<span class="hljs-params">start, end</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">return</span> [&#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;date.getFullYear()&#125;</span>-<span class="hljs-subst">$&#123;date.getMonth() + <span class="hljs-number">1</span>&#125;</span>-<span class="hljs-subst">$&#123;date.getDate()&#125;</span>`</span>,<br>    charge,<br>    <span class="hljs-comment">// 当前价格</span><br>    current,<br>  &#125;]<br>&#125;<br><br><span class="hljs-comment">// 实时监听当前的市场价格</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">requestDailyInfoLoop</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> currentData = getHistoryData() <br>    <span class="hljs-keyword">const</span> &#123; current &#125; = currentData<br>    <span class="hljs-comment">// 需要进行操作</span><br>    <span class="hljs-keyword">if</span>(!!~NEXT_NEED_STEP) &#123;<br>      <span class="hljs-comment">// 需要进入空头</span><br>      <span class="hljs-keyword">if</span>(NEXT_NEED_STEP === <span class="hljs-number">0</span> &amp;&amp; current &lt; CURRENT_LOP) &#123;<br>        <span class="hljs-comment">// 操作进入空头</span><br>        TRADE_INFO.status = <span class="hljs-number">0</span><br>        SAR = CURRENT_HIP<br>      &#125;<br>      <span class="hljs-comment">// 需要进入多头</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(NEXT_NEED_STEP === <span class="hljs-number">1</span> &amp;&amp; current &gt; CURRENT_HIP) &#123;<br>        TRADE_INFO.status = <span class="hljs-number">1</span><br>        SAR = CURRENT_LOP<br>      &#125;<br>      NEXT_NEED_STEP = -<span class="hljs-number">1</span> <br>    &#125;<br><br>    requestDailyInfoLoop()<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;<br><br>  <span class="hljs-comment">// 定时任务执行</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dailyFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> currentData = getHistoryData() <br>  <span class="hljs-keyword">const</span> &#123;<br>    high,<br>    open,<br>    low,<br>    close,<br>    date,<br>    charge<br>  &#125; = currentData <br>  <span class="hljs-keyword">const</span> newData = &#123;<br>    date,<br>    high,<br>    open,<br>    close,<br>    low,<br>    charge<br>  &#125; <br><br>  <span class="hljs-comment">// 超过一天才能计算SI</span><br>  <span class="hljs-keyword">if</span>(!!DATA_SOURCE.length) &#123;<br>    <span class="hljs-keyword">const</span> [yestoday] = DATA_SOURCE.slice(-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">close</span>: yesClose, <span class="hljs-attr">open</span>: yesOpen, <span class="hljs-attr">low</span>: yesLow, <span class="hljs-attr">high</span>: yesHigh, <span class="hljs-attr">SI</span>: yesSI, <span class="hljs-attr">ASI</span>: yesASI &#125; = yestoday<br>    <span class="hljs-comment">// 分子</span><br>    <span class="hljs-keyword">const</span> N = close - yesClose + <span class="hljs-number">0.5</span> * (close - open) + <span class="hljs-number">0.25</span> * (yesClose - yesOpen)<br>    <span class="hljs-comment">// K </span><br>    <span class="hljs-keyword">const</span> K = <span class="hljs-built_in">Math</span>.max(<span class="hljs-built_in">Math</span>.abs(high - yesClose), <span class="hljs-built_in">Math</span>.abs(low - yesClose))<br>    <span class="hljs-comment">// R </span><br>    <span class="hljs-keyword">const</span> RCondition = [<span class="hljs-built_in">Math</span>.abs(high, yesClose), <span class="hljs-built_in">Math</span>.abs(low - yesClose), <span class="hljs-built_in">Math</span>.abs(high - low)]<br>    <span class="hljs-keyword">const</span> maxRCondition = <span class="hljs-built_in">Math</span>.max(...RCondition)<br>    <span class="hljs-keyword">const</span> maxRConditionIndex = RCondition.indexOf(maxRCondition)<br>    <span class="hljs-keyword">const</span> RMap = [<br>      (high - yesClose) - <span class="hljs-number">0.5</span> * (low - yesClose) + <span class="hljs-number">0.25</span> * (yesClose - yesOpen),<br>      (low - yesClose) - <span class="hljs-number">0.5</span> * (high - yesClose) + <span class="hljs-number">0.25</span> * (yesClose - yesOpen),<br>      (high - low) + <span class="hljs-number">0.25</span> * (yesClose - yesOpen)<br>    ]<br>    <span class="hljs-keyword">const</span> R = RMap[maxRConditionIndex]<br>    <span class="hljs-comment">// SI </span><br>    <span class="hljs-keyword">const</span> SI = <span class="hljs-number">50</span> * (N / R) * (K / L)<br>    newData.SI = SI <br>    newData.ASI = SI + (yesASI || <span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment">// 超过两天才能计算HIP和LOP</span><br>    <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-comment">// HIP  </span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Math</span>.max(theDayBeforeYestoday.high, yestoday.high, newData.high) === yestoday.high) &#123;<br>        CURRENT_HIP = yestoday.high <br>      &#125;<br><br>      <span class="hljs-comment">// LOP </span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Math</span>.min(theDayBeforeYestoday.low, yestoday.low, newData.low) === yestoday.low) &#123;<br>        CURRENT_LOP = yestoday.low <br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 超过三天才能计算HSP和LSP  </span><br>    <span class="hljs-keyword">if</span>(DATA_SOURCE.length &gt;= <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-keyword">const</span> [ theDayBeforeYestoday, yestoday ] = DATA_SOURCE.slice(-<span class="hljs-number">2</span>)<br>      <span class="hljs-comment">// HSP</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Math</span>.max(theDayBeforeYestoday.ASI, yestoday.ASI, newData.ASI) === yestoday.ASI) &#123;<br>        CURRENT_HSP = yestoday.ASI <br>        <span class="hljs-comment">// 多头</span><br>        NEXT_NEED_STEP = <span class="hljs-number">1</span><br>      &#125;<br>      <span class="hljs-comment">// LSP </span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Math</span>.min(theDayBeforeYestoday.ASI, yestoday.ASI, newData.ASI) === yestoday.ASI) &#123;<br>        CURRENT_LSP = yestoday.ASI <br>        <span class="hljs-comment">// 空头</span><br>        NEXT_NEED_STEP = <span class="hljs-number">0</span><br>      &#125;<br>    &#125;<br><br>  &#125;<br><br>  DATA_SOURCE.push(newData)<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>存在问题</p></blockquote><ol><li>能力有限，这一章节的内容的代码实现未能全部完成😓。</li><li>总得来说，这是一个短线操作系统。</li></ol><h3 id="资金管理">资金管理</h3><p>相信在接受到交易的相关概念的洗礼后，对这一章节的重要性都应该有一定的理解了。<br>这里就直接定义书中的结论。</p><blockquote><ol><li>任何一种期货，其保证金不要超过总资金数量的<strong>15%</strong></li><li>任何时候，保证金不要超过总资金数量的<strong>60%</strong>()</li></ol></blockquote><p>上述的保证金也可以说是投入的资金量</p><h2 id="结束">结束</h2><p>以上就是书中的所有内容，当然还有挺多可以完善的地方，上面的代码只是一个简单的<code>demo</code>，后续可以继续完善💪🏻。</p>]]></content>
    
    
    <categories>
      
      <category>交易</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trade finance</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>期货市场技术分析笔记</title>
    <link href="/2022/11/25/%E6%9C%9F%E8%B4%A7%E5%B8%82%E5%9C%BA%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/25/%E6%9C%9F%E8%B4%A7%E5%B8%82%E5%9C%BA%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="期货市场技术分析笔记">期货市场技术分析笔记</h2><p>历时几个月（9-14 ~ 11-25），终于粗略看完了整本书😊。</p><h2 id="介绍">介绍</h2><p>本文是本人在阅读📚《期货市场技术分析》的读书笔记，记录📝当中的一些交易方法，指标等等。<br>作为一个专业的程序猿🐒，当然是要通过代码来实现交易自动化🌶。<br>虽然本人的初衷是做股票的自动化交易，但是据说是两者想通，可以用来借鉴，所以就当是多学习一点相关的知识吧👍。</p><h2 id="正文">正文</h2><p>先记录下目录：</p><blockquote><p>前言<br>译者的话——我看技术分析<br>致谢<br>第一章 技术分析的理论基础<br>第二章 道氏理论<br>第三章 图表简介<br>第四章 趋势的基本概念<br>第五章 主要反转形态<br>第六章 持续形态<br>第七章 交易量和持仓兴趣<br>第八章 长期图表和商品指数<br>第九章 移动平均线<br>第十章 摆动指数和相反意见<br>第十一章 日内点数图<br>第十二章 三点转向和优化点数图<br>第十三章 艾略特波浪理论<br>第十四章 时间周期<br>第十五章 计算机和交易系统<br>第十六章资金管理和交易策略<br>全书大会串——一张清单<br>附录一 差价交易和相对力度的概念<br>附录二期权交易<br>附录三 W·D·江恩：几何角度和百分比例<br>参考资料<br>索引<br>关于本书</p></blockquote><p>当中有一些基础易懂的内容，就不记录了😊。</p><h3 id="道式理论">道式理论</h3><ul><li>市场的趋势分为三种：<strong>主要趋势</strong>（一年或几年）、<strong>次要趋势</strong>（几个星期或几个月）、<strong>短暂趋势</strong>（不到三个星期）</li></ul><h4 id="信号">信号</h4><blockquote><p>只要相继的上冲加个波峰和波谷都对应的高过前一个波峰、波谷，那么市场就处在一个上升趋势之中。</p></blockquote><p>简单说就是当前价格超过前一个波峰或波谷，则触发了对应的买入卖出信号。<br>并且需要的是市场的<strong>整体价格</strong>处在同一个趋势中，才算是真正的趋势发生。这大概意思就是需要比较市场内的多只目标股来进行判断。</p><img src="/images/期货市场技术分析笔记/道式理论-1.jpg" /><h3 id="趋势的基本概念">趋势的基本概念</h3><ul><li>趋势的三种状态：<strong>上升</strong>、<strong>下降</strong>、<strong>横向延伸（震荡）</strong></li></ul><h4 id="支撑和阻挡">支撑和阻挡</h4><p>价格趋势向上时，形成<strong>阻挡</strong>点<br>价格趋势向下时，形成<strong>支撑</strong>点<br>当价格突破前面的<strong>支撑</strong>和<strong>阻挡</strong>点时，触发信号。</p><h4 id="趋势线">趋势线</h4><ul><li>确认趋势是否存在</li></ul><blockquote><p>趋势上升：<br>至少需要两个有效的向上反弹低点，并且后者高于前者，并验证（第三次触及该线并反弹）。</p></blockquote><img src="/images/期货市场技术分析笔记/趋势的基本概念-趋势判断.jpg" />  <img src="/images/期货市场技术分析笔记/趋势的基本概念-趋势线买卖信号.jpg" /><h5 id="ps">ps</h5><p>以下均说的是<strong>上升趋势</strong>的情况，下降则相反。</p><ol><li>存在<strong>日内</strong>短暂突破<strong>趋势线</strong>，而后在收盘时又回到趋势线之上。<br>这里选择的是：</li></ol><ul><li>绘制一条穿过该低点的<strong>辅助趋势线</strong>。</li><li>在之后验证其合理性（这里理解的是在之后的连续两个低点触及该线并反弹）。</li><li>合理则转而使用该<strong>辅助趋势线</strong>作为<strong>趋势线</strong>。</li></ul><ol start="2"><li>有效突破<br>存在价格突破但是突破不多的情况，这里的选择是：</li></ol><ul><li>通常价格需要突破趋势线至少<strong>3%</strong>，并且至少连续<strong>2天</strong>，定义为有效突破（普遍适用，但是不完全适用所有市场）。</li></ul><h4 id="管道线">管道线</h4><ol><li>基本概念</li></ol><ul><li>用<strong>趋势线</strong>做一条基本线。</li><li>从该起点出现的第一个波峰处，绘制一条与趋势线<strong>平行</strong>的线。</li><li>验证：到达<em>平行线</em>后<strong>反弹</strong>，而后又回到趋势线的位置。</li><li>基础趋势线<em>开多头</em>，平行线<em>平仓</em>。</li><li>当价格未<em>无法触及</em>平行线，则是市场<strong>转向</strong>的信号。</li></ul><img src="/images/期货市场技术分析笔记/趋势的基本概念-管道线.jpg" />  <h4 id="回撤">回撤</h4><p>市场在上升或下降过程中，存在短暂的逆市场方向的情况，称为<strong>回撤</strong>，一般回撤的大小不会超过<strong>三分之二</strong>，否则是市场转向的信号。</p><h4 id="速度线">速度线</h4><p>从趋势起点开始到当前价格高点绘制三等分线，当价格回撤超过其中间等分线时，为市场转向信号。</p><img src="/images/期货市场技术分析笔记/趋势的基本概念-速度线.jpg" /><h4 id="跳空">跳空</h4><p>当前最低（高）价高（低）于前一日（周、月）的最高（低）价，称为跳空。<br>在<strong>周、月</strong>中为非常重要的信号。</p><h5 id="四种跳空">四种跳空</h5><p>普通跳空 -&gt; 突破跳空 -&gt; 中继跳空 -&gt; 衰竭跳空 -&gt; 反转<br><img src="/images/期货市场技术分析笔记/趋势的基本概念-跳空.jpg" /></p><h3 id="主要反转形态">主要反转形态</h3><h4 id="头肩形反转形态">头肩形反转形态</h4><img src="/images/期货市场技术分析笔记/主要反转形态-头肩形反转形态.jpg" />  <p>此状态形成的关键就在于，<strong>右肩</strong>的高点无法超越前一个高点。<br>并且最高点下的回撤已经低于了前一个高点（A，前面说过，上升趋势的前一个突破高点会在之后形成<strong>支撑</strong>效果）。</p><blockquote><p>形态与交易量息息相关<br>当还未到最高点时，左肩的上升趋势一般都伴随着高交易量，而回撤当然也会随之减少交易量。<br>当开始冲击最高点时，交易量已经开始有所减少，也说明交易兴趣开始减少，上升阻挡效果开始增大。</p></blockquote><h5 id="颈线">颈线</h5><p>根据<strong>左肩</strong>的低点和<strong>头</strong>的低点连线而成的线（如上图《头肩形反转形态》）。</p><h5 id="反扑">反扑</h5><p>存在由上述过程后下跌，出现反向<strong>上升</strong>的情况，简单的判断条件是，根据<strong>交易量</strong>的大小，<strong>小</strong>的交易量表明可能出现有效的上升趋势，反之则不然。</p><h4 id="倒头肩形">倒头肩形</h4><p>与头肩形正好相反。</p><img src="/images/期货市场技术分析笔记/主要反转形态-倒头肩形.jpg" />  <h4 id="三重顶（底）">三重顶（底）</h4><p>存在多个相同高度的峰，关键在于其逐渐下降的交易量。</p><img src="/images/期货市场技术分析笔记/主要反转形态-三重顶（底）.jpg" />  <h4 id="双重顶（底）">双重顶（底）</h4><img src="/images/期货市场技术分析笔记/主要反转形态-双重顶（底）.jpg" />  <p>这是一个很常见的变体，在实盘中经常出现。<br>判断的条件也是同样的道理，以上升反转为例，第一个顶的交易量必然高于第二个顶的交易量。</p><h4 id="圆顶（底）">圆顶（底）</h4><p>个人认为，这种情形只是一个比较圆滑的逐步上升或下降的情况。</p><h4 id="V形">V形</h4><p>个人认为，较为陡峭的峰 + <code>高</code>交易量 + <code>多</code>跳空。</p><h4 id="ps-2">ps</h4><p>本章看到的最多的一点就是：<strong>交易的形态和交易量关系非常密切</strong></p><ul><li><strong>数据过滤</strong><br>实盘常见的一些比较类似的情形可能形成趋势，但是可能并不是。<br>通过添加一些限制条件来降低出错的次数。比如：</li></ul><ol><li>添加突破大小，向上或向下突破一定<strong>百分比</strong>定义为趋势形成。</li><li>日内突破与收盘突破相结合判断。</li><li>双日突破，<strong>连续两天</strong>突破才定论。</li></ol><h3 id="持续形态">持续形态</h3><h4 id="三角形">三角形</h4><p>价格走势形成了一个三角形的形态。<br>三角形分别有<code>对称三角形</code>、<code>上升三角形</code>、<code>下降三角形</code>。<br><code>6</code>个转折点确定一个三角形。<br>一般在三角形横向距离的<code>一半到三分之二</code>发生突破。</p><img src="/images/期货市场技术分析笔记/持续形态-三角形.jpg" /><p>计算趋势方式均为：</p><blockquote><p>从突破点开直线突破一个三角形底边的距离。<br>交易量一般随着三角形两边间距的减小而减少，而后在突破之后大幅增加。</p></blockquote><p>如下图上升三角形计算示例<br><img src="/images/期货市场技术分析笔记/持续形态-三角形.jpg" /></p><h4 id="喇叭形-钻石行">喇叭形&amp;钻石行</h4><img src="/images/期货市场技术分析笔记/持续形态-喇叭形.jpg" title="喇叭形" /><img src="/images/期货市场技术分析笔记/持续形态-钻石形.jpg" title="钻石形" /><p>文中提到不常碰到，这里就暂时不考虑。</p><h4 id="旗形-三角旗形">旗形&amp;三角旗形</h4><p>形成形态是：一段激增的交易量形成的陡峭坡，表示旗杆，接着试一段交易量逐渐减小的波动交易，之后是突破型的又是激增的交易量完成整个形态。</p><img src="/images/期货市场技术分析笔记/持续形态-旗形.jpg" title="旗形" /><img src="/images/期货市场技术分析笔记/持续形态-三角旗形.jpg" title="三角旗形" /><h5 id="计算">计算</h5><p>关于计算没有非常的理解，大致理解是突破点以上整个旗子的一半高度。</p><h4 id="楔形">楔形</h4><p>类似于三角形，但是两条边都不水平。</p><p>上涨倾斜向下，下跌倾斜向上。<br>一般震荡需要超过三角形顶点的<strong>三分之二或者顶点</strong>才会发生突破。</p><img src="/images/期货市场技术分析笔记/持续形态-楔形.jpg" title="楔形" /><h4 id="矩形">矩形</h4><p>大概就是水平震荡的意思吧。</p><p>判断其是上涨还是下跌的标准是：查看其在两个方向上的<strong>交易量</strong>。</p><img src="/images/期货市场技术分析笔记/持续形态-矩形.jpg" title="矩形" /><h4 id="ps-3">ps</h4><p>不同的市场中经常会有不同的倾向，所以可以根据具体的市场做相应的具体图表分析方法。<br>把不同的指标相互应用验证对应的策略，如果相互验证则说明判断趋势是正确的，如果相背离，则是市场转向的一个警告⚠️。</p><h3 id="交易量和持仓兴趣">交易量和持仓兴趣</h3><p>上一章也有提到，交易量是非常重要的指标，配合使用可以达到非常好的效果。</p><h4 id="定义">定义</h4><ul><li>交易量</li></ul><blockquote><p>指定时间单位内成交的合约总额。</p></blockquote><ul><li>持仓兴趣</li></ul><blockquote><p>某收市时间为止，所有未平仓了结的合约的总数。</p></blockquote><h5 id="关联">关联</h5><img src="/images/期货市场技术分析笔记/交易量和持仓兴趣-关联.jpg" title="关联" /><img src="/images/期货市场技术分析笔记/交易量和持仓兴趣-关联2.jpg" title="关联2" /><h4 id="OBV和VA">OBV和VA</h4><p>OBV法将每日的交易量简单的进行连线，这样查看计算更方便。</p><p>VA法则是对<strong>交易量</strong>和<strong>持仓兴趣</strong>进行了权重划分。</p><p><code>VA = &#123; [(C - L) - (H - C)] / (H - L) &#125; x V</code></p><p>H = 当日最高价<br>C = 收盘价<br>L = 最低价<br>V = 交易量</p><h3 id="长期图表和商品指数">长期图表和商品指数</h3><p>当中介绍了一些关于期货特有的知识点，这里暂时用不到，就先不记录了🙏🏻。</p><blockquote><p>长期图表的研究能发现更多的信息。</p></blockquote><h3 id="移动平均线">移动平均线</h3><p>计算<code>10天</code>的平均值<br><code>[10, 15, 20, 9, 8, 6, 11, 10, 15, 20]</code></p><p><strong>简单平均线</strong><code>(10 + 15 + 20 + 9 + 8 + 6 + 11 + 10 + 15 + 20) / 10</code>、<br><strong>线性加权平均线</strong><code>(10 * 1 + 15 * 2 + 20 * 3 + 9 * 4 + 8 * 5 + 6 * 6 + 11 * 7 + 10 * 8 + 15 * 9 + 20 * 10) / (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10)</code>、<br><strong>指数加权平均线</strong>(比较复杂)</p><p>短期均线比长期均线更加敏感，当价格发生变动，会更快反应出来。<br>一般的时间为<code>5、10， 20， 40， 60</code><br>均线在市场存在<strong>趋势</strong>的时候更有作用，但在<strong>震荡</strong>市场下，效果不好。</p><h4 id="关于噪声的控制">关于噪声的控制</h4><ol><li>价格上穿或下穿均线时，必须保证<code>全日</code>价格全都穿越。</li><li>价格穿越需要到达一定的程度。</li></ol><h4 id="双均线">双均线</h4><p>总体来说，可能双均线对于常规交易更有用。<br>一条长期均线 + 一条短期均线。</p><blockquote><p>短上穿长，买入。<br>短下穿长，卖出。</p></blockquote><h4 id="周规则">周规则</h4><ul><li>四周规则<ol><li>价格超过前四个日历周的最高价，多头。</li><li>价格低过前四个日历周的最低价，空头。</li><li>在一周或二周出现上述信号，即进行交易（自己根据文附加的）。</li><li>在四周出现信号时，考察一周或二周是否也出现信号（自己根据文附加的）。</li></ol></li></ul><h4 id="ps-4">ps</h4><p>关于移动平均线，在<code>《海龟的交易法则》</code>书中也有对应的应用方式，对于该方法的细节，在后面做补充吧。<br>移动均线不仅仅可以使用在价格上，包括<code>交易量</code>、<code>持仓兴趣</code>等均可使用均线来查看其趋势。</p><h3 id="摆动指数和相反意见">摆动指数和相反意见</h3><h4 id="摆动指数">摆动指数</h4><p>将价格变化局限于一个区间中，包含一条零线。</p><ol><li>当指数接近<strong>上下边界</strong>（超买超卖），是市场即将转向的信号。</li><li>当指数处于极限位置并与价格方向相背离时，同样是警讯。</li><li>当指数上下穿越零线，则是买卖信号。</li></ol><h4 id="动力指数">动力指数</h4><p>使用当前收盘价减去指定天数前的收盘价，得到的差值。<br><code>M = V - Vx</code><br><code>M</code>连成的线即为摆动指数。</p><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-动力指数.jpg" title="动力指数" /><p>但是该指标缺乏边界值，即无法界定<code>止损点</code>。</p><h4 id="变化速度指数（ROC）">变化速度指数（ROC）</h4><p><code>ROC = 100 * (V / Vx)</code></p><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-ROC.jpg" title="ROC" /><h4 id="移动平均线构造摆动指数">移动平均线构造摆动指数</h4><p>利用<strong>短期</strong> / <strong>长期</strong>的值作为摆动指数。</p><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-移动平均线摆动指数.jpg" title="移动平均线摆动指数" /><h4 id="摆动指数的临界值">摆动指数的临界值</h4><p>当当前指数达到上下的临界值时，是重要的信号，意味着市场存在<code>超买超卖</code>的情况。<br>比如假设临界值为<code>0-100</code>，则在上升到<code>70</code>或下降到<code>30</code>时，便是重要的信号。</p><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-临界值.jpg" title="临界值" /><h4 id="相互背离">相互背离</h4><p>当价格顺应趋势而行动时，如果出现摆动指数与价格相<strong>背离</strong>的运动时，说明是市场即将<strong>反转</strong>的信号。</p><h4 id="相对力度指数-RSI">相对力度指数(RSI)</h4><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-RSI.jpg" title="RSI" /><p>此指数能预防价格短时间大幅变动而不被察觉的情况，并且其不需要去动态计算上下边界。<br><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-RSI公式.jpg" title="RSI公式" /></p><p>上涨（下跌）收盘价平均值就是前<code>x</code>天内上涨（下跌）的收盘价相加的和再除以<code>x</code></p><p>通常<code>x</code>的使用天数，一般是<code>14</code>或者<code>9</code>，时间越短，对价格的变化越敏感。<br>上下边界也变成了固定的<code>0-100</code>。<br>所以其临界值也变成了<code>(30, 70)</code>或者<code>(20, 80)</code></p><ul><li>当然指数也支持前面所说的那些<code>趋势跟踪</code>的计算方法。<br>如：<br>当指数在上下边界<strong>以外</strong>的时候，且价格与指数方向相背离时，便是非常重要的警讯。</li><li>顺便附上作者的一段结论。</li></ul><blockquote><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-RSI作者结论.jpg" title="RSI作者结论" />  </blockquote><h4 id="随机指数（K-D）">随机指数（K%D）</h4><p>公式：<br><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-随机指数K-D-K.jpg" title="随机指数（K%D）-K" /></p><blockquote><p>C = 党日的收盘价<br>Lx = 前x天的最低价<br>Hx = 前x天的最高价<br><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-随机指数K-D-D.jpg" title="随机指数（K%D）-D" /><br>Hx = (C - Lx) 总和<br>Lx = (Hx - Lx) 总和</p></blockquote><img src="/images/期货市场技术分析笔记/摆动指数和相反意见-随机指数K-D.jpg" title="随机指数（K%D）" /> <h3 id="日内点数图">日内点数图</h3><p>日内图相对来说对于价格的变化更加灵敏，并且能看到长线图所看不到的趋势。<br>比如在日内价格的<code>突破</code>，以及<code>交易量</code>的短期变化。</p><p>关于绘制的办法，因为篇幅长，先在这里以图片记录。</p><img src="/images/期货市场技术分析笔记/日内点数图-画法.jpg" title="画法" />  <img src="/images/期货市场技术分析笔记/日内点数图-画法-2.jpg" title="画法-2" /> <p>来自<a href="https://jingyan.baidu.com/article/fcb5aff77e9818edaa4a7138.html">度娘</a>的答案。</p><h4 id="密集区">密集区</h4><blockquote><p>在一段时间内，价格水平（横向）伸展。</p></blockquote><p>密集区如果出现在顶部，则表示是卖出的机会。<br>密集区如果出现在底部，则表示是买入的机会。</p><h4 id="价格目标">价格目标</h4><p>计算波动幅度的垂直高度，然后向上或向下投射相同的距离。</p><h4 id="ps-5">ps</h4><p>其实对于日内点数图不仅仅可以做短期交易，也可以用于长期交易。<br>个人认为，可以在进行长期交易时，对信号进行<strong>验证</strong>。</p><h3 id="三点转向和优化点数图">三点转向和优化点数图</h3><p>这是点数图的一个变种，最大优点就是数据获取方便，它只需要每天的<strong>最高价</strong>和<strong>最低价</strong>。</p><p>关于画法，这里也只能简单做个图片介绍了。</p><blockquote><img src="/images/期货市场技术分析笔记/三点转向和优化点数图-画法.jpg" title="画法" />  </blockquote><img src="/images/期货市场技术分析笔记/三点转向和优化点数图-画法-2.jpg" title="画法-2" />  <h4 id="ps-6">ps</h4><p>关于本章和上一章，还有很多地方没有弄懂，有待复读🙏🏻。</p><h3 id="艾略特波浪理论">艾略特波浪理论</h3><h4 id="理论">理论</h4><p>市场遵循规律，<strong>5</strong>浪上涨，<strong>3</strong>浪下跌。<br><img src="/images/期货市场技术分析笔记/艾略特波浪理论-基础.jpg" title="基础" /></p><p>其中<code>2</code>浪和<code>4</code>浪是<code>1</code>和<code>3</code>浪的调整。<br><code>1、3、5</code>浪为主浪。<br>最后<code>a、b、c</code>浪为调整浪。</p><p>并且浪可以向下或者向上缩小或者扩大规模。<br>一浪也可以拆分成更小的5浪。<br><img src="/images/期货市场技术分析笔记/艾略特波浪理论-缩放.jpg" title="缩放" /></p><img src="/images/期货市场技术分析笔记/艾略特波浪理论-8浪.jpg" title="8浪" /> <h4 id="一些Tips">一些Tips</h4><ol><li>三个主浪只有一个主浪延长，另外两个时间和幅度相等。</li><li>1浪 乘 <code>1.618</code> 加 2浪底点 = 3浪目标。</li><li>1浪 乘 2 * 1.618，加上顶 或 底 = 5浪的区间。</li><li>如果1浪和3浪大致相等，预期5浪延长。目标加个=(1浪底点+3浪顶点的距离) * 1.618 + 4浪底点。</li><li>调整浪中，如果是5-3-5锯行调整，那么c浪常常与a浪相等。</li><li>c浪=a浪长度*0.618 - a浪的底。</li><li>在3-3-5平台行调整，b浪可能打到甚至超过a浪的顶点，那么，c浪长度等于a浪长度的1.618倍。</li><li>在对称三角形中，每个后续浪都约等于前一浪的0.618倍。</li></ol><ul><li>在股市中常常是<code>3浪</code>延长。</li><li>在股市中<code>4</code>浪不可与<code>1</code>浪重叠。</li></ul><img src="/images/期货市场技术分析笔记/艾略特波浪理论-总结.jpg" title="总结" /> <h3 id="时间周期">时间周期</h3><p>价格总是按照一定的周期规律循环发生变化。</p><p>周期表现为三个特征：<strong>波幅</strong>、<strong>周期长度</strong>、<strong>相位</strong></p><ul><li>波幅<br>表示周期的高度，也就是波谷到波峰的距离</li><li>周期长度<br>表示谷到谷之间的距离。<br>峰与峰之间的距离不可靠，所以使用谷。</li><li>相位<br>波谷的时间位置。<br><img src="/images/期货市场技术分析笔记/时间周期-相位.jpg" title="相位" /></li></ul><h4 id="周期理论">周期理论</h4><h5 id="叠加原理">叠加原理</h5><p>市场价格变换一般都是由多个周期的简单相加得出的。</p><h5 id="谐波原理">谐波原理</h5><p>相邻周期的长度一般都存在倍数关系。<br>比如上一个周期长度为20天，则下一个较短周期可能是10天。</p><h5 id="同步原理">同步原理</h5><p>不同长度的周期经常在同一时刻到达波谷。<br><img src="/images/期货市场技术分析笔记/时间周期-周期理论.jpg" title="周期理论" /></p><h5 id="比例原理">比例原理</h5><p>周期长度与波幅存在比例关系，周期越长波幅越长。</p><h4 id="波峰左移右移">波峰左移右移</h4><p>波峰的左移右移预示了市场的趋势。<br>正常波峰应该处于两谷之间的中点，右移则为市场上涨，左移为市场下跌。<br>简单来说，市场上涨则上涨天数多于下跌天数，则右移。</p><img src="/images/期货市场技术分析笔记/时间周期-波峰左移右移.jpg" title="波峰左移右移" /> <h3 id="计算机和交易系统">计算机和交易系统</h3><h4 id="韦尔斯-王尔德的抛物线和方向性运动系统">韦尔斯-王尔德的抛物线和方向性运动系统</h4><ul><li>抛物线系统（SAR）</li><li>方向性运动系统（DMI）<br>利用<code>ADXR</code>线，按照<code>0-100</code>进行评级，数值越高表示趋势越强。<br>超过<strong>20</strong>即表示存在趋势。</li><li>商品选择指数（CSI）</li></ul><p>关于此概念文章没有过多介绍，个人认为对市场分析极为有用，故后期会继续阅读<a href="https://book.douban.com/subject/30600413/">《技术交易系统新概念》</a>。</p><h4 id="指标工具分类">指标工具分类</h4><p>这里做一个记录😊。<br><img src="/images/期货市场技术分析笔记/计算机和交易系统-技术指标列表.jpg" title="技术指标列表" /></p><h4 id="其他">其他</h4><p>这里最后记录下<strong>查尔斯-帕特尔</strong>的<code>《商品和股票的技术性交易系统》</code>听说也不错，关于自动化交易策略，但是百度了没找到🤷🏻‍♀️。</p><h3 id="资金管理和交易策略">资金管理和交易策略</h3><p>完整的交易流程包含三方面：确认方向，确认时机，确认资金。</p><p>管控资金的配置是一个成功交易的关键。<br>合理分配资金能让我们在市场的各种情况下都游刃有余。</p><h4 id="资金分配">资金分配</h4><ol><li>总交易资金控制在个人总资产的**50%**以内。<br>剩余资金可用于购买低风险、稳定回报的产品。</li><li><strong>单个市场</strong>资金投入限制在<strong>总投入资金</strong>的<strong>10%-15%</strong>。</li><li><strong>单个市场</strong>最大亏损限制在<strong>总投入资金</strong>的<strong>5%</strong>。</li><li>任何市场上投入保证金总额不能超过总投入资金的20%-25%（个人认为应该是针对期货市场的）。</li></ol><h4 id="头寸分配">头寸分配</h4><p>采用上述资金分配的<code>10%</code>为标准，假设账户资金为<code>100000</code>，黄金每股为<code>100</code>，那么可以用于买入黄金的资金为<code>100000 * 0.1 = 10000</code>。<br>而股票至少需要买一手，那么可以买入黄金的股数为<code>10000 / 100 = 100</code>，只能买100股。</p><h4 id="分散投资与集中投资">分散投资与集中投资</h4><p>我们可以将资金投入几个不同的、毫不相关的市场中，这样可以将风险降低，避免出现在一棵树上吊死的情况。<br>但也应当避免<strong>过分</strong>分散。<br>正常选择<strong>4-6</strong>个市场。</p><h4 id="设置保护性止损指令">设置保护性止损指令</h4><p><strong>及时止损！！！！</strong><br>控制一次盈利=三次亏损。</p><h4 id="复合头寸">复合头寸</h4><p>将交易到市场中的资金分为<strong>跟势头寸</strong>和<strong>交易头寸</strong>。</p><ul><li>跟势头寸<br>专门用来跟踪长期的趋势，设置较长的止损命令。</li><li>交易头寸<br>专门用来在短期的趋势中，频繁的做交易。</li></ul><h4 id="交易策略">交易策略</h4><ul><li>突破信号<br>可以选择在突破信号前、中、后分别进入市场。</li><li>支撑、阻挡<br>趋势逼近支撑或阻挡位时，是重要信号。</li></ul><h4 id="技术因素结合资金管理">技术因素结合资金管理</h4><p>结合上面的头寸配置。<br>假定还是买入黄金，买入资金为<code>100000</code>，买入价格为<code>100</code>，则可以买入<code>1000</code>股。<br>加上风险因素。<br>最近的支撑位置为<code>90</code>，则最大亏损金额为<code>10 * 1000 = 10000</code>。<br>而设置的最大承受风险为资金的<code>5%</code>，为<code>0.05 * 100000 = 5000</code>。<br>则我们不可以直接买入<code>1000</code>股，因为我们承受的风险已经超过了预期的风险。</p><h4 id="交易指令">交易指令</h4><p>后三个指令未曾听说过，先暂时不管。</p><h5 id="市价单">市价单</h5><p>采用市场的当前价格进行买卖。<br>他能让订单快速成交。</p><h5 id="限价单">限价单</h5><p>自定义价格进行买卖。<br>买入价一般低于市场价。<br>卖出价一般高于市场价。<br>一般是在市场未发生明显动向时，发出的订单，在他人未发现情况时。</p><h5 id="止损单">止损单</h5><h5 id="止损限价单">止损限价单</h5><h5 id="触市指令">触市指令</h5><h4 id="资金管理要领和交易策略举要">资金管理要领和交易策略举要</h4><img src="/images/期货市场技术分析笔记/资金管理和交易策略-资金管理要领和交易策略举要.jpg" title="资金管理要领和交易策略举要" /> <h3 id="全书大会串">全书大会串</h3><h4 id="技术分析清单">技术分析清单</h4><img src="/images/期货市场技术分析笔记/全书大会串-技术分析清单.jpg" title="全书大会串-技术分析清单" /> ## 其他<p>这是第一次全部看完本书，可能还需要重复阅读才能理解透彻当中的理论，比如<code>日内点数图</code>和<code>艾略特波浪理论</code>，相对来说可能有点难于理解，后面再看一次吧👍。</p><blockquote><p>本人不是专业的交易手，只是单纯的兴趣，如果理解错误请见谅🙏🏻。</p></blockquote><h2 id="结束">结束</h2><p>以上就是对《期货市场技术分析笔记》书本的简单笔记，并且他也值得自己多次翻看阅读理解！<br>End🔚。</p>]]></content>
    
    
    <categories>
      
      <category>交易</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trade finance</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏设计器开发-实时保存</title>
    <link href="/2022/11/23/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E5%AE%9E%E6%97%B6%E4%BF%9D%E5%AD%98/"/>
    <url>/2022/11/23/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E5%AE%9E%E6%97%B6%E4%BF%9D%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1>数据可视化大屏设计器开发-实时保存</h1><h2 id="开头">开头</h2><p>本文是数据可视化开始的开发细节第二章。关于大屏设计时，数据的实时保存问题。<br>在我们使用在线<code>excel</code>时就会发现，每一次你的操作都是会被保存的，这样做的好处就是，避免了在修改大量数据之后，不小心关闭页面或者断网的情况，导致修改内容消失的情况发生。</p><h2 id="开始">开始</h2><p>实时保存也有很多的方案。</p><h3 id="简单来说">简单来说</h3><p>简单来说，开启一个定时器，定时将前端的数据保存到后台，但是这样会造成资源的浪费，有时候可能我们完全没有去操作，只是单纯的在页面中停留，这样还去频繁的调用保存接口完全没有必要。</p><h3 id="改进一下">改进一下</h3><ol><li>step-1</li></ol><p>修改一下上面的方法，我们只在数据发生变化的时候才调用保存接口。<br>那么怎么才能做到上面的方法呢？比如我们输入一个文本框的内容，不可能每输入一个字就调一次保存，这样反而更加频繁调用接口。<br>这时候就不应该去监听表单的<code>onChange</code>事件，而是去监听它的<code>onBlur</code>事件，这样就解决了上面的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Form = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> handleChange = <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;handleChange&#125;</span> /&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>如上解决了调用频繁的问题。</p><ol start="2"><li>step-2</li></ol><p>但是又存在了新的问题，因为我们只监听了<code>onBlur</code>，所以无法使用外部受控的方法来设置<code>value</code>，导致数据回填会出现问题。<br>所以选择在<strong>组件内部</strong>控制一份状态，同时监听外部状态的改变，如果改变了则将内部状态与外部状态进行同步。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Form = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; value, onChange, defaultValue &#125; = props <br>  <span class="hljs-keyword">const</span> [ internalState, setInternalState ] = useState(value || defaultValue)<br><br>  <span class="hljs-keyword">const</span> handleChange = <span class="hljs-function">() =&gt;</span> &#123;<br>    onChange(internalState)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> onInternalChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    setInternalState(e.target.value)<br>  &#125;<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    setInternalState(value)<br>  &#125;, [value])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;internalState&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;onInternalChange&#125;</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;handleChange&#125;</span> /&gt;</span></span><br>  )<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优化一下">优化一下</h3><p>上面完成了接口调用频繁的问题，还可以继续优化。<br>因为设计器所设计的大屏包含大量的配置，如果每一次都是将所有数据一起同步到后端，肯定会让接口的调用速度变慢。<br>而且设计阶段，对于保存的操作又是非常的频繁，这样肯定会影响用户体验。</p><p>解决的办法就是只将修改的数据保存到后端，这样接口请求速度一定不会慢，而如何做到这一点呢？<br>我们可以预先定义一系列的<strong>操作类型</strong>，对每一个操作类型设置不同的操作方法，因为后端和前端的数据格式都是一个<code>json</code>，我们完全可以做到前后端同步。<br>只是如果前端和后端分开两套代码实现同一个逻辑，那有点得不偿失。<br>当然后端我们可以选择使用<code>node</code>来进行开发，完成相关逻辑，同时对大屏操作的方法单独抽离成一个<code>npm</code>包，毕竟本身它并有依赖于大屏的任何东西。</p><p>比如像下面这样的保存参数例子🌰：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> requestParams = &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-comment">// add delete merge...</span><br>  <span class="hljs-attr">value</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;xxxx&#x27;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;xxxx&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">path</span>: &#123;<br>        <span class="hljs-attr">to</span>: &#123;<br>          <span class="hljs-attr">updateData</span>: <span class="hljs-string">&#x27;xxxx&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当拿到这份数据时，我们只需简单的与大屏数据进行合并即可。</p><h3 id="完善一下">完善一下</h3><p>上面的方法基本达到了实时保存的要求，但是还可以进行完善。<br>因为设计大屏的时候，经常发生频繁修改配置的情况，虽然做了<code>onBlur</code>的处理，不过有时候调用的频率还是会很高，如果又在网络状况不好的环境下，那经常就会发生错误。<br>所以我们可以将上面的请求进行<strong>合并</strong>。</p><p>本身其实也只是一个个修改对象，我们可以将数据请求格式更改为<strong>数组</strong>，后端按顺序遍历数组，同样可以达到修改的效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> requestParamsList = [<br>  &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-comment">// add delete merge...</span><br>    <span class="hljs-attr">value</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;xxxx&#x27;</span>,<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;xxxx&#x27;</span>,<br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">path</span>: &#123;<br>          <span class="hljs-attr">to</span>: &#123;<br>            <span class="hljs-attr">updateData</span>: <span class="hljs-string">&#x27;xxxx&#x27;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>]<br></code></pre></td></tr></table></figure><p>接着我们在前端开启一个请求池，这里命名成<code>REQUEST_POOL</code>，一个等待池，命名为<code>PENDING_POOL</code>。<br>当发生新的修改时。<br>先判断<code>PENDING_POOL</code>是否为空，如果为空，则直接将请求放入<code>REQUEST_POOL</code>，否则放入<code>PENDING_POOL</code>。<br>如果上述放入的<code>REQUEST_POOL</code>，并且在短时间内没有新进入的请求或者<code>REQUEST_POOL</code><strong>已满</strong>，则将<code>REQUEST_POOL</code>内的请求参数合并发送。<br><code>REQUEST_POOL</code>完成请求后，继续将<code>PENDING_POOL</code>中的请求加入到其中，<code>PENDING_POOL</code>为空则停止。</p><blockquote><p>提示<br>这一步骤的功能目前未实现到大屏当中，还只是一个概念。</p></blockquote><blockquote><p>下一个提示<br>关于上面实时保存，还有一个最重要的点：发送请求后，后端应给予前端正确且明确的反馈，告知此次更新已经完成，否则会发生前后端存储数据不同步的情况。</p></blockquote><h2 id="结束">结束</h2><p>结束🔚。</p><p>顺便在下面附上相关的链接。</p><blockquote><p><a href="http://47.97.27.23/api/backend/screen/index.html">试用地址</a><br><a href="https://github.com/food-billboard/create-chart/issues/2">试用账号</a><br><a href="https://food-billboard.github.io/create-chart/index.html#/">静态版试用地址</a><br><a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">操作文档</a><br><a href="https://github.com/food-billboard/create-chart">代码地址</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>大屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lowcode react chart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dom-diff学习</title>
    <link href="/2022/11/21/dom-diff%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/11/21/dom-diff%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>dom-diff学习</h1><h2 id="介绍">介绍</h2><p>本次介绍的是<code>dom-diff</code>的逻辑，他对于我们在使用相关框架时，能更好的书写逻辑，避免出现一些问题的出现。</p><h2 id="开始">开始</h2><h3 id="snabbdom">snabbdom</h3><p><a href="https://github.com/snabbdom/snabbdom">snabbdom</a>是一个精简化、模块化、功能强大、性能卓越的虚拟 DOM 库。<br>几乎包含了虚拟 Dom 相关模块的所有功能，并且也提供了跨端的支持。<br>通过查看他的源码可以更好的理解<code>diff</code>原理。</p><h4 id="主要特点">主要特点</h4><ul><li>200 行 - 你可以通过简单地阅读所有核心代码来充分理解其工作原理</li><li>通过模块化实现可拓展</li><li>对于 vnode 和全局模块都提供了 hook，你可以在 patch 过程或者其他地方调用 hook</li><li>性能卓越：Snabbdom 是目前最高效的虚拟 DOM 库之一</li><li>Patch 函数有一个相当于 reduce/scan 函数的函数声明，这将更容易集成其他函数式库</li></ul><h4 id="使用">使用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;<br>init,<br>classModule,<br>propsModule,<br>styleModule,<br>eventListenersModule,<br>h <span class="hljs-keyword">as</span> createElement,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;snabbdom&quot;</span><br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-keyword">const</span> patch = init([<br><span class="hljs-comment">// 通过传入模块初始化 patch 函数</span><br>classModule, <span class="hljs-comment">// 开启 classes 功能</span><br>propsModule, <span class="hljs-comment">// 支持传入 props</span><br>styleModule, <span class="hljs-comment">// 支持内联样式同时支持动画</span><br>eventListenersModule, <span class="hljs-comment">// 添加事件监听</span><br>])<br><br><span class="hljs-comment">// 外层容器，相当于就是react最外部的 #app</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;container&quot;</span>)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  &lt;div id=&quot;container&quot; class=&quot;two classes&quot; onclick=&quot;someFn&quot;&gt;</span><br><span class="hljs-comment">    &lt;span style=&quot;font-weight: bold&quot;&gt;</span><br><span class="hljs-comment">      This is bold</span><br><span class="hljs-comment">    &lt;/span&gt;</span><br><span class="hljs-comment">     and this is just normal text</span><br><span class="hljs-comment">    &lt;a href=&quot;/foo&quot;&gt;I&#x27;ll take you places!&lt;/a&gt;</span><br><span class="hljs-comment">  &lt;/div&gt;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 创建虚拟Dom</span><br><span class="hljs-keyword">const</span> vnode = createElement(<br><span class="hljs-comment">// sel</span><br><span class="hljs-string">&quot;div#container.two.classes&quot;</span>,<br><span class="hljs-comment">// data 包含一些props attrs class等等</span><br>&#123;<br><span class="hljs-attr">on</span>: &#123;<br><span class="hljs-attr">click</span>: someFn,<br>&#125;,<br>&#125;,<br><span class="hljs-comment">// children</span><br>[<br>createElement(<br><span class="hljs-comment">// sel</span><br><span class="hljs-string">&quot;span&quot;</span>,<br><span class="hljs-comment">// data</span><br>&#123;<br><span class="hljs-attr">style</span>: &#123;<br><span class="hljs-attr">fontWeight</span>: <span class="hljs-string">&quot;bold&quot;</span>,<br>&#125;,<br>&#125;,<br><span class="hljs-comment">// children</span><br><span class="hljs-string">&quot;This is bold&quot;</span><br>),<br><span class="hljs-comment">// children</span><br><span class="hljs-string">&quot; and this is just normal text&quot;</span>,<br>createElement(<br><span class="hljs-string">&quot;a&quot;</span>,<br>&#123;<br><span class="hljs-attr">props</span>: &#123;<br><span class="hljs-attr">href</span>: <span class="hljs-string">&quot;/foo&quot;</span>,<br>&#125;,<br>&#125;,<br><span class="hljs-string">&quot;I&#x27;ll take you places!&quot;</span><br>),<br>]<br>)<br><br><span class="hljs-comment">// 传入一个空的元素节点 - 将产生副作用（修改该节点）</span><br>patch(container, vnode)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  &lt;div id=&quot;container&quot; class=&quot;two classes&quot; onclick=&quot;anotherEventHandler&quot;&gt;</span><br><span class="hljs-comment">    &lt;span style=&quot;font-weight: bold;font-style: italic;&quot;&gt;</span><br><span class="hljs-comment">      This is now italic type</span><br><span class="hljs-comment">    &lt;/span&gt;</span><br><span class="hljs-comment">     and this is still just normal text</span><br><span class="hljs-comment">    &lt;a href=&quot;/bar&quot;&gt;I&#x27;ll take you places!&lt;/a&gt;</span><br><span class="hljs-comment">  &lt;/div&gt;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 再次创建虚拟Dom</span><br><span class="hljs-keyword">const</span> newVnode = createElement(<br><span class="hljs-string">&quot;div#container.two.classes&quot;</span>,<br>&#123;<br><span class="hljs-attr">on</span>: &#123;<br><span class="hljs-attr">click</span>: anotherEventHandler,<br>&#125;,<br>&#125;,<br>[<br>createElement(<br><span class="hljs-string">&quot;span&quot;</span>,<br>&#123;<br><span class="hljs-attr">style</span>: &#123;<br><span class="hljs-attr">fontWeight</span>: <span class="hljs-string">&quot;normal&quot;</span>,<br><span class="hljs-attr">fontStyle</span>: <span class="hljs-string">&quot;italic&quot;</span>,<br>&#125;,<br>&#125;,<br><span class="hljs-string">&quot;This is now italic type&quot;</span><br>),<br><span class="hljs-string">&quot; and this is still just normal text&quot;</span>,<br>createElement(<br><span class="hljs-string">&quot;a&quot;</span>,<br>&#123;<br><span class="hljs-attr">props</span>: &#123;<br><span class="hljs-attr">href</span>: <span class="hljs-string">&quot;/bar&quot;</span>,<br>&#125;,<br>&#125;,<br><span class="hljs-string">&quot;I&#x27;ll take you places!&quot;</span><br>),<br>]<br>)<br><span class="hljs-comment">// 再次调用 `patch`</span><br>patch(vnode, newVnode) <span class="hljs-comment">// 将旧节点更新为新节点</span><br></code></pre></td></tr></table></figure><h3 id="虚拟-Dom">虚拟 Dom</h3><p>虚拟 Dom 是一个 javascript 对象结构。<br>大致为以下形式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> VNodeData &#123;<br>  props?: Props<br>  attrs?: Attrs<br>  <span class="hljs-class"><span class="hljs-keyword">class</span>?: <span class="hljs-title">Classes</span></span><br><span class="hljs-class">  <span class="hljs-title">style</span>?: <span class="hljs-title">VNodeStyle</span></span><br><span class="hljs-class">  <span class="hljs-title">dataset</span>?: <span class="hljs-title">Dataset</span></span><br><span class="hljs-class">  <span class="hljs-title">on</span>?: <span class="hljs-title">On</span></span><br><span class="hljs-class">  <span class="hljs-title">hero</span>?: <span class="hljs-title">Hero</span></span><br><span class="hljs-class">  <span class="hljs-title">attachData</span>?: <span class="hljs-title">AttachData</span></span><br><span class="hljs-class">  <span class="hljs-title">hook</span>?: <span class="hljs-title">Hooks</span></span><br><span class="hljs-class">  <span class="hljs-title">key</span>?: <span class="hljs-title">Key</span></span><br><span class="hljs-class">  <span class="hljs-title">ns</span>?: <span class="hljs-title">string</span> // <span class="hljs-title">for</span> <span class="hljs-title">SVGs</span></span><br><span class="hljs-class">  <span class="hljs-title">fn</span>?: () </span>=&gt; VNode <span class="hljs-comment">// for thunks</span><br>  args?: <span class="hljs-built_in">any</span>[] <span class="hljs-comment">// for thunks</span><br>  [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> <span class="hljs-comment">// for any other 3rd party module</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> Key = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">interface</span> VNode = &#123;<br>    <span class="hljs-attr">sel</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span>, <span class="hljs-comment">// 选择器</span><br>    <span class="hljs-attr">data</span>: VNodeData | <span class="hljs-literal">undefined</span>, <span class="hljs-comment">// VNodeData上面定义的VNodeData</span><br>    <span class="hljs-attr">children</span>: <span class="hljs-built_in">Array</span>&lt;VNode | <span class="hljs-built_in">string</span>&gt; | <span class="hljs-literal">undefined</span>, <span class="hljs-comment">//子节点,与text互斥</span><br>    <span class="hljs-attr">text</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span>, <span class="hljs-comment">// 标签中间的文本内容</span><br>    <span class="hljs-attr">elm</span>: Node | <span class="hljs-literal">undefined</span>, <span class="hljs-comment">// 转换而成的真实DOM</span><br>    <span class="hljs-attr">key</span>: Key | <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 字符串或者数字</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="作用">作用</h4><ul><li>模板引擎可以简化视图操作,没办法跟踪状态，虚拟 Dom 可以</li><li>通过比较前后两次状态差异更新真实 DOM，减少 Dom 操作</li><li>可以跨平台使用</li><li>创建内存开销小，性能更好（复杂视图情况）</li></ul><h3 id="Diff">Diff</h3><h4 id="简单描述">简单描述</h4><ol><li><code>init</code>初始化，返回<code>patch</code>函数。</li><li><code>h</code>函数创建虚拟 Dom 对象。</li><li><code>patch</code>比较新旧虚拟 Dom。</li><li>将发生变化的 Dom 更新反映到真实 Dom 树当中。</li></ol><h4 id="细节">细节</h4><ul><li>init</li></ul><p>采用闭包的形式，内部创建变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 注册模块，就像是上面例子里的 class style模块等</span></span></span><br><span class="hljs-params"><span class="hljs-function">modules: <span class="hljs-built_in">Array</span>&lt;Partial&lt;Module&gt;&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 跨端使用，默认浏览器api</span></span></span><br><span class="hljs-params"><span class="hljs-function">domApi?: DOMAPI,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 额外options</span></span></span><br><span class="hljs-params"><span class="hljs-function">options?: Options</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br><span class="hljs-comment">// cbs 一些钩子函数🐶</span><br><br><span class="hljs-comment">// 一些工具方法</span><br><span class="hljs-comment">// createElm addVnodes removeVnodes updateChildren patchVnode</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">oldVnode, vnode</span>) </span>&#123;<br><span class="hljs-comment">// 比较新旧vnode并处理</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>h</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">h</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 元素选择器</span></span></span><br><span class="hljs-params"><span class="hljs-function">sel: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// data</span></span></span><br><span class="hljs-params"><span class="hljs-function">b?: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// children</span></span></span><br><span class="hljs-params"><span class="hljs-function">c?: <span class="hljs-built_in">any</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br><span class="hljs-comment">// ... 一系列的参数组织逻辑</span><br><span class="hljs-keyword">return</span> vnode(sel, data, children, text, <span class="hljs-literal">undefined</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>vnode</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vnode</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 元素选择器</span></span></span><br><span class="hljs-params"><span class="hljs-function">sel: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span>,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 一些相关props属性集合</span></span></span><br><span class="hljs-params"><span class="hljs-function">data: <span class="hljs-built_in">any</span> | <span class="hljs-literal">undefined</span>,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 子节点</span></span></span><br><span class="hljs-params"><span class="hljs-function">children: <span class="hljs-built_in">Array</span>&lt;VNode | <span class="hljs-built_in">string</span>&gt; | <span class="hljs-literal">undefined</span>,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 字符串内容</span></span></span><br><span class="hljs-params"><span class="hljs-function">text: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span>,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 真实Dom</span></span></span><br><span class="hljs-params"><span class="hljs-function">elm: Element | DocumentFragment | Text | <span class="hljs-literal">undefined</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">VNode</span> </span>&#123;<br><span class="hljs-keyword">const</span> key = data === <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">undefined</span> : data.key<br><span class="hljs-keyword">return</span> &#123; sel, data, children, text, elm, key &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="patch">patch</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 判断是否为相同vnode</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sameVnode</span>(<span class="hljs-params">vnode1: VNode, vnode2: VNode</span>): <span class="hljs-title">boolean</span> </span>&#123;<br><span class="hljs-keyword">const</span> isSameKey = vnode1.key === vnode2.key<br><span class="hljs-keyword">const</span> isSameIs = vnode1.data?.is === vnode2.data?.is<br><span class="hljs-keyword">const</span> isSameSel = vnode1.sel === vnode2.sel<br><span class="hljs-keyword">const</span> isSameTextOrFragment =<br>!vnode1.sel &amp;&amp; vnode1.sel === vnode2.sel<br>? <span class="hljs-keyword">typeof</span> vnode1.text === <span class="hljs-keyword">typeof</span> vnode2.text<br>: <span class="hljs-literal">true</span><br><br><span class="hljs-keyword">return</span> isSameSel &amp;&amp; isSameKey &amp;&amp; isSameIs &amp;&amp; isSameTextOrFragment<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">patch</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">oldVnode: VNode | Element | DocumentFragment,</span></span><br><span class="hljs-params"><span class="hljs-function">vnode: VNode</span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">VNode</span> </span>&#123;<br><span class="hljs-keyword">let</span> i: <span class="hljs-built_in">number</span>, <span class="hljs-attr">elm</span>: Node, <span class="hljs-attr">parent</span>: Node<br><span class="hljs-keyword">const</span> insertedVnodeQueue: VNodeQueue = []<br><span class="hljs-comment">// pre钩子执行</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; cbs.pre.length; ++i) cbs.pre[i]()<br><br><span class="hljs-comment">// 判断是否为element(nodetype === 1)，不是就把他转成vnode</span><br><span class="hljs-keyword">if</span> (isElement(api, oldVnode)) &#123;<br>oldVnode = emptyNodeAt(oldVnode)<br>&#125;<br><span class="hljs-comment">// 判断是否为空节点(nodetype === 11)</span><br><span class="hljs-comment">// 是的话转成vnode 空节点</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDocumentFragment(api, oldVnode)) &#123;<br>oldVnode = emptyDocumentFragmentAt(oldVnode)<br>&#125;<br><br><span class="hljs-comment">// 如果是相同节点则进行比较</span><br><span class="hljs-comment">// 具体细节看后面</span><br><span class="hljs-keyword">if</span> (sameVnode(oldVnode, vnode)) &#123;<br>patchVnode(oldVnode, vnode, insertedVnodeQueue)<br>&#125;<br><span class="hljs-comment">// 不相同则直接插入</span><br><span class="hljs-keyword">else</span> &#123;<br>elm = oldVnode.elm!<br>parent = api.parentNode(elm) <span class="hljs-keyword">as</span> Node<br><br><span class="hljs-comment">// 就是一个递归调用初始化创建dom节点的方法</span><br>createElm(vnode, insertedVnodeQueue)<br><br><span class="hljs-keyword">if</span> (parent !== <span class="hljs-literal">null</span>) &#123;<br>api.insertBefore(parent, vnode.elm!, api.nextSibling(elm))<br>removeVnodes(parent, [oldVnode], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; insertedVnodeQueue.length; ++i) &#123;<br>insertedVnodeQueue[i].data!.hook!.insert!(insertedVnodeQueue[i])<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; cbs.post.length; ++i) cbs.post[i]()<br><span class="hljs-keyword">return</span> vnode<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="patchVnode">patchVnode</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">patchVnode</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">oldVnode: VNode,</span></span><br><span class="hljs-params"><span class="hljs-function">vnode: VNode,</span></span><br><span class="hljs-params"><span class="hljs-function">insertedVnodeQueue: VNodeQueue</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br><span class="hljs-keyword">const</span> hook = vnode.data?.hook<br>  <span class="hljs-comment">// 钩子执行 </span><br>hook?.prepatch?.(oldVnode, vnode)<br><span class="hljs-keyword">const</span> elm = (vnode.elm = oldVnode.elm)!<br><span class="hljs-keyword">if</span> (oldVnode === vnode) <span class="hljs-keyword">return</span><br>  <span class="hljs-comment">// 一些数据的格式处理 </span><br><span class="hljs-keyword">if</span> (<br>vnode.data !== <span class="hljs-literal">undefined</span> ||<br>(isDef(vnode.text) &amp;&amp; vnode.text !== oldVnode.text)<br>) &#123;<br>vnode.data ??= &#123;&#125;<br>oldVnode.data ??= &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode)<br>vnode.data?.hook?.update?.(oldVnode, vnode)<br>&#125;<br><br><span class="hljs-keyword">const</span> oldCh = oldVnode.children <span class="hljs-keyword">as</span> VNode[]<br><span class="hljs-keyword">const</span> ch = vnode.children <span class="hljs-keyword">as</span> VNode[]<br>  <span class="hljs-comment">// 新vnode没有text</span><br><span class="hljs-keyword">if</span> (isUndef(vnode.text)) &#123;<br>    <span class="hljs-comment">// 新旧都有子vnode</span><br><span class="hljs-keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;<br>      <span class="hljs-comment">// 更新子vnode，详情的看下面</span><br><span class="hljs-keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue)<br>&#125; <br>    <span class="hljs-comment">// 只有新的有子vnode</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDef(ch)) &#123;<br>      <span class="hljs-comment">// 将text属性置为空字符串</span><br><span class="hljs-keyword">if</span> (isDef(oldVnode.text)) api.setTextContent(elm, <span class="hljs-string">&quot;&quot;</span>)<br>      <span class="hljs-comment">// 将新vnode下面的子vnode全部添加到dom树中</span><br>addVnodes(elm, <span class="hljs-literal">null</span>, ch, <span class="hljs-number">0</span>, ch.length - <span class="hljs-number">1</span>, insertedVnodeQueue)<br>&#125; <br>    <span class="hljs-comment">// 只有旧的有子vnode</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDef(oldCh)) &#123;<br>      <span class="hljs-comment">// 删除旧vnode中的所有子vnode</span><br>removeVnodes(elm, oldCh, <span class="hljs-number">0</span>, oldCh.length - <span class="hljs-number">1</span>)<br>&#125; <br>    <span class="hljs-comment">// 新旧都没有子vnode且旧vnode有text</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDef(oldVnode.text)) &#123;<br>      <span class="hljs-comment">// 简单置空dom的text</span><br>api.setTextContent(elm, <span class="hljs-string">&quot;&quot;</span>)<br>&#125;<br>&#125; <br>  <span class="hljs-comment">// 新旧vnode的text不同  </span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldVnode.text !== vnode.text) &#123;<br>    <span class="hljs-comment">// 同上删除所有的子vnode </span><br><span class="hljs-keyword">if</span> (isDef(oldCh)) &#123;<br>removeVnodes(elm, oldCh, <span class="hljs-number">0</span>, oldCh.length - <span class="hljs-number">1</span>)<br>&#125;<br>    <span class="hljs-comment">// 设置新vnode的text</span><br>api.setTextContent(elm, vnode.text!)<br>&#125;<br>  <span class="hljs-comment">// 钩子执行</span><br>hook?.postpatch?.(oldVnode, vnode)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="updateChildren">updateChildren</h5><ul><li><p>五种情况的处理</p><ol><li>新开始节点 vs 旧开始节点（new_start_index++, old_start_index++）</li><li>新结束节点 vs 旧结束节点（new_end_index–, old_end_index–）</li><li>新结束节点 vs 旧开始节点（new_end_index–, old_start_index++）</li><li>新开始节点 vs 旧结束节点（new_start_index++, old_end_index–）</li><li>在 旧节点 中寻找 新开始节点，找到则位移到 旧开始节点 的位置，否则创建到 旧开始节点 的位置。</li></ol><p>每次循环只需执行通过上述一个条件即可。<br>当新或者旧节点遍历完成则退出循环。</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateChildren</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">parentElm: Node,</span></span><br><span class="hljs-params"><span class="hljs-function">oldCh: VNode[],</span></span><br><span class="hljs-params"><span class="hljs-function">newCh: VNode[],</span></span><br><span class="hljs-params"><span class="hljs-function">insertedVnodeQueue: VNodeQueue</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br><span class="hljs-keyword">let</span> oldStartIdx = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> newStartIdx = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> oldEndIdx = oldCh.length - <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> oldStartVnode = oldCh[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">let</span> oldEndVnode = oldCh[oldEndIdx]<br><span class="hljs-keyword">let</span> newEndIdx = newCh.length - <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> newStartVnode = newCh[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">let</span> newEndVnode = newCh[newEndIdx]<br><span class="hljs-keyword">let</span> oldKeyToIdx: KeyToIndexMap | <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> idxInOld: <span class="hljs-built_in">number</span><br><span class="hljs-keyword">let</span> elmToMove: VNode<br><span class="hljs-keyword">let</span> before: <span class="hljs-built_in">any</span><br><br><span class="hljs-keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;<br><span class="hljs-keyword">if</span> (oldStartVnode == <span class="hljs-literal">null</span>) &#123;<br>oldStartVnode = oldCh[++oldStartIdx] <span class="hljs-comment">// Vnode might have been moved left</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldEndVnode == <span class="hljs-literal">null</span>) &#123;<br>oldEndVnode = oldCh[--oldEndIdx]<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newStartVnode == <span class="hljs-literal">null</span>) &#123;<br>newStartVnode = newCh[++newStartIdx]<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newEndVnode == <span class="hljs-literal">null</span>) &#123;<br>newEndVnode = newCh[--newEndIdx]<br>&#125; <br>    <span class="hljs-comment">// 情况一</span><br>    <span class="hljs-comment">// 新旧开始节点相同</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;<br>patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)<br>oldStartVnode = oldCh[++oldStartIdx]<br>newStartVnode = newCh[++newStartIdx]<br>&#125; <br>    <span class="hljs-comment">// 情况二</span><br>    <span class="hljs-comment">// 新旧结束节点相同</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;<br>patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)<br>oldEndVnode = oldCh[--oldEndIdx]<br>newEndVnode = newCh[--newEndIdx]<br>&#125; <br>    <span class="hljs-comment">// 情况三</span><br>    <span class="hljs-comment">// 新结束和旧开始节点相同</span><br>    <span class="hljs-comment">// 将旧开始节点移动到旧结束节点后面</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123;<br><span class="hljs-comment">// Vnode moved right</span><br>patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)<br>api.insertBefore(<br>parentElm,<br>oldStartVnode.elm!,<br>api.nextSibling(oldEndVnode.elm!)<br>)<br>oldStartVnode = oldCh[++oldStartIdx]<br>newEndVnode = newCh[--newEndIdx]<br>&#125; <br>    <span class="hljs-comment">// 情况四</span><br>    <span class="hljs-comment">// 新开始节点和旧结束节点相同</span><br>    <span class="hljs-comment">// 将旧结束节点移动到旧开始节点前面</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123;<br><span class="hljs-comment">// Vnode moved left</span><br>patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)<br>api.insertBefore(parentElm, oldEndVnode.elm!, oldStartVnode.elm!)<br>oldEndVnode = oldCh[--oldEndIdx]<br>newStartVnode = newCh[++newStartIdx]<br>&#125; <br>    <span class="hljs-comment">// 情况五</span><br><span class="hljs-comment">// 将旧节点列表的指定区间内的节点信息转成对象map格式</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//key: index, 组件的key，组件的index索引</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 从newStartIndex开始从map中查找是否存在该节点</span><br>    <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 一开始初始化</span><br><span class="hljs-keyword">if</span> (oldKeyToIdx === <span class="hljs-literal">undefined</span>) &#123;<br>oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)<br>&#125;<br>idxInOld = oldKeyToIdx[newStartVnode.key <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>]<br><span class="hljs-comment">// 如果新节点在旧节点中不存在</span><br><span class="hljs-comment">// 创建新节点插入到旧开始节点前面</span><br><span class="hljs-keyword">if</span> (isUndef(idxInOld)) &#123;<br><span class="hljs-comment">// New element</span><br>api.insertBefore(<br>parentElm,<br>createElm(newStartVnode, insertedVnodeQueue),<br>oldStartVnode.elm!<br>)<br>&#125; <br><span class="hljs-comment">// 新节点在旧节点中存在</span><br><span class="hljs-keyword">else</span> &#123;<br>elmToMove = oldCh[idxInOld]<br><span class="hljs-comment">// sel 不同则重新创建</span><br><span class="hljs-comment">// 将新节点插入到旧开始节点的前面</span><br><span class="hljs-keyword">if</span> (elmToMove.sel !== newStartVnode.sel) &#123;<br>api.insertBefore(<br>parentElm,<br>createElm(newStartVnode, insertedVnodeQueue),<br>oldStartVnode.elm!<br>)<br>&#125; <br><span class="hljs-comment">// 如果是相同节点则进行下一层级的比较  </span><br><span class="hljs-comment">// 并将该节点插入到旧节点的前面</span><br><span class="hljs-keyword">else</span> &#123;<br>patchVnode(elmToMove, newStartVnode, insertedVnodeQueue)<br>oldCh[idxInOld] = <span class="hljs-literal">undefined</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br>api.insertBefore(parentElm, elmToMove.elm!, oldStartVnode.elm!)<br>&#125;<br>&#125;<br>newStartVnode = newCh[++newStartIdx]<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 最后的收尾工作</span><br><br><span class="hljs-comment">// 新开始节点小于等于新结束节点</span><br><span class="hljs-comment">// 旧节点已经遍历完成</span><br><span class="hljs-comment">// before用于addVnodes中的insertBefore的参照dom</span><br><span class="hljs-comment">// 将新节点中未处理的节点全部添加到before的前面  </span><br><span class="hljs-keyword">if</span> (newStartIdx &lt;= newEndIdx) &#123;<br>before = newCh[newEndIdx + <span class="hljs-number">1</span>] == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : newCh[newEndIdx + <span class="hljs-number">1</span>].elm<br>addVnodes(<br>parentElm,<br>before,<br>newCh,<br>newStartIdx,<br>newEndIdx,<br>insertedVnodeQueue<br>)<br>&#125;<br><span class="hljs-comment">// 旧节点小于等于旧结束节点</span><br><span class="hljs-comment">// 新节点已经遍历完成</span><br><span class="hljs-comment">// 说明存在需要删除的节点</span><br><span class="hljs-comment">// 将索引区间内的所有节点全部删除</span><br><span class="hljs-keyword">if</span> (oldStartIdx &lt;= oldEndIdx) &#123;<br>removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>下面是一个包含前四种情况的一个例子</li></ul><img src="/images/dom-diff学习/diff-1.jpg" /><table><thead><tr><th style="text-align:center">step</th><th style="text-align:center">new_start</th><th style="text-align:center">new_end</th><th style="text-align:center">old_start</th><th style="text-align:center">old_end</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr></tbody></table><img src="/images/dom-diff学习/diff-2.jpg" /><table><thead><tr><th style="text-align:center">step</th><th style="text-align:center">new_start</th><th style="text-align:center">new_end</th><th style="text-align:center">old_start</th><th style="text-align:center">old_end</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr></tbody></table><img src="/images/dom-diff学习/diff-3.jpg" /><table><thead><tr><th style="text-align:center">step</th><th style="text-align:center">new_start</th><th style="text-align:center">new_end</th><th style="text-align:center">old_start</th><th style="text-align:center">old_end</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr></tbody></table><img src="/images/dom-diff学习/diff-4.jpg" /><table><thead><tr><th style="text-align:center">step</th><th style="text-align:center">new_start</th><th style="text-align:center">new_end</th><th style="text-align:center">old_start</th><th style="text-align:center">old_end</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><img src="/images/dom-diff学习/diff-5.jpg" /><table><thead><tr><th style="text-align:center">step</th><th style="text-align:center">new_start</th><th style="text-align:center">new_end</th><th style="text-align:center">old_start</th><th style="text-align:center">old_end</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table><img src="/images/dom-diff学习/diff-6.jpg" /><p><code>while</code>循环至此全部结束。<br>接着就是下面的收尾工作。<br>将剩下的节点插入到<code>newEndIndex</code>节点前。</p><ul><li>接着是一个第五种情况的例子</li></ul><img src="/images/dom-diff学习/diff-7.jpg" /><p>上面的例子，只说新节点的第一个子节点。<br>前面四种情况都无法满足。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span>) &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (oldKeyToIdx === <span class="hljs-literal">undefined</span>) &#123;<br>oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);<br>&#125;<br>idxInOld = oldKeyToIdx[newStartVnode.key <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>];<br><span class="hljs-keyword">if</span> (isUndef(idxInOld)) &#123;<br>api.insertBefore(<br>parentElm,<br>createElm(newStartVnode, insertedVnodeQueue),<br>oldStartVnode.elm!<br>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>elmToMove = oldCh[idxInOld];<br><span class="hljs-keyword">if</span> (elmToMove.sel !== newStartVnode.sel) &#123;<br>api.insertBefore(<br>parentElm,<br>createElm(newStartVnode, insertedVnodeQueue),<br>oldStartVnode.elm!<br>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);<br>oldCh[idxInOld] = <span class="hljs-literal">undefined</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>;<br>api.insertBefore(parentElm, elmToMove.elm!, oldStartVnode.elm!);<br>&#125;<br>&#125;<br>newStartVnode = newCh[++newStartIdx];<br>&#125;<br></code></pre></td></tr></table></figure><p>因为是第一次进入，所以<code>oldKeyIndex</code>为<code>undefined</code>。<br>创建旧节点的<code>map</code>，结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br><span class="hljs-attr">a</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">b</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">c</span>: <span class="hljs-number">2</span>,<br><span class="hljs-attr">d</span>: <span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>newStartVnode</code>当前为新节点下的第一个子节点，<code>key</code>为<code>a</code>。<br>所以<code>idxInOld</code>不为<code>undefined</code>。<br>接着拿到相关旧节点<code>elmToMove</code>，且<code>sel</code>相同。<br>最后比较两个节点的子节点。<br>将元素插入到旧开始节点的前面。<br>进入下一个循环。</p><h3 id="React">React</h3><blockquote><p>以下为个人理解，如有问题请指出。</p></blockquote><p>react的<code>diff</code>和上面的库的逻辑基本大同小异，但是在<strong>16</strong>以后，就发生了一点变化。</p><h4 id="Fiber">Fiber</h4><p>上面的<code>diff</code>存在一个问题，就是在递归比较vnode的同时，也进行了dom操作，当产生大量的更新时，页面还是会出现卡顿的情况。<br>在<strong>16</strong>以后，引入了<code>fiber</code>的概念，其数据结构其实就是一个<strong>链表</strong>。<br><code>fiber</code>中包含了很多相关信息，包括<code>sibling</code>、<code>child</code>、<code>return</code>这些层级关系，以及<code>effectTag</code>、<code>nextEffect</code>、<code>lastEffect</code>等等。<br>将整个更新过程分成了几个阶段：</p><ul><li>render<br>将<code>vnode</code>转换为<code>fiber</code>结构。<br>将需要更新节点打上<code>effectTag</code>标记。<br>此过程可以被打断（存在一个scheduler进行调度），并且不同的更新时存在优先级的。</li><li>commit<br>真正的更新过程。<br>无法被中断。</li></ul><h3 id="关于Key">关于Key</h3><p>通过上面的介绍，可以看出，<code>key</code>属性在<code>diff</code>过程中非常重要。</p><ul><li>他可以使过程变得更快</li><li>也可以避免出错</li><li>并且使用索引作为<code>key</code>也会发生未知的错误</li></ul><p>参考<a href="https://juejin.cn/post/6919302952486174733">深入理解 React Diff 算法</a>中的例子。</p><h4 id="不设置key的情况">不设置key的情况</h4><img src="/images/dom-diff学习/diff-8.jpg" /><p>假设没有设置<code>key</code>，在第三次循环当中，因为被判断成了是相同节点，多了一次<code>patch</code>的过程。</p><img src="/images/dom-diff学习/diff-9.jpg" />  <p>当设置了<code>key</code>的情况，在第三次循环时，会走上面的情况三（new_end vs old_start）。</p><h4 id="设置索引为key的情况">设置索引为key的情况</h4><img src="/images/dom-diff学习/diff-10.jpg" />   <p>根据上图显示，因为使用了索引作为<code>key</code>，在新增了一个<strong>节点d</strong>到开始位置时。<br><code>diff</code>判断为情况一，所以<strong>节点a</strong>的颜色属性被赋值到了<strong>节点d</strong>上，引发了问题。</p><h2 id="结束">结束</h2><blockquote><p>参考<br><a href="https://juejin.cn/post/6919302952486174733">深入理解 React Diff 算法</a><br><a href="https://juejin.cn/post/7000266544181674014">DIff 算法看不懂就一起来砍我(带图)</a><br><a href="https://juejin.cn/post/7131741751152214030">图解 React 的 diff 算法：核心就两个字 —— 复用</a><br><a href="https://github.com/neroneroffy/react-source-code-debug">react-source-code-debug</a><br><a href="https://juejin.cn/post/6859528127010471949">React Fiber 源码解析</a><br><a href="https://github.com/snabbdom/snabbdom">snabbdom</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏设计器开发-依赖介绍</title>
    <link href="/2022/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E4%BE%9D%E8%B5%96%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91-%E4%BE%9D%E8%B5%96%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1>数据可视化大屏设计器开发-依赖介绍</h1><h2 id="开头">开头</h2><p>本文是数据可视化开始的开发细节第一章。介绍关于当中一些主要依赖包的信息。<br>万事开头难，在开始自己的码路前，首先要构思好大致的架子和功能。</p><h2 id="开始">开始</h2><h3 id="ui">ui</h3><h4 id="antd"><a href="https://github.com/ant-design/ant-design">antd</a></h4><p>这个应该不用多说了，大家应该都知道。<br>顺带提一句，在实现相关业务逻辑时，偶然发现了一个小<code>bug</code>，关于<code>Input</code>使用<code>prefix | suffix</code>时，点击输入框边框或<code>prefix | suffix</code>无法获取焦点，并且提交了<code>PR</code>。</p><h4 id="scena-react-ruler"><a href="https://github.com/daybrush/ruler/tree/master/packages/react-ruler">@scena/react-ruler</a></h4><p>标尺组件，偶然在<code>github</code>上别人的项目中实现的标尺，功能很强大，包括下面的<code>react-selecto</code>，均来自于该<a href="https://github.com/daybrush/scenejs">项目</a>，并且当中还包含了很多通用的工具库，比如：</p><h5 id="moveable"><a href="https://github.com/daybrush/moveable">moveable</a></h5><pre><code>类似于下面介绍`react-rnd`，但是拥有更丰富的功能，但是无法完全满足本项目，故放弃了。  </code></pre><h5 id="guides"><a href="https://github.com/daybrush/guides">guides</a></h5><pre><code>引导线组件。  </code></pre><p>有兴趣的可以关注下<a href="https://github.com/daybrush">作者</a></p><h4 id="react-selecto"><a href="https://github.com/daybrush/selecto/tree/master/packages/react-selecto">react-selecto</a></h4><p>多选插件，通过鼠标拖拽选中相关目标元素，支持</p><h4 id="nprogress"><a href="https://github.com/rstacruz/nprogress">nprogress</a></h4><p>页面顶部的进度条效果。<br>用于在数据保存时的交互。</p><h4 id="monaco-editor"><a href="https://github.com/microsoft/monaco-editor">monaco-editor</a></h4><p>网页端在线代码编辑器，</p><h4 id="react-shepherd"><a href="https://github.com/shipshapecode/react-shepherd">react-shepherd</a></h4><p>简单的引导页效果。</p><h4 id="react-spinners"><a href="https://github.com/davidhu2000/react-spinners">react-spinners</a></h4><p>各种样式不错的<code>loading</code>效果。</p><h4 id="react-tiny-fab"><a href="https://github.com/dericcain/react-tiny-fab">react-tiny-fab</a></h4><p>页面固定小按钮，并且支持展开收起更多小按钮。</p><h4 id="react-color"><a href="https://github.com/casesandberg/react-color">react-color</a></h4><p>颜色选择器组件。</p><h4 id="react-json-view"><a href="https://github.com/mac-s-g/react-json-view">react-json-view</a></h4><p>配置项丰富的<code>JSON</code>数据查看器。</p><h4 id="animate-css"><a href="https://github.com/animate-css/animate.css">animate.css</a></h4><p>非常丰富的css3动画。</p><h4 id="以下是非本项目核心的依赖">以下是非本项目核心的依赖</h4><h5 id="matter-js"><a href="https://github.com/liabru/matter-js">matter-js</a></h5><p>炫酷的2d物理引擎库。<br>首页的小组件使用的就是该库。</p><h5 id="parallax-js"><a href="https://github.com/wagerfield/parallax">parallax-js</a></h5><p>视差动画，官网做的相当的炫酷。<br>权限相关页面的动画来源于此项目。</p><h5 id="css-doodle"><a href="https://github.com/css-doodle/css-doodle">css-doodle</a></h5><p>利用<code>css</code>实现非常有趣的图案，利用自己的想象力可以实现各种各样的效果。<br>并且官网也提供了非常多的例子供参考。</p><h5 id="vivus"><a href="https://github.com/maxwellito/vivus">vivus</a></h5><p><code>svg</code>动画，可以用它实现简单的路径动画。</p><h3 id="组件">组件</h3><h4 id="echarts"><a href="https://github.com/apache/echarts">echarts</a></h4><p>非常知名的可视化图表库，从一众图表库中选中了它。<br>并附上社区实现的图表效果网站：<a href="https://www.isqqw.com/">https://www.isqqw.com/</a>。</p><h4 id="echarts-liquidfill"><a href="https://github.com/ecomfe/echarts-liquidfill">echarts-liquidfill</a></h4><p>基于<code>Echarts</code>自定义图表模块开发的水球图表。</p><h4 id="echarts-wordcloud"><a href="https://github.com/ecomfe/echarts-wordcloud">echarts-wordcloud</a></h4><p>基于<code>Echarts</code>自定义图表模块开发的词云图表。<br>该作者的<a href="http://zhangwenli.com/">个人主页</a>做的很不错，推荐看看。</p><h4 id="bootstrap-icons"><a href="https://github.com/twbs/icons">bootstrap-icons</a></h4><p>非常丰富的图标库。</p><h4 id="countup-js"><a href="https://github.com/inorganik/countUp.js">countup.js</a></h4><p>数字翻牌器效果。</p><h4 id="qrcode"><a href="https://github.com/soldair/node-qrcode">qrcode</a></h4><p>二维码生成库。</p><h4 id="react-fast-marquee"><a href="https://github.com/justin-chu/react-fast-marquee">react-fast-marquee</a></h4><p>简单的跑马灯效果。</p><h4 id="react-player"><a href="https://github.com/cookpete/react-player">react-player</a></h4><p>视频播放器。</p><h4 id="react-select"><a href="https://github.com/JedWatson/react-select">react-select</a></h4><p>丰富<code>API</code>，可定制性强的下拉选择组件。<br>为什么不选择<code>antd</code>组件就是因为此组件定制性更高。</p><h4 id="react-slick"><a href="https://github.com/akiran/react-slick">react-slick</a></h4><p>样式丰富的轮播组件，可以使用它来实现<strong>轮播列表</strong>。</p><h4 id="react-text-loop-next"><a href="https://github.com/samarmohan/react-text-loop-next">react-text-loop-next</a></h4><p>简单的文字垂直滚动轮播效果。</p><h4 id="typed-js"><a href="https://github.com/mattboldt/typed.js">typed.js</a></h4><p>打字机效果。</p><h4 id="DataV-React"><a href="https://github.com/DataV-Team/DataV-React">DataV-React</a></h4><p>此也是一个图表库，提供了非常多类似于阿里云<code>datav</code>效果的图表。<br>本项目引用了它当中的<code>svg</code>的<strong>边框</strong>和<strong>装饰</strong>，<code>svg</code>的图形做到了尺寸的自适应，非常适合大屏需要适应设备大小的性质。</p><h4 id="viewerjs"><a href="https://github.com/fengyuanchen/viewerjs">viewerjs</a></h4><p>交互良好的图片预览工具。</p><h4 id="svgdotjs-svg-js"><a href="https://github.com/svgdotjs/svg.js">@svgdotjs/svg.js</a></h4><p>同样是一个<code>svg</code>动画控制库，使用它实现了简单的路径动画。</p><h3 id="功能">功能</h3><h4 id="react-rnd"><a href="https://github.com/bokuweb/react-rnd">react-rnd</a></h4><p>同时拥有拖拽和缩放的库。<br>其实内部源码即是同时依赖了缩放（re-resizable）和拖拽（react-draggable）。</p><h4 id="re-resizable"><a href="https://github.com/bokuweb/re-resizable">re-resizable</a></h4><p>操作非常流畅的元素大小缩放工具。<br>为什么已经使用了<code>react-rnd</code>还要使用此库，电脑端当中的组件，采取的是绝对定位，使用<code>react-rnd</code>，而在移动端，组件是由上而下的流式布局，再使用绝对定位的<code>react-rnd</code>就不合适了，并且组件不需要拖拽位置的功能，故使用此项目。</p><h4 id="react-dnd"><a href="https://github.com/react-dnd/react-dnd">react-dnd</a></h4><p>简单好用的元素拖拽放置库。</p><h4 id="react-sortable-hoc"><a href="https://github.com/clauderic/react-sortable-hoc">react-sortable-hoc</a></h4><p>简单的拖拽排序库。<br>大屏项目中关于数据过滤器的执行顺序，使用它来进行排序。</p><h4 id="ahooks"><a href="https://github.com/alibaba/hooks">ahooks</a></h4><p>拥有非常多，功能覆盖广，实用的<code>react hook</code>。<br>比如其中的<code>useHover</code>、<code>useSize</code>、<code>useUnmount</code>、<code>useDebounce</code>、<code>useRafState</code>、<code>useUpdateEffect</code>等在一些场景下面简化了很多的代码。</p><h4 id="axios"><a href="https://github.com/axios/axios">axios</a></h4><p>这个库应该不用多说了，大家应该都知道，<code>github</code>👍快破<strong>100k</strong>了。</p><h4 id="classnames"><a href="https://github.com/JedWatson/classnames">classnames</a></h4><p>方便组合组件的多个<code>className</code>，并且支持条件控制，非常方便。</p><h4 id="clipboard"><a href="https://github.com/zenorocha/clipboard.js">clipboard</a></h4><p>使用简单的内容<strong>复制粘贴</strong>库。</p><h4 id="color"><a href="https://github.com/Qix-/color">color</a></h4><p>用于转换或获取各种格式的颜色数据的库。</p><h4 id="array-move"><a href="https://github.com/sindresorhus/array-move">array-move</a></h4><p>用于切换数组当中元素位置的库。</p><h4 id="react-undo-component"><a href="https://github.com/food-billboard/react-undo-component">react-undo-component</a></h4><p>本人自己实现的<code>react</code>状态管理库，通过class wrapper或者hooks来控制组件<code>state</code>的前进后退等功能。<br>并且该库也导出了通用的状态控制方法，用于在原生javascript中控制数据状态。</p><h4 id="chunk-file-upload"><a href="https://github.com/food-billboard/chunk-file-load">chunk-file-upload</a></h4><p>这个也是本人实现的一个库，用于文件分片上传的功能。<br>大屏项目的后端也是有自己开发，因为服务器的资源有限，所以需要控制媒体资源存储，防止出现重复资源，故在这里对于图片资源，也需要对其进行<code>md5</code>计算来判断文件资源是否在服务器中存在。</p><h4 id="eventemitter3"><a href="https://github.com/primus/eventemitter3">eventemitter3</a></h4><p>功能强大的自定义事件库。<br>大屏项目中经常出现几个层级不同的组件同时存在一定的依赖关系，通过自定义事件来进行相互关联，非常的方便。（这是本人自己的歪办法）</p><h4 id="file-saver"><a href="https://github.com/eligrey/FileSaver.js">file-saver</a></h4><p>前端文件下载库。</p><h4 id="html2canvas"><a href="https://github.com/niklasvh/html2canvas">html2canvas</a></h4><p>html页面转canvas，用于截取页面。</p><h4 id="mustache"><a href="https://github.com/janl/mustache.js">mustache</a></h4><p>这是一个非常🐂的插值语法的库，可以解析字符串中的插值语法，和<code>vue</code>中的写法一样，<code>&#123;&#123;variable&#125;&#125;</code>。</p><h4 id="is-mobile"><a href="https://github.com/kaimallea/isMobile">is-mobile</a></h4><p>一个用于判断当前浏览器环境是否是移动端的库。</p><h4 id="localforage"><a href="https://github.com/localForage/localForage">localforage</a></h4><p>前端浏览器本地缓存库。</p><h4 id="lodash"><a href="https://github.com/lodash/lodash">lodash</a></h4><p>各种各样实用函数库。</p><h4 id="mockjs"><a href="https://github.com/nuysoft/Mock">mockjs</a></h4><p>生成各种各样的假数据。<br>此库用于完成大屏项目中关于<code>mock</code>数据相关的功能。</p><h4 id="moment"><a href="https://github.com/moment/moment">moment</a></h4><p>功能强大的时间处理库。</p><h4 id="nanoid"><a href="https://github.com/ai/nanoid">nanoid</a></h4><p>生成唯一<code>id</code>的库。</p><h2 id="结束">结束</h2><p>结束🔚。</p><p>顺便在下面附上相关的链接。</p><blockquote><p><a href="http://47.97.27.23/api/backend/screen/index.html">试用地址</a><br><a href="https://github.com/food-billboard/create-chart/issues/2">试用账号</a><br><a href="https://food-billboard.github.io/create-chart/index.html#/">静态版试用地址</a><br><a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">操作文档</a><br><a href="https://github.com/food-billboard/create-chart">代码地址</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>大屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lowcode react chart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏设计器开发</title>
    <link href="/2022/11/16/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91/"/>
    <url>/2022/11/16/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1>数据可视化大屏设计器开发</h1><h2 id="开头">开头</h2><p>低代码平台，算是一个已经热门很久了的话题，本人也是在看了很多的开源项目以及体验了相关的产品，决定自己搞一个出来玩玩。<br>最终定下的是<code>数据大屏</code>的可视化设计器，相对于页面低代码，大屏的低代码总体来说，相对更简单一些，但是考虑到当中的一些细节及效果，那也算是相当的复杂。</p><p>研发工作其实已经开始了很久，最终还是决定写下一篇水文来记录一下。<br><a href="http://47.97.27.23/api/backend/screen/index.html">大屏的体验地址</a><br>体验账号放在了代码的<a href="https://github.com/food-billboard/create-chart/issues/2">issue</a>中，请自取。<br>当前版本维持在<code>1.14</code>版本，并且还在持续迭代中，虽然当中还有很多的<code>bug</code>，体验的伙伴轻喷🙏🏻。</p><img src="/images/数据可视化大屏设计器开发/screenshoot-4.jpg" /><br/><br/><img src="/images/数据可视化大屏设计器开发/screenshoot-5.jpg" /><h2 id="开始">开始</h2><h3 id="技术栈">技术栈</h3><p>大屏整体结构使用了<a href="https://github.com/umijs/umi">umi</a>、<a href="https://github.com/facebook/react">React</a>、<a href="https://github.com/apache/echarts">Echarts</a>。</p><h3 id="功能相关">功能相关</h3><h3 id="设计器">设计器</h3><ul><li>[x] 组件复制、粘贴（支持跨屏）</li><li>[x] 组件转换</li><li>[x] 前进、后退</li><li>[x] 成组</li><li>[x] 多选</li><li>[x] 对齐</li><li>[x] 数据过滤</li><li>[x] 全局常量</li><li>[x] 滤镜</li><li>[x] 主题色转换（支持图片上传）</li><li>[x] 图层管理</li><li>[ ] PC、H5两端支持</li><li>[x] 模板创建使用</li><li>[x] 导入、导出</li><li>[x] 跨屏复制粘贴</li><li>[x] 组件边框内置支持</li><li>[x] 条件控制</li><li>[x] 组件交互联动支持</li></ul><h3 id="数据">数据</h3><p>当前设计器支持三种数据格式：<code>静态数据</code>、<code>API</code>、<code>Mock</code>。</p><p><code>MOCK</code>数据应用在一些只需简单演示的场景中，大屏基于<a href="https://github.com/nuysoft/Mock">MockJs</a>在管理后台内置了一个可表单配置<code>Mock数据</code>的功能，可在大屏中选择该数据类型进行快速的数据填充，加速大屏研发速度。</p><h3 id="产出">产出</h3><p>完成设计产出，可以进行简单预览。<br>最后交付则可选择进行发布分享，分享页面不需要进行登录认证，并且支持密码验证。</p><h3 id="ps">ps</h3><p>详情功能及操作可参看<a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">大屏操作文档</a></p><p>可能当中页面很多地方与阿里的<code>datav</code>相似，不用怀疑，因为很多地方的<code>ui</code>均参照其进行修改的😕。</p><p>下面是一些例子🌰<br><img src="/images/数据可视化大屏设计器开发/screenshoot-1.png" /><br><br/><br><br/><br><img src="/images/数据可视化大屏设计器开发/screenshoot-2.png" /></p><h2 id="结束">结束</h2><p>这次的水文算是一个整体的介绍了，当中的细节实现可能会在后续的水文中介绍。<br>顺便在下面附上相关的链接。</p><blockquote><p><a href="http://47.97.27.23/api/backend/screen/index.html">试用地址</a><br><a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">操作文档</a><br><a href="https://github.com/food-billboard/create-chart">代码地址</a></p></blockquote><p>如果使用中有任何问题，可以在<a href="https://github.com/food-billboard/create-chart/issues">issue</a>中留言，或者直接在这里留言。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>大屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lowcode react chart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docx库Table踩坑</title>
    <link href="/2022/11/11/docx%E5%BA%93Table%E8%B8%A9%E5%9D%91/"/>
    <url>/2022/11/11/docx%E5%BA%93Table%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="docx库Table踩坑">docx库Table踩坑</h2><h2 id="介绍">介绍</h2><p>最近工作中遇到了需要导出<code>word</code>文档的需求，只是简单的将列表详情的数据导出成<code>word</code>中的表格。<br>类似于下面的效果：</p><table><thead><tr><th>标题</th><th>内容</th></tr></thead><tbody><tr><td>标题</td><td>内容</td></tr><tr><td>标题</td><td>内容</td></tr></tbody></table><p>之后找到了相关的工具库<a href="https://github.com/dolanmiu/docx">docx</a>。<br>功能强大，他封装了<code>word</code>中的相关模块的构造方法，只需要简单的创建一个对象就可以生成<code>word</code>文档。<br>其中的一些构造方法有<code>Document</code>、<code>Table</code>、<code>Paragraph</code>、<code>TextRun</code>等。</p><h2 id="正文">正文</h2><p>接着就正式开始嘎嘎一顿操作。</p><h3 id="简单实现">简单实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<br>  Document,<br>Table,<br>TableCell,<br>TableRow,<br>Paragraph,<br>VerticalAlign,<br>WidthType,<br>TableLayoutType,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;docx&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exportDocx</span>(<span class="hljs-params">filename, value</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> table = <span class="hljs-keyword">new</span> Table(&#123;<br>    <span class="hljs-attr">rows</span>: value.reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> &#123; key, value &#125; = item<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(value)) &#123;<br>acc.push(<br>...value.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TableRow(&#123;<br><span class="hljs-attr">children</span>: [<br>...(index == <span class="hljs-number">0</span><br>? [<br><span class="hljs-keyword">new</span> TableCell(&#123;<br><span class="hljs-attr">rowSpan</span>: value.length,<br><span class="hljs-attr">children</span>: [<br><span class="hljs-keyword">new</span> Paragraph(&#123;<br><span class="hljs-attr">text</span>: key,<br>&#125;),<br>],<br><span class="hljs-attr">verticalAlign</span>: VerticalAlign.CENTER,<br>&#125;),<br>  ]<br>: []),<br><span class="hljs-keyword">new</span> TableCell(&#123;<br><span class="hljs-attr">children</span>: [<br><span class="hljs-keyword">new</span> Paragraph(&#123;<br><span class="hljs-attr">text</span>: item,<br>&#125;),<br>],<br><span class="hljs-attr">verticalAlign</span>: VerticalAlign.CENTER,<br>&#125;),<br>],<br>&#125;)<br>&#125;)<br>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>acc.push(<br><span class="hljs-keyword">new</span> TableRow(&#123;<br><span class="hljs-attr">children</span>: [<br><span class="hljs-keyword">new</span> TableCell(&#123;<br><span class="hljs-attr">children</span>: [<br><span class="hljs-keyword">new</span> Paragraph(&#123;<br><span class="hljs-attr">text</span>: key,<br>&#125;),<br>],<br><span class="hljs-attr">verticalAlign</span>: VerticalAlign.CENTER,<br>&#125;),<br><span class="hljs-keyword">new</span> TableCell(&#123;<br><span class="hljs-attr">children</span>: [<br><span class="hljs-keyword">new</span> Paragraph(&#123;<br><span class="hljs-attr">text</span>: value,<br>&#125;),<br>],<br><span class="hljs-attr">verticalAlign</span>: VerticalAlign.CENTER,<br>&#125;),<br>],<br>&#125;)<br>)<br>&#125;<br><span class="hljs-keyword">return</span> acc<br>&#125;, [])<br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>简单试试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">exportDocx(<span class="hljs-string">&#x27;example.docx&#x27;</span>, [<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;title1&quot;</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;value1&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;title2&quot;</span>,<br>    <span class="hljs-attr">value</span>: [<br>      <span class="hljs-string">&quot;value2-1&quot;</span>,<br>      <span class="hljs-string">&quot;value2-2&quot;</span>,<br>      <span class="hljs-string">&quot;value2-3&quot;</span><br>    ]<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><img src="/images/docx库Table踩坑/docx-1.jpg" />  <p>看着没啥问题，但是他没有撑满整个文档。<br>给<code>Table</code>加个宽度。</p><ul><li>因为存在一个标题存在多条数据的情况，所以需要使用到<code>rowSpan</code>，和html<code>table</code>同理。</li><li><code>verticalAlign</code>，内容垂直对齐方式。</li><li><code>Paragraph</code>段落内容，可以当成文字使用。</li><li><code>TableRow</code>，等同于html的<code>tr</code></li><li><code>TableCell</code>，等同于html的<code>td</code></li></ul><h3 id="添加宽度">添加宽度</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Table(&#123;<br>  <span class="hljs-attr">width</span>: &#123;<br>    <span class="hljs-attr">type</span>: WidthType.PERCENTAGE,<br>    <span class="hljs-attr">size</span>: <span class="hljs-number">100</span> <br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><img src="/images/docx库Table踩坑/docx-2.jpg" />  <ul><li>WidthType 是一些宽度类型的枚举值<code>AUTO(default) | PERCENTAGE(百分比) | NIL(空) | DXA(二十分之一点)</code></li><li>关于这个<code>DXA</code>单位，大致看下<a href="https://blog.csdn.net/weixin_36053926/article/details/112532485">这里</a>。</li></ul><p>看着没问题。 再试试多加点内容的情况👍。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">exportDocx(<span class="hljs-string">&#x27;example.docx&#x27;</span>, [<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;title1&quot;</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;value1&quot;</span>.repeat(<span class="hljs-number">50</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;title2&quot;</span>,<br>    <span class="hljs-attr">value</span>: [<br>      <span class="hljs-string">&quot;value2-1&quot;</span>,<br>      <span class="hljs-string">&quot;value2-2&quot;</span>,<br>      <span class="hljs-string">&quot;value2-3&quot;</span><br>    ]<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><img src="/images/docx库Table踩坑/docx-3.jpg" />   <p>有点问题，文字多的那一栏，宽度超出了太多。<br>并且在钉钉里看到的预览效果是这样的。</p><img src="/images/docx库Table踩坑/docx-4.jpg" /><div align="center"><img src="/images/docx库Table踩坑/emoji-1.jpg" />   </div><p>在仓库里逛了会儿<code>issue</code>找到了对应的问题。<br><a href="https://github.com/dolanmiu/docx/issues/349">解决办法-1</a>。<br><a href="https://github.com/dolanmiu/docx/issues/1139">解决办法-2</a>。</p><ul><li>不再使用百分比宽度，而是使用<code>DXA</code>宽度。</li><li>将<code>Table</code>的宽度设置成0，并且规定其列数和列宽。</li><li>设置<code>Table</code>的<code>layout</code>为<code>FIXED</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Table(&#123;<br>  <span class="hljs-attr">layout</span>: TableLayoutType.FIXED,<br><span class="hljs-attr">columns</span>: <span class="hljs-number">3</span>,<br><span class="hljs-attr">width</span>: <span class="hljs-number">0</span>, <br><span class="hljs-attr">columnWidths</span>: [<span class="hljs-number">3213</span>, <span class="hljs-number">3213</span>, <span class="hljs-number">3212</span>] <span class="hljs-comment">// total page width is 9638 DXA for A4 portrait</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>关于上面宽度设置成<strong>0</strong>的问题，打开<code>word</code>文档查看：<br><img src="/images/docx库Table踩坑/表格大小.jpg" /><br>虽然指定宽度的按钮未被选中，但是在钉钉中依旧生效了。<br>将其指定为<code>0</code>保证完全不受影响。<br>设置<code>Table</code>的<code>layout</code>为<code>FIXED</code>，表示固定尺寸，防止单元格被压缩变形。<br>关于<code>DXA</code>的问题，个人猜测是可能百分比不被识别。</p><p>最后附上完整的例子。</p><divsrc="https://stackblitz.com/edit/js-485wx8?file=index.js"class="iframe-viewer-button">点击查看代码</div><img src="/images/docx库Table踩坑/docx-5.jpg" /><h2 id="结束">结束</h2><p>简单记录下此次使用<a href="https://github.com/dolanmiu/docx">docx</a>的踩坑。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docx word</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日进步小记</title>
    <link href="/2022/10/24/%E6%AF%8F%E6%97%A5%E8%BF%9B%E6%AD%A5%E5%B0%8F%E8%AE%B0-1/"/>
    <url>/2022/10/24/%E6%AF%8F%E6%97%A5%E8%BF%9B%E6%AD%A5%E5%B0%8F%E8%AE%B0-1/</url>
    
    <content type="html"><![CDATA[<h1>每日进步小记</h1><p>记录今天的小进步💪🏻。</p><h2 id="正文">正文</h2><p>早前几天的文章中提到，如何给<code>github</code>开源项目贡献代码，经历过一次拒绝之后，终于迎来了春天😊。<br>在调试自己的<a href="https://github.com/food-billboard/create-chart">可视化大屏项目</a>的时候，发现了一个奇怪的问题：<br>输入框表单设置的是在<code>blur</code>时触发保存，按照需求，使用的是<a href="https://github.com/ant-design/ant-design">antd</a>的<code>input</code>输入框，并添加了<code>prefix</code>属性，但是却出现了奇怪的问题，点击输入框边框或者<code>prefix</code>都触发了保存，同时也说明其同时触发了<code>focus</code>和<code>blur</code>事件。<br>随后发现是<a href="https://github.com/react-component/input">rc-input</a>出现了问题，当中使用的事件是<code>mousedown</code>，而后本人就只是简单的将其改成了<code>mouseup</code>解决了问题。<br>但是提交之后又发现，之前有人提交<code>pr</code>称使用<code>mouseup</code>会引发别的问题，无奈之下选择了一个比较复杂且不太合理的方式解决了问题。<br>最后在与作者的一番沟通交涉后，选择了<code>click</code>作为最终的解决方案。<br>作者也客气的叫我提交<code>pr</code>👍🏻。</p><p>总得来说算是一次非常不错的经历。</p><img src="/images/每日进步小记/贡献列表.jpg" /><h2 id="结束">结束</h2><p>完美结束今日美好一天😊。</p>]]></content>
    
    
    <categories>
      
      <category>fitting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fitting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贡献代码给Github开源项目</title>
    <link href="/2022/10/11/%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81%E7%BB%99Github%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/10/11/%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81%E7%BB%99Github%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1>贡献代码给Github开源项目</h1><h2 id="介绍">介绍</h2><p>之前就一直想给开源项目贡献自己的一份力，奈何都没有找到合适的机会，前几天尝试给开源项目<a href="https://github.com/alibaba/hooks">ahooks</a>贡献一下代码，虽然没有被采纳，但是也在这里做一下记录吧📝。<br>全文的贡献流程均参考文章《<a href="https://juejin.cn/post/6844903944418787341">如何贡献代码到Github开源项目</a>》。</p><h2 id="正文">正文</h2><ol><li>找到目标项目。</li></ol><p>首先是找一个适合的开源目标项目，并且有自己发现的<code>bug</code>或者优化等地方。<br>本人找到的是<code>ahooks</code>，因为相对来说，各个<code>hook</code>相对独立，并且代码精简，阅读方便。<br>本人希望在其中新增一个<code>hook</code>，用于监听浏览器的<code>location hash</code>变化以及修改。</p><ol start="2"><li>fork项目</li></ol><p>接着将目标项目<code>fork</code>到自己的账号下面。</p><img src="/images/贡献代码给Github开源项目/fork.jpg" /><img src="/images/贡献代码给Github开源项目/fork-self.jpg" /><ol start="3"><li>clone项目</li></ol><p>将自己仓库下的项目<code>clone</code>到本地。<br><code>git clone git@github.com:food-billboard/自己仓库的项目.git</code></p><ol start="4"><li>建立链接</li></ol><p>如果要提交本地代码到开源项目，需要建立其链接。<br><code>git remote add upstream git@github.com:xxxx/开源仓库.git</code><br>验证以下命令会出现两个<code>upstream</code>地址。<br><code>git remote -v</code></p><ol start="5"><li>新建分支&amp;修改代码&amp;提交</li></ol><p>接着就是按照平常的简单的新分支编写代码并提交。</p><ul><li>顺带一提<br>为了保证质量与安全，一般都应该在提交前，完成对应修改或新增模块的功能测试以及文档修改。</li></ul><ol start="6"><li>compare&amp;pull request</li></ol><p>提交代码后，会在自己仓库主页上方出现<code>compare&amp;pull request</code>按钮。<br>点击进入到提交界面。</p><img src="/images/贡献代码给Github开源项目/pull-request.jpg" /><p>一般优秀的开源项目都会有对象的<code>pr</code>模板，我们应该按照他们的模板来进行对应的信息填写，方便作者核实相关信息。<br>完成填写后，点击提交，即完成了一次代码贡献👍。</p><p>下面给一个<code>antd</code>的模板。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs markdown">  &lt;!--<br>首先，感谢你的贡献！😄<br><br>新特性请提交至 feature 分支，其余可提交至 master 分支。<br>在维护者审核通过后会合并。<br>请确保填写以下 pull request 的信息，谢谢！~<br>--&gt;<br><br>[<span class="hljs-string">[English Template / 英文模板</span>](<span class="hljs-link">https://github.com/ant-design/ant-design/blob/master/.github/PULL_REQUEST_TEMPLATE.md</span>)]<br><br><span class="hljs-section">### 🤔 这个变动的性质是？</span><br><br><span class="hljs-bullet">-</span> [ ] 新特性提交<br><span class="hljs-bullet">-</span> [ ] 日常 bug 修复<br><span class="hljs-bullet">-</span> [ ] 站点、文档改进<br><span class="hljs-bullet">-</span> [ ] 演示代码改进<br><span class="hljs-bullet">-</span> [ ] 组件样式/交互改进<br><span class="hljs-bullet">-</span> [ ] TypeScript 定义更新<br><span class="hljs-bullet">-</span> [ ] 包体积优化<br><span class="hljs-bullet">-</span> [ ] 性能优化<br><span class="hljs-bullet">-</span> [ ] 功能增强<br><span class="hljs-bullet">-</span> [ ] 国际化改进<br><span class="hljs-bullet">-</span> [ ] 重构<br><span class="hljs-bullet">-</span> [ ] 代码风格优化<br><span class="hljs-bullet">-</span> [ ] 测试用例<br><span class="hljs-bullet">-</span> [ ] 分支合并<br><span class="hljs-bullet">-</span> [ ] 其他改动（是关于什么的改动？）<br><br><span class="hljs-section">### 🔗 相关 Issue</span><br><br>&lt;!--<br><span class="hljs-bullet">1.</span> 描述相关需求的来源，如相关的 issue 讨论链接。<br>--&gt;<br><br><span class="hljs-section">### 💡 需求背景和解决方案</span><br><br>&lt;!--<br><span class="hljs-bullet">1.</span> 要解决的具体问题。<br><span class="hljs-bullet">2.</span> 列出最终的 API 实现和用法。<br><span class="hljs-bullet">3.</span> 涉及UI/交互变动需要有截图或 GIF。<br>--&gt;<br><br><span class="hljs-section">### 📝 更新日志</span><br><br>&lt;!--<br>从用户角度描述具体变化，以及可能的 breaking change 和其他风险。<br>--&gt;<br><br>| 语言    | 更新描述 |<br>| ------- | -------- |<br>| 🇺🇸 英文 |          |<br>| 🇨🇳 中文 |          |<br><br><span class="hljs-section">### ☑️ 请求合并前的自查清单</span><br><br>⚠️ 请自检并全部<span class="hljs-strong">**勾选全部选项**</span>。⚠️<br><br><span class="hljs-bullet">-</span> [ ] 文档已补充或无须补充<br><span class="hljs-bullet">-</span> [ ] 代码演示已提供或无须提供<br><span class="hljs-bullet">-</span> [ ] TypeScript 定义已补充或无须补充<br><span class="hljs-bullet">-</span> [ ] Changelog 已提供或无须提供<br><br></code></pre></td></tr></table></figure><h3 id="注意">注意</h3><p>需要注意的是，每次在提交代码前，都应该先将本地的代码与远程仓库进行同步，以免出现不必要的麻烦。<br>这里补充下同步代码的命令。<br>如果是刚刚执行过上述命令的情况下，可跳过以下步骤。</p><ol><li>建立链接<br><code>git remote add upstream git@github.com:xxxx/开源仓库.git</code></li><li>拉取代码<br><code>git fetch upstream</code></li></ol><h2 id="结束">结束</h2><p>大致的流程就是这个样子，希望在之后还能找到合适的机会，主要还是想锻炼一下自己的代码技术。</p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SVG学习</title>
    <link href="/2022/09/19/SVG%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/09/19/SVG%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>SVG学习</h1><h2 id="介绍">介绍</h2><blockquote><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)<br>SVG 用来定义用于网络的基于矢量的图形<br>SVG 使用 XML 格式定义图形<br>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失<br>SVG 是万维网联盟的标准<br>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体</p></blockquote><p>学习<code>svg</code>的目的，是为了能在前端页面实现更多有意思的效果。<br>以下就是本人的学习笔记。</p><h2 id="正文">正文</h2><h3 id="svg">svg</h3><p><code>svg</code>标签的属性</p><ul><li>width &amp; height</li><li>version 版本</li><li>xmlns 命名空间</li><li>viewbox 可视区域<br>此属性表示裁剪一个矩形区域作为最终的可视区域（left top width height）<br>比如<code>20 20 100 100</code>表示能看到左上角(20, 20)为起点的宽高均为100的矩形区域。</li></ul><h3 id="一些常用的属性">一些常用的属性</h3><p>基本上这些属性都和<code>css</code>通用。</p><h4 id="width-height-x-y">width &amp; height &amp; x &amp; y</h4><p>元素的宽高位置。</p><h4 id="fill">fill</h4><p>颜色填充</p><svg width="100" height="100">  <rect fill="red" width="50" height="50"></rect></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;rect fill=&quot;red&quot; width=&quot;50&quot; height=&quot;50&quot;&gt;&lt;/rect&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke">stroke</h4><p>描边</p><svg width="100" height="100">  <rect x="10" y="10" fill="none" stroke="#f00" width="50" height="50"></rect></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;rect x=&quot;10&quot; y=&quot;10&quot; fill=&quot;none&quot; stroke=&quot;#f00&quot; width=&quot;50&quot; height=&quot;50&quot;&gt;&lt;/rect&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-width">stroke-width</h4><p>描边的线条尺寸</p><svg width="100" height="100">  <rect x="10" y="10" fill="none" stroke="#f00" stroke-width="10" width="50" height="50"></rect></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;rect x=&quot;10&quot; y=&quot;10&quot; fill=&quot;none&quot; stroke=&quot;#f00&quot; stroke-width=&quot;10&quot; width=&quot;50&quot; height=&quot;50&quot;&gt;&lt;/rect&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-dashoffset">stroke-dashoffset</h4><p>设置虚线的偏移量</p><svg width="200" height="100">  <polyline points="20 20 150 20" stroke-dasharray="50 10" stroke="red" stroke-width="5"></polyline>  <polyline points="20 50 150 50" stroke-dasharray="50 10" stroke="blue" stroke-width="5" stroke-dashoffset="20"></polyline></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;200&quot; height=&quot;100&quot;&gt;<br>  &lt;polyline points=&quot;20 20 150 20&quot; stroke-dasharray=&quot;50 10&quot; stroke=&quot;red&quot; stroke-width=&quot;5&quot;&gt;&lt;/polyline&gt;<br>  &lt;polyline points=&quot;20 50 150 50&quot; stroke-dasharray=&quot;50 10&quot; stroke=&quot;blue&quot; stroke-width=&quot;5&quot; stroke-dashoffset=&quot;20&quot;&gt;&lt;/polyline&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-linejoin">stroke-linejoin</h4><p>转折点的样式</p><svg width="200" height="200">  <polyline stroke-linejoin="miter" points="0 0 0 50 50 50" stroke="red" stroke-width="20" fill="none"></polyline>  <polyline stroke-linejoin="round" points="50 50 50 100 100 100" stroke="blue" stroke-width="20" fill="none"></polyline>  <polyline stroke-linejoin="bevel" points="100 100 100 150 150 150" stroke="blue" stroke-width="20" fill="none"></polyline></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;200&quot; height=&quot;100&quot;&gt;<br>  &lt;polyline stroke-linejoin=&quot;miter&quot; points=&quot;20 20 40 50 60 70&quot; stroke=&quot;red&quot; stroke-width=&quot;5&quot;&gt;&lt;/polyline&gt;<br>  &lt;polyline stroke-linejoin=&quot;round&quot; points=&quot;20 20 40 50 60 70&quot; stroke=&quot;blue&quot; stroke-width=&quot;5&quot;&gt;&lt;/polyline&gt;<br>  &lt;polyline stroke-linejoin=&quot;bevel&quot; points=&quot;20 20 40 50 60 70&quot; stroke=&quot;blue&quot; stroke-width=&quot;5&quot;&gt;&lt;/polyline&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-opacity">stroke-opacity</h4><p>描边线条的透明度</p><h4 id="stroke-linecap">stroke-linecap</h4><p>描边的末端形状</p><svg width="100" height="100">  <g fill="none" stroke="black" stroke-width="6">    <path stroke-linecap="butt" d="M5 20 l65 0" />    <path stroke-linecap="round" d="M5 40 l65 0" />    <path stroke-linecap="square" d="M5 60 l65 0" />  </g></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;g fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;6&quot;&gt;<br>    &lt;path stroke-linecap=&quot;butt&quot; d=&quot;M5 20 l65 0&quot; /&gt;<br>    &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5 40 l65 0&quot; /&gt;<br>    &lt;path stroke-linecap=&quot;square&quot; d=&quot;M5 60 l65 0&quot; /&gt;<br>  &lt;/g&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="stroke-dasharray">stroke-dasharray</h4><p>绘制虚线</p><p>格式为<code>length margin, length margin, ...</code></p><ul><li>length 虚线长度</li><li>margin 虚线间距</li></ul><svg width="100" height="100">  <g fill="none" stroke="black" stroke-width="4">    <path stroke-dasharray="5,5" d="M5 20 l215 0" />    <path stroke-dasharray="10,10" d="M5 40 l215 0" />    <path stroke-dasharray="20,10,5,5,5,10" d="M5 60 l215 0" />  </g></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;g fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4&quot;&gt;<br>    &lt;path stroke-dasharray=&quot;5,5&quot; d=&quot;M5 20 l215 0&quot; /&gt;<br>    &lt;path stroke-dasharray=&quot;10,10&quot; d=&quot;M5 40 l215 0&quot; /&gt;<br>    &lt;path stroke-dasharray=&quot;20,10,5,5,5,10&quot; d=&quot;M5 60 l215 0&quot; /&gt;<br>  &lt;/g&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="rx-ry">rx &amp; ry</h4><p><strong>矩形</strong>的圆角<br><strong>椭圆</strong>的水平和垂直尺寸</p><h4 id="cx-cy">cx &amp; cy</h4><p><strong>圆形</strong>的圆心</p><h4 id="r">r</h4><p><strong>圆形</strong>的半径</p><h3 id="shapes-形状和文字">shapes 形状和文字</h3><h4 id="rect（矩形）">rect（矩形）</h4><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <rect width="50" height="50" fill="red" stroke-width="1" stroke="rgb(0,0,0)"/></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot; &gt;<br>  &lt;rect width=&quot;50&quot; height=&quot;50&quot; fill=&quot;red&quot; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot;/&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="circle（圆形）">circle（圆形）</h4><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <circle cx="30" cy="30" r="10" fill="red" stroke-width="1" stroke="rgb(0,0,0)"/></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;circle cx=&quot;30&quot; cy=&quot;30&quot; r=&quot;10&quot; fill=&quot;red&quot; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot;/&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="ellipse（椭圆）">ellipse（椭圆）</h4><p>类似于<strong>圆形</strong>，只是把<code>r</code>变成了<code>rx</code>和<code>ry</code>。</p><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <ellipse cx="30" cy="30" rx="10" ry="5" fill="red" stroke-width="1" stroke="rgb(0,0,0)"/></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;ellipse cx=&quot;30&quot; cy=&quot;30&quot; rx=&quot;10&quot; ry=&quot;5&quot; fill=&quot;red&quot; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot;/&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="line（直线）">line（直线）</h4><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <line x1='0' y1='0' x2='100' y2='100' stroke-width="1" stroke="rgb(0,0,0)"/></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;line x1=&#x27;0&#x27; y1=&#x27;0&#x27; x2=&#x27;100&#x27; y2=&#x27;100&#x27; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot;/&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="polyline（多线段）">polyline（多线段）</h4><p><code>points</code>为点的集合，格式为<code>x1 y1, x2 y2, ...</code></p><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">  <polyline points="0 0, 100 0, 0 100, 0 0" stroke-width="1" stroke="rgb(0,0,0)" fill="none" /></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;polyline points=&quot;0 0, 100 0, 0 100, 0 0&quot; stroke-width=&quot;1&quot; stroke=&quot;rgb(0,0,0)&quot; fill=&quot;none&quot; /&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="polygon（多边形）">polygon（多边形）</h4><p>和<code>polyline</code>相同，使用<code>points</code>设置点</p><svg height="210" width="500">  <polygon points="100 10, 40 198, 190 78, 10 78, 160 198" fill="lime" stroke="purple" stroke-width="5" fill-rule="nonzero" /></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;polygon points=&quot;100 10, 40 198, 190 78, 10 78, 160 198&quot; fill=&quot;lime&quot; stroke=&quot;purple&quot; stroke-width=&quot;5&quot; fill-rule=&quot;nonzero&quot; /&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="path（路径）">path（路径）</h4><p>重点来了，这个应该是平常用到的最多的一个东西。</p><p>关键的属性在<code>d</code>上，描述了元素的整体路径的形状。<br>以下是相关的语法。</p><blockquote><p>M = moveto 移动到某个位置<br>L = lineto 从当前点连线到指定点<br>H = horizontal lineto 从当前点水平连接指定点<br>V = vertical lineto 从当前点垂直连接指定点<br>C = curveto 三次贝塞尔曲线<br>S = smooth curveto 三次平滑贝塞尔曲线<br>Q = quadratic Bézier curve 二次贝塞尔曲线<br>T = smooth quadratic Bézier curveto 平滑二次贝塞尔曲线<br>A = elliptical Arc 圆弧（x轴半径，y轴半径，旋转角度，是否选择弧长较长的一段0短边|1长边，顺时针绘制1|逆时针0，终点x轴坐标，终点y轴坐标）<br>Z = closepath  闭合路径</p></blockquote><p>以上的字母，大小表示绝对位置，小写表示相对位置。</p><p><code>d</code>以<code>M</code>开头，</p><svg width="200" height="200">  <path d="M10 10 L120 50 H140 V100" fill="none" stroke="red" stroke-width="2"></path></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;200&quot; height=&quot;200&quot;&gt;<br>  &lt;path d=&quot;M10 10 L120 50 H140 V100&quot; fill=&quot;none&quot; stroke=&quot;red&quot; stroke-width=&quot;2&quot;&gt;&lt;/path&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h5 id="A">A</h5><p>从点(10, 10)开始，绘制x轴半径为50，y轴半径是20，旋转100度，以小弧度，逆时针到点（100， 100）处。</p><svg width="200" height="200">  <path d="M10 10 A50 20 100 0 0 100 100" fill="none" stroke="red" stroke-width="2"></path></svg><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;svg width=<span class="hljs-string">&quot;200&quot;</span> height=<span class="hljs-string">&quot;200&quot;</span>&gt;<br>  &lt;path d=<span class="hljs-string">&quot;M10 10 A50 20 180 1 0 100 100&quot;</span> fill=<span class="hljs-string">&quot;none&quot;</span> stroke=<span class="hljs-string">&quot;red&quot;</span> stroke-width=<span class="hljs-string">&quot;2&quot;</span>&gt;&lt;/path&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h4 id="text（文本）">text（文本）</h4><svg height="210" width="500">  <text x="50" y="50" fill="lime">I am Daniel</text></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg height=&quot;210&quot; width=&quot;500&quot;&gt;<br>  &lt;text x=&quot;50&quot; y=&quot;50&quot; fill=&quot;lime&quot;&gt;I am Daniel&lt;/text&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h3 id="其他">其他</h3><h4 id="defs">defs</h4><p>将一些特殊的配置放在<code>defs</code>标签中，比如<strong>滤镜</strong>、<strong>渐变</strong>、<strong>阴影</strong>等。</p><svg width="100" height="100">  <defs>    <filter id="f1">      <feGaussianBlur in="SourceGraphic" stdDeviation="15" />    </filter>  </defs>  <rect width="90" height="90" stroke="green" stroke-width="3" fill="yellow" filter="url(#f1)" /></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;defs&gt;<br>    &lt;filter id=&quot;f1&quot;&gt;<br>      &lt;feGaussianBlur in=&quot;SourceGraphic&quot; stdDeviation=&quot;15&quot; /&gt;<br>    &lt;/filter&gt;<br>  &lt;/defs&gt;<br>  &lt;rect width=&quot;90&quot; height=&quot;90&quot; stroke=&quot;green&quot; stroke-width=&quot;3&quot; fill=&quot;yellow&quot; filter=&quot;url(#f1)&quot; /&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h5 id="filter（滤镜）">filter（滤镜）</h5><p>有如下滤镜：</p><blockquote><p>feBlend - 与图像相结合的滤镜<br>feColorMatrix - 用于彩色滤光片转换<br>feComponentTransfer<br>feComposite<br>feConvolveMatrix<br>feDiffuseLighting<br>feDisplacementMap<br>feFlood<br>feGaussianBlur<br>feImage<br>feMerge<br>feMorphology<br>feOffset - 过滤阴影<br>feSpecularLighting<br>feTile<br>feTurbulence<br>feDistantLight - 用于照明过滤<br>fePointLight - 用于照明过滤<br>feSpotLight - 用于照明过滤</p></blockquote><p>等等。</p><h5 id="渐变">渐变</h5><ul><li>线性渐变</li></ul><svg width="100" height="100">  <defs>    <linearGradient id="linear" x1="0%" y1="0%" x2="100%" y2="100%">      <stop offset="0%" stop-color="red" stop-opacity="1"></stop>      <stop offset="100%" stop-color="yellow" stop-opacity="1"></stop>    </linearGradient>  </defs>  <rect width="50" height="50" fill="url(#linear)"></rect></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs svg">&lt;svg width=&quot;100&quot; height=&quot;100&quot;&gt;<br>  &lt;defs&gt;<br>    &lt;linearGradient id=&quot;linear&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;100%&quot;&gt;<br>      &lt;stop offset=&quot;0%&quot; stop-color=&quot;red&quot; stop-opacity=&quot;1&quot;&gt;&lt;/stop&gt;<br>      &lt;stop offset=&quot;100%&quot; stop-color=&quot;yellow&quot; stop-opacity=&quot;1&quot;&gt;&lt;/stop&gt;<br>    &lt;/linearGradient&gt;<br>  &lt;/defs&gt;<br>  &lt;rect width=&quot;50&quot; height=&quot;50&quot; fill=&quot;url(#linear)&quot;&gt;&lt;/rect&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><ul><li><p>x1、y1、x2、y2表示线性渐变的方向</p></li><li><p>id 表示渐变的名称</p></li><li><p>stop 表示内部颜色的变化步骤</p><ul><li>offset 表示线性的位置</li><li>stop-color 表示颜色</li><li>stop-opacity 表示透明度</li></ul></li><li><p>径向渐变</p></li></ul><svg width="100" height="100">  <defs>    <radialGradient id="radial" r="100%" cx="100%" cy="50%" fx="50%" fy="50%">      <stop offset="0%" stop-color="red" stop-opacity="1"></stop>      <stop offset="100%" stop-color="yellow" stop-opacity="1"></stop>    </radialGradient>  </defs>  <circle r="50" cx="50" cy="50" fill="url(#radial)"></rect></svg><p>与线性渐变类似</p><ul><li>r 表示渐变的圆形大小</li><li>fx、fy 表示渐变的焦点，也可以说是一个灯光效果，或者说渐变<code>圆心</code>在图形上的位置。</li><li>fr 表示焦点的大小</li><li>cx、cy 表示渐变结束的圆心位置</li></ul><h2 id="结束">结束</h2><p>以上就是本人相关的笔记。<br>下面给到一些链接：<br><a href="https://c.runoob.com/more/svgeditor/">编辑器</a><br><a href="https://www.runoob.com/svg/svg-reference.html">API参考</a></p><h2 id="附增">附增</h2><p>这里保存一些平常看到的有意思的<code>svg</code>效果👍。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css svg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一创聚宽学习</title>
    <link href="/2022/09/12/%E4%B8%80%E5%88%9B%E8%81%9A%E5%AE%BD%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/09/12/%E4%B8%80%E5%88%9B%E8%81%9A%E5%AE%BD%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="一创聚宽学习">一创聚宽学习</h2><h2 id="背景">背景</h2><p>作为一个🌶🐔技术人，每天想的都是如何搞💰，每天盯着🐔💰涨涨跌跌，一夜回到解放前，受够了。是时候通过知识创造财富了。<br>学习量化交易，如果通过自动化来进行交易，实现财富自由👍。</p><h2 id="介绍">介绍</h2><p><a href="https://ycjq.95358.com/">一创聚宽</a>是国内比较有名的股票量化交易平台，它帮助开发者封装了很多实用的函数，并提供了实盘数据，以及实盘接入帮助。大大简化了开发者的开发过程。本文就简单的记录一下自己的学习笔记📝。</p><h3 id="总体结构">总体结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span>(<span class="hljs-params">context</span>):</span><br>  run_daily(period, time=<span class="hljs-string">&#x27;every_bar&#x27;</span>)<br>  g.security = <span class="hljs-string">&#x27;000001.XSHE&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">period</span>(<span class="hljs-params">context</span>):</span><br>  order(g.security, <span class="hljs-number">100</span>) <br></code></pre></td></tr></table></figure><p>以上就是一个简单的结构。</p><ul><li><code>initialize</code>表示初始化。</li><li><code>run_daily</code>表示循环执行的函数。<br><a href="https://ycjq.95358.com/help/api/help?name=api#run_daily">传送门</a></li><li><code>order</code>表示买入卖出的函数。<br><a href="https://ycjq.95358.com/help/api/help?name=api#%E4%BA%A4%E6%98%93%E5%87%BD%E6%95%B0%E2%99%A0">传送门</a></li><li><code>g</code>是一个全局的变量，可以把自定义的一些变量赋值到它下面</li><li><code>context</code>也是个类似<code>g</code>的变量，当中存储了很多有用的信息。<br><img src="/images/一创聚宽学习/context.png" /></li></ul><h3 id="一些常用的函数和属性">一些常用的函数和属性</h3><h4 id="SecurityUnitData">SecurityUnitData</h4><p>股票行情数据格式</p><blockquote><p>open: 时间段开始时价格<br>close: 时间段结束时价格<br>low: 最低价<br>high: 最高价<br>volume: 成交的股票数量<br>money: 成交的金额<br>factor: 前复权因子<br>avg: 这段时间的平均价<br>pre_close: 前一个单位时间结束时的价格<br>paused: 这只股票是否停牌，是则为1，否则为0</p></blockquote><h4 id="get-index-stocks">get_index_stocks</h4><p>获取指数成分股<br><code>get_index_stocks(&quot;000300.XSHG&quot;, '2022-01-01')</code><br>获取<code>2022-01-01</code>时的沪深300的股票集合</p><h4 id="history">history</h4><p>股票历史行情数据</p><ul><li>count: 结果集的行数</li><li>unit: 时间长度 <code>1d</code> || <code>1m</code></li><li>field 数据类型 <code>SecurityUnitData</code></li><li>security_list 股票列表</li><li>df</li><li>skip_paused 是否跳过不交易日期（包括停牌, 未上市或者退市后的日期），暂时没有太理解，后面用到了再看。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">history(field=<span class="hljs-string">&#x27;close&#x27;</span>, count=<span class="hljs-number">3</span>, security_list=[<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>,<span class="hljs-string">&#x27;000002.XSHE&#x27;</span>])<br><span class="hljs-comment"># 数据格式：</span><br><span class="hljs-comment"># 两支股票的收盘价</span><br><span class="hljs-comment">#                      </span><br><span class="hljs-comment"># 2016-08-29  11.05  9.31</span><br><span class="hljs-comment"># 2016-08-30  11.1  9.33</span><br><span class="hljs-comment"># 2016-08-31  12.33  9.36</span><br></code></pre></td></tr></table></figure><h4 id="attribute-history">attribute_history</h4><p>类似于上面的<code>history</code><br>但是只能获取一支股票，并且能获得多个字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">attribute_history(field=[<span class="hljs-string">&#x27;money&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>], count=<span class="hljs-number">3</span>, security=<span class="hljs-string">&#x27;000001.XSHE&#x27;</span>)<br><span class="hljs-comment"># 结果如下：</span><br><span class="hljs-comment">#                    money  high</span><br><span class="hljs-comment"># 2016-08-29  5.322954e+08  9.31</span><br><span class="hljs-comment"># 2016-08-30  5.618541e+08  9.33</span><br><span class="hljs-comment"># 2016-08-31  4.638758e+08  9.36</span><br></code></pre></td></tr></table></figure><h4 id="get-fundamentals">get_fundamentals</h4><p>获取公司<strong>财务数据</strong></p><ul><li>query<br>数据查询，类似于<code>mysql</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 快速上手模板</span><br><span class="hljs-comment"># query(表.字段).filter(筛选条件).order_by(排序方法).limit(数量上限)</span><br><span class="hljs-comment">#比较长的话可以分行写</span><br></code></pre></td></tr></table></figure><h3 id="一些概念">一些概念</h3><h4 id="市价单和限价单">市价单和限价单</h4><ul><li>市价单是指投资者在交易个股时，以市场的价格成交，而限价单一般是指个股的市场价格，达到投资者指定的价格时才成交。</li><li>市价单通常可以很快地成交，而限价单的优势在于以理想的价格成交，这两种单适合不同的行情。</li><li>投资者以市价委托交易的优点是在上涨行情下能及时买进，在下跌行情下能及时卖出，而以限价委托交易的优点是利于投资者控制交易成本。<br><a href="https://www.51credit.com/wenda/925559.html">原文</a></li></ul><h4 id="指标">指标</h4><p>交易次数、策略收益、基准收益、年化收益率、最大回撤率、Alpha、Beta、夏普比率。</p><h2 id="结束">结束</h2><p>内容大概就这些，关于一些高深的用法，以及一些<code>API</code>的使用，等后面实际使用时，再慢慢补充吧👍。</p>]]></content>
    
    
    <categories>
      
      <category>交易</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trade</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>parallax使用</title>
    <link href="/2022/07/08/parallax%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/08/parallax%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>最近想给自己的项目设计一个比较炫酷的首页，发现了这个工具–<a href="http://matthew.wagerfield.com/parallax/">parallax</a>，故在这里做一个简单的介绍👍 。</p><h2 id="正文">正文</h2><p><code>parallax</code>顾名思义，视差。<br>百度这样解释：</p><blockquote><p>视差就是从有一定距离的两个点上观察同一个目标所产生的方向差异。从目标看两个点之间的夹角，叫做这两个点的视差，两点之间的距离称作基线。只要知道视差角度和基线长度，就可以计算出目标和观测者之间的距离。</p></blockquote><p><code>parallax</code>帮助你完成了相关工作，你只需要写好相关的<code>html</code>结构，再通过简单的配置即可完成非常炫酷的视差动画。</p><h3 id="API">API</h3><p>下面是对其配置做的一个简单的介绍。</p><h4 id="relativeInput">relativeInput</h4><p>对场景进行全方位的控制。<br>开启时，容器内的元素的视差效果表现为整个页面。</p><h4 id="hoverOnly">hoverOnly</h4><p>是否只在鼠标在场景内触发效果。<br>当关闭该功能时，只有鼠标在容器元素内时，才会有视差的动画效果。</p><h4 id="clipRelativeInput">clipRelativeInput</h4><p>控制视差效果的边界。<br>开启时，当效果触碰到容器的边缘时，便会停止动画。</p><h4 id="inputElement">inputElement</h4><p>控制触发视差效果的范围，一般是一个元素节点。<br>和<code>relativeInput</code>和<code>hoverOnly</code>配合使用。</p><h4 id="selector">selector</h4><p>控制需要触发视差动画的元素，当默认为<code>null</code>时，容器内的所有元素均会触发。</p><h4 id="limitX-limitY">limitX &amp; limitY</h4><p>元素在轴上运动的最大距离。<br>设置<code>false</code>表示不限制。</p><h4 id="invertX-invertY">invertX &amp; invertY</h4><p>反转元素的运动方向，设置<code>true</code>则运动方向与鼠标移动方向相反。</p><h4 id="calibrateX-calibrateY">calibrateX &amp; calibrateY</h4><p>保存元素初始的位置，并根据该值进行运动。（🤔，没太懂，好像没啥效果）</p><h4 id="scalarX-scalarY">scalarX &amp; scalarY</h4><p>设置运动距离的乘数，控制元素运动的大小。</p><h4 id="frictionX-frictionY">frictionX &amp; frictionY</h4><p>设置元素运动的缓冲，低于<code>1</code>时，会减缓运动的速度，默认<code>1.5</code></p><h3 id="方法">方法</h3><p>上面的一些<code>API</code>同样可以通过实例进行控制，比如<code>limit</code>、<code>invert</code>、<code>calibrate</code>、<code>scalar</code>、<code>friction</code><br>还有以下常用方法<br><code>enable</code>、<code>disable</code>、<code>destroy</code>、<code>version</code></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>animation</tag>
      
      <tag>动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gsap动画的简单使用</title>
    <link href="/2022/06/23/gsap%E5%8A%A8%E7%94%BB%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/23/gsap%E5%8A%A8%E7%94%BB%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>最近突然需要写一些包含多种动画的首页，偶然找到了<a href="https://greensock.com/">gsap</a>，发现是真的好用，这里对其一些<code>api</code>做下简单介绍。</p><h2 id="正文">正文</h2><p><code>gsap</code>是一个<code>javascript</code>动画库，可以让开发者通过简单的<code>api</code>完成非常复杂的动画，包含非常多种类型的动画的实现，比如<code>css3</code>动画，<code>svg</code>动画以及<code>canvas</code>、<code>webgl</code>等。</p><p>官网给出了大量的示例代码，可以<a href="https://codepen.io/collection/AQPByE">前往查看</a></p><blockquote><p>但是它的缺点就是有些功能是付费的🤷🏻‍♀️，比如<code>SplitText</code>、<code>DrawSvg</code>等功能，他们能实现非常炫酷的动画效果，有兴趣的可以自行购买使用。（反正我不买😺）</p></blockquote><ul><li>以下的介绍全部都是<strong>gsap3</strong>的内容。</li></ul><h3 id="使用">使用</h3><p>本次使用大概用到了以下几个<code>api</code>：<code>to</code>、<code>from</code>、<code>timeline</code>。<br>用到的插件为：<code>ScrollTrigger</code>、<code>TextPlugin</code>、<code>MotionPathPlugin</code></p><h4 id="插件">插件</h4><p>使用的插件都需要提前注册。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; gsap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gsap&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ScrollTrigger &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gsap/ScrollTrigger&#x27;</span><br><span class="hljs-keyword">import</span> &#123; TextPlugin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gsap/TextPlugin&#x27;</span><br><span class="hljs-keyword">import</span> &#123; MotionPathPlugin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;gsap/MotionPathPlugin&#x27;</span><br><br>gsap.registerPlugin(ScrollTrigger, TextPlugin, MotionPathPlugin)<br></code></pre></td></tr></table></figure><h5 id="ScrollTrigger">ScrollTrigger</h5><p><code>ScrollTrigger</code>为滚动操作的关联动画，用户可以根据滚动实现相关的动画。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">gsap.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">scrollTrigger</span>: &#123;<br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-comment">//触发滚动动画的元素</span><br>    <span class="hljs-attr">start</span>: <span class="hljs-string">&#x27;start bottom&#x27;</span>, <span class="hljs-comment">// 动画开始执行的时机（开始/结束）</span><br>    <span class="hljs-comment">// 四个字符串代表四个时机：onEnter onLeave onEnterBack onLeaveBack</span><br>    <span class="hljs-comment">// 每个时机所有的动画类型：play pause resume reset restart complete reverse none </span><br>    <span class="hljs-attr">toggleAction</span>: <span class="hljs-string">&#x27;play none none reverse&#x27;</span>, <span class="hljs-comment">// 动画对应时间触发的动作  </span><br>    <span class="hljs-attr">scrub</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否跟随鼠标滚动执行动画，边滚动边执行动画</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><a href="https://codepen.io/GreenSock/pens/tags/?selected_tag=scrolltrigger">官网例子</a></p><h5 id="TextPlugin">TextPlugin</h5><p><code>TextPlugin</code>为一些文字动画的插件，我理解的是文字动画的基础版。<br>暂时没有用到啥特殊的配置。<br><a href="https://codepen.io/collection/DmQpRq">官网例子</a></p><h5 id="MotionPathPlugin">MotionPathPlugin</h5><p><code>MotionPathPlugin</code>为路径动画，可以通过<code>svg</code>的<code>path</code>实现相关的动画。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">gsap.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">motionPath</span>: &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;#path&quot;</span>, <span class="hljs-comment">// svg路径元素</span><br>    <span class="hljs-attr">align</span>: <span class="hljs-string">&quot;#path&quot;</span>, <span class="hljs-comment">// 对齐到路径</span><br>    <span class="hljs-attr">autoRotate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 自动旋转，会跟随路径自动旋转动画元素</span><br>    <span class="hljs-attr">alignOrigin</span>: [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>] <span class="hljs-comment">// 与路径的重合程度，当前设置表示居中  </span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><a href="https://codepen.io/GreenSock/pens/tags/?selected_tag=motionpathplugin">官网例子</a></p><h4 id="to">to</h4><p>表示元素从当前状态转换为<code>to</code>指定的一些动画状态。<br>比如，将元素移动到<code>(100, 100)</code>，并且<code>opacity</code>从1到0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">gsap.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">opacity</span>: <span class="hljs-number">0</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><p>下面介绍其中一些常用的属性，与下面<code>from</code>方法的参数基本相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Option = &#123;<br>  <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 动画执行的时间</span><br>  <span class="hljs-attr">repeat</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 重复次数，-1无限制</span><br>  <span class="hljs-attr">repeatDelay</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 二次执行动画的延迟时间  </span><br>  <span class="hljs-attr">yoyo</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 动画是否重复往返执行，比如：从1-2，然后从2-1  </span><br>  <span class="hljs-attr">stagger</span>: <span class="hljs-number">0.5</span>, <span class="hljs-comment">// 多个动画错开执行的时间间隔  </span><br>  <span class="hljs-attr">ease</span>: <span class="hljs-string">&#x27;power1.inOut&#x27;</span>, <span class="hljs-comment">// 动画的速度曲线，详细可以查看文件 /node_modules/gsap/types/ease.d.ts  </span><br>  <span class="hljs-comment">// css 属性</span><br>  <span class="hljs-attr">scale</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 缩放</span><br>  <span class="hljs-attr">rotate</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 旋转</span><br>  <span class="hljs-attr">transformOrigin</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-comment">// 变换中心点</span><br>  <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">// 宽度 100vh 100px 100% 都可以</span><br>  <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">// 高度同理</span><br>  <span class="hljs-attr">visibility</span>: <span class="hljs-string">&#x27;visible&#x27;</span>, <span class="hljs-comment">// 显示隐藏  </span><br>  <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-comment">// 颜色</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="from">from</h4><p>与<code>to</code>相反，表示元素从<code>from</code>状态转为<code>元素当前状态</code>。</p><h4 id="timeline">timeline</h4><p><code>timeline</code>可以理解成上述<code>api</code>的一个集合。<br>有时可能需要按照时间顺序，按顺序的执行一系列的动画任务，这将是很有帮助的。</p><p>比如一个矩形元素，首先<code>x</code>移动到<code>100</code>，接着<code>y</code>移动到<code>100</code>，即以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">gsap.timeline()<br>.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">100</span><br>&#125;)<br>.to(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">100</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><a href="https://codepen.io/GreenSock/pens/tags/?selected_tag=timeline">官网示例</a></p><h4 id="其他">其他</h4><p><code>gsap</code>的动画能力非常的强，但是也有限制性，以下为本人观点，不一定正确：<br>其实现动画的<code>css</code>能力与<code>transition</code>有非常大的关系，只有能响应<code>transition</code>的属性才能形成动画，比如<code>width</code>、<code>height</code>、<code>backgroundColor</code>、<code>scale</code>等。<br>但是有些属性是无法响应的，比如<code>display</code>，当设置其从<code>block</code>变为<code>none</code>时，为瞬间变化，无动画效果。</p><h2 id="结束">结束</h2><p><code>gsap</code>的功能非常的强大，以上使用的功能只是皮肤，各位可以自己去琢磨。<br>顺便看下本人使用的效果：<a href="https://food-billboard.github.io/create-chart-docs/">gh-pages</a>或<a href="http://47.97.27.23/api/backend/create-chart-docs/index.html">私人服务器</a>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务端puppeteer的使用</title>
    <link href="/2022/04/21/%E6%9C%8D%E5%8A%A1%E7%AB%AFpuppeteer%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/21/%E6%9C%8D%E5%8A%A1%E7%AB%AFpuppeteer%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="服务端puppeteer的使用">服务端puppeteer的使用</h2><h2 id="介绍">介绍</h2><p>最近突然使用到了<a href="https://github.com/puppeteer/puppeteer">puppeteer</a>，原本在本地都是好好的，但是当部署到服务器上之后就不行了。</p><h2 id="正文">正文</h2><p>虽然具体原因不确定，但是根据百度的做法最后不再报错。</p><h3 id="安装chrome">安装chrome</h3><ol><li>创建文件<br><code>touch /etc/yum.repos.d/google.repo</code></li><li>配置内容</li></ol><p><code>vi /etc/yum.repos.d/google.repo</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[google]<br>name=Google-x86_64<br>baseurl=http://dl.google.com/linux/rpm/stable/x86_64<br>enabled=1<br>gpgcheck=0<br>gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub<br></code></pre></td></tr></table></figure><ol start="3"><li><code>yum update</code></li><li><code>yum install google-chrome-stable</code></li></ol><h4 id="插个题外话">插个题外话</h4><p>在弄这个东西的时候突然碰到了阿里云服务器的<code>centos 8</code>服务器源发生变化，<code>yum</code>无法下载新东西了<br>所以这里也随便记录一下，<a href="https://blog.51cto.com/gagarin/5011005">来源</a></p><h3 id="修改puppeteer调用方式">修改<code>puppeteer</code>调用方式</h3><p><code>puppeteer.launch(&#123; args: ['--no-sandbox', '--disable-dev-shm-usage'], headless: true &#125;)</code></p><h3 id="一些其他问题">一些其他问题</h3><h4 id="安装puppeteer出错">安装<code>puppeteer</code>出错</h4><p>因为安装<code>puppeteer</code>会默认安装<code>chromium</code>浏览器，体积很大容易出错。<br>可以执行下面命令不下载<code>export PUPPETEER_SKIP_DOWNLOAD='true'</code>。<br>关闭这个命令可以使用<code>export PUPPETEER_SKIP_DOWNLOAD=''</code><br>在下载了<code>puppeteer</code>的项目里可以执行<code>node node_modules/puppeteer/install.js</code>来手动下载。</p><h2 id="结束">结束</h2><p>做个简单记录😊<br><a href="https://blog.csdn.net/Zeng__Yi/article/details/105661354">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>backend node puppeteer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器上用到的一些命令</title>
    <link href="/2022/04/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/04/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="服务器上用到的一些命令">服务器上用到的一些命令</h2><h3 id="介绍">介绍</h3><p>记录一些平常用到的一些命令，给自己提个醒。</p><h3 id="正文">正文</h3><h4 id="端口占用">端口占用</h4><p>平常碰到有占用端口的情况，需要杀死该进程。<br><code>sudo lsof -i -P -n</code> // 查看所有占用端口<br><code>kill -9 pid</code>  杀死进程，<code>pid</code>是对应端口的id</p><h3 id="结束">结束</h3><p>结束但是没有完全结束</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deploy node backend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字号与像素的对应值</title>
    <link href="/2022/03/02/%E5%AD%97%E5%8F%B7%E4%B8%8E%E5%83%8F%E7%B4%A0%E7%9A%84%E5%AF%B9%E5%BA%94%E5%80%BC/"/>
    <url>/2022/03/02/%E5%AD%97%E5%8F%B7%E4%B8%8E%E5%83%8F%E7%B4%A0%E7%9A%84%E5%AF%B9%E5%BA%94%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>平常偶尔可能会碰到<code>px</code>和<code>word</code>的字号的相互转换的情况，这里从网上抄了下简单做下记录。</p><h2 id="单位">单位</h2><h3 id="pt-point，磅">pt (point，磅)</h3><p>是一个物理长度单位，指的是 72 分之一英寸。</p><h3 id="px-pixel，像素">px (pixel，像素)</h3><p>是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果 px 要换算成物理长度，需要指定精度 DPI(Dots Per Inch，每英寸像素数)，在扫描打印时一般都有 DPI 可选。Windows 系统默认是 96dpi，Apple 系统默认是 72dpi。</p><h3 id="em-相对长度单位，相对于当前对象内文本的字体尺寸">em(相对长度单位，相对于当前对象内文本的字体尺寸)</h3><p>是一个相对长度单位，最初是指字母 M 的宽度，故名 em。现指的是字符宽度的倍数，用法类似百分比，如：0.8em, 1.2em,2em 等。通常 1em=16px。</p><h2 id="换算">换算</h2><ul><li>字号：是中文字库中特有的一种单位，以中文代号表示特定的磅值 pt，便于记忆、表述。<br>pt 和 px 的换算公式可以根据 pt 的定义得出:<br><code>px = 1/dpi(英寸)</code><br><code>pt = 1/72(英寸)</code><br><code>pt = px * dpi / 72</code><br>以 Windows 下的 <code>96dpi</code> 来计算，<code>1pt = px * 96/72 = px * 4/3</code></li></ul><h2 id="常用到的">常用到的</h2><p>直接<a href="https://www.runoob.com/w3cnote/px-pt-em-convert-table.html">百度</a></p><h2 id="引申">引申</h2><h3 id="dpi-计算">dpi 计算</h3><p>来自百度😺</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDPI</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> deviceXDPI = <span class="hljs-number">0</span> <br>  <span class="hljs-keyword">let</span> deviceYDPI = <span class="hljs-number">0</span>  <br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.screen.deviceXDPI != <span class="hljs-literal">undefined</span>) &#123;<br>    deviceXDPI = <span class="hljs-built_in">window</span>.screen.deviceXDPI;<br>    deviceYDPI = <span class="hljs-built_in">window</span>.screen.deviceYDPI;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> tmpNode = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    tmpNode.style.cssText = <span class="hljs-string">`</span><br><span class="hljs-string">      width:1in;</span><br><span class="hljs-string">      height:1in;</span><br><span class="hljs-string">      position:absolute;</span><br><span class="hljs-string">      left:0px;</span><br><span class="hljs-string">      top:0px;</span><br><span class="hljs-string">      z-index:99;</span><br><span class="hljs-string">      visibility:hidden;</span><br><span class="hljs-string">    `</span><br>    <span class="hljs-built_in">document</span>.body.appendChild(tmpNode);<br>    deviceXDPI = <span class="hljs-built_in">parseInt</span>(tmpNode.offsetWidth);<br>    deviceYDPI = <span class="hljs-built_in">parseInt</span>(tmpNode.offsetHeight);<br>    tmpNode.parentNode.removeChild(tmpNode);<br>  &#125;<br>  <span class="hljs-keyword">return</span> [<br>    deviceXDPI,<br>    deviceYDPI<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平时用到的一些代码片段</title>
    <link href="/2022/02/09/%E5%B9%B3%E6%97%B6%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <url>/2022/02/09/%E5%B9%B3%E6%97%B6%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="平时用到的一些代码片段">平时用到的一些代码片段</h2><h2 id="介绍">介绍</h2><p>新年快乐🐯 🎆<br>这里介绍的是平常可能会用到的一些代码片段，可能对各位有点帮助，文章会持续更新✿✿ヽ(°▽°)ノ✿</p><h2 id="正文">正文</h2><h3 id="Modal">Modal</h3><ul><li><a href="https://ant.design/index-cn">antd</a></li><li>内部控制<code>visible</code></li><li>外部控制是否可关闭</li></ul><h4 id="typescript">typescript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> React, &#123; forwardRef, useImperativeHandle, useRef, useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ModalProps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd/es/modal&#x27;</span><br><br><span class="hljs-keyword">type</span> TModalRef = &#123;<br>  <span class="hljs-attr">open</span>: <span class="hljs-function">(<span class="hljs-params">value?: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">void</span> <br>&#125;<br><br><span class="hljs-keyword">type</span> TModalProps = &#123;<br>  <span class="hljs-comment">// any props </span><br>&#125; &amp; Partial&lt;ModalProps&gt;<br><br><span class="hljs-comment">// modal </span><br><span class="hljs-keyword">const</span> InternalVisibleModal = forwardRef&lt;TModalRef, TModalProps&gt;(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> &#123;  <br>    <span class="hljs-attr">onCancel</span>: propsOnCancel,<br>    <span class="hljs-attr">onOk</span>: propsOnOk<br>  &#125; = props <br><br>  <span class="hljs-keyword">const</span> [ visible, setVisible ] = useState&lt;<span class="hljs-built_in">boolean</span>&gt;(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-keyword">const</span> open = useCallback(<span class="hljs-function">(<span class="hljs-params">value?: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value)<br>    setVisible(<span class="hljs-literal">true</span>)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">const</span> onCancel = useCallback(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = propsOnCancel?.(e)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> result !== <span class="hljs-string">&#x27;boolean&#x27;</span> || result) &#123;<br>      setVisible(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;, [propsOnCancel])<br><br>  <span class="hljs-keyword">const</span> onOk = useCallback(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = propsOnOk?.(e)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> result !== <span class="hljs-string">&#x27;boolean&#x27;</span> || result) &#123;<br>      setVisible(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;, [propsOnOk])<br><br>  useImperativeHandle(ref, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      open<br>    &#125;<br>  &#125;, [open])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Modal</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;visible&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onCancel</span>=<span class="hljs-string">&#123;onCancel&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onOk</span>=<span class="hljs-string">&#123;onOk&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;自定义modal&#x27;</span></span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span></span><br><span class="xml">      hello world </span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br>  )<br><br>&#125;)<br><br><span class="hljs-comment">// parent </span><br><span class="hljs-keyword">const</span> ParentComponent = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> modalRef = useRef&lt;TModalRef&gt;(<span class="hljs-literal">null</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">        modalRef.current?.open()</span><br><span class="xml">      &#125;&#125;&gt;open<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">InternalVisibleModal</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;modalRef&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="javascript">javascript</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; forwardRef, useImperativeHandle, useRef, useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-comment">// modal </span><br><span class="hljs-keyword">const</span> InternalVisibleModal = forwardRef(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> &#123;  <br>    <span class="hljs-attr">onCancel</span>: propsOnCancel,<br>    <span class="hljs-attr">onOk</span>: propsOnOk<br>  &#125; = props <br><br>  <span class="hljs-keyword">const</span> [ visible, setVisible ] = useState(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-keyword">const</span> open = useCallback(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value)<br>    setVisible(<span class="hljs-literal">true</span>)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">const</span> onCancel = useCallback(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = propsOnCancel?.(e)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> result !== <span class="hljs-string">&#x27;boolean&#x27;</span> || result) &#123;<br>      setVisible(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;, [propsOnCancel])<br><br>  <span class="hljs-keyword">const</span> onOk = useCallback(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = propsOnOk?.(e)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> result !== <span class="hljs-string">&#x27;boolean&#x27;</span> || result) &#123;<br>      setVisible(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;, [propsOnOk])<br><br>  useImperativeHandle(ref, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      open<br>    &#125;<br>  &#125;, [open])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Modal</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;visible&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onCancel</span>=<span class="hljs-string">&#123;onCancel&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onOk</span>=<span class="hljs-string">&#123;onOk&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;自定义modal&#x27;</span></span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span></span><br><span class="xml">      hello world </span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br>  )<br><br>&#125;)<br><br><span class="hljs-comment">// parent </span><br><span class="hljs-keyword">const</span> ParentComponent = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">const</span> modalRef = useRef(<span class="hljs-literal">null</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">        modalRef.current?.open()</span><br><span class="xml">      &#125;&#125;&gt;open<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">InternalVisibleModal</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;modalRef&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="html2canvas">html2canvas</h3><ul><li>配合<a href="https://github.com/niklasvh/html2canvas">html2canvas</a></li><li><code>html</code>转<code>图片</code></li></ul><h4 id="typescript-2">typescript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> html2canvas, &#123; Options &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;html2canvas&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">captureCover</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  query: <span class="hljs-built_in">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  html2canvasOptions: Partial&lt;Options&gt; = &#123;&#125;,</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> element: HTMLElement | <span class="hljs-literal">null</span> = <span class="hljs-built_in">document</span>.querySelector(query);<br><br>  <span class="hljs-keyword">if</span> (!element) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject();<br><br>  <span class="hljs-keyword">const</span> &#123; width, height &#125; = element.getBoundingClientRect() || &#123;&#125;;<br><br>  <span class="hljs-keyword">const</span> options: Partial&lt;Options&gt; = &#123;<br>    <span class="hljs-attr">useCORS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">allowTaint</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">logging</span>: <span class="hljs-literal">true</span>,<br>    width,<br>    height,<br>    <span class="hljs-attr">scrollY</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">scrollX</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0)&#x27;</span>,<br>    ...html2canvasOptions,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>&lt;Blob&gt;(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    html2canvas(element <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>, options).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>      context.toBlob(<br>        <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (data) &#123;<br>            resolve(data);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            reject();<br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&#x27;image/png&#x27;</span>,<br>        <span class="hljs-number">0.9</span>,<br>      );<br>    &#125;);<br>  &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="javascript-2">javascript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> html2canvas <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;html2canvas&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">captureCover</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  query,</span></span><br><span class="hljs-params"><span class="hljs-function">  html2canvasOptions</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> element = <span class="hljs-built_in">document</span>.querySelector(query);<br><br>  <span class="hljs-keyword">if</span> (!element) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject();<br><br>  <span class="hljs-keyword">const</span> &#123; width, height &#125; = element.getBoundingClientRect() || &#123;&#125;;<br><br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">useCORS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">allowTaint</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">logging</span>: <span class="hljs-literal">true</span>,<br>    width,<br>    height,<br>    <span class="hljs-attr">scrollY</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">scrollX</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0)&#x27;</span>,<br>    ...html2canvasOptions,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    html2canvas(element, options).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>      context.toBlob(<br>        <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (data) &#123;<br>            resolve(data);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            reject();<br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&#x27;image/png&#x27;</span>,<br>        <span class="hljs-number">0.9</span>,<br>      );<br>    &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="jspdf">jspdf</h3><ul><li>配合<a href="https://github.com/niklasvh/html2canvas">html2canvas</a></li><li><code>html</code>转<code>pdf</code></li></ul><h4 id="typescript-3">typescript</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> jsPDF <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jspdf&#x27;</span><br><span class="hljs-keyword">import</span> html2Canvas, &#123; Options &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;html2canvas&#x27;</span><br><br><span class="hljs-keyword">const</span> A4_RATIO = <span class="hljs-number">630</span> / <span class="hljs-number">891</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> html2Pdf = <span class="hljs-keyword">async</span> (query: <span class="hljs-built_in">string</span>, <span class="hljs-attr">canvasOpts</span>: Partial&lt;Options&gt;=&#123;&#125;) =&gt; &#123;<br><br>  <span class="hljs-keyword">const</span> element: HTMLElement | <span class="hljs-literal">null</span> = <span class="hljs-built_in">document</span>.querySelector(query)<br><br>  <span class="hljs-keyword">if</span>(!element) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject()<br><br>  <span class="hljs-keyword">const</span> originWidth = element.offsetWidth<br>  <span class="hljs-keyword">const</span> originHeight = element.offsetHeight<br><br>  <span class="hljs-keyword">const</span> scale = <span class="hljs-number">595.28</span> / originWidth<br>  <span class="hljs-keyword">const</span> scaleCanvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>  scaleCanvas.width = <span class="hljs-number">595.28</span><br>  scaleCanvas.height = originHeight * scale <br><br>  <span class="hljs-keyword">var</span> opts: Partial&lt;Options&gt; = &#123;<br>    <span class="hljs-attr">useCORS</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">allowTaint</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//允许跨域图片</span><br>    <span class="hljs-attr">logging</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">width</span>: originWidth, <br>    <span class="hljs-attr">height</span>: originHeight,<br>    <span class="hljs-attr">scrollY</span>: <span class="hljs-number">0</span>, <br>    <span class="hljs-attr">scrollX</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">canvas</span>: scaleCanvas,<br>    scale,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;rgba(0, 0, 0, 0)&quot;</span>,<br>    <span class="hljs-attr">onclone</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">document</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> deleteStyleKeys = [<span class="hljs-string">&#x27;transform&#x27;</span>, <span class="hljs-string">&#x27;transition&#x27;</span>, <span class="hljs-string">&#x27;boxShadow&#x27;</span>]<br>      <span class="hljs-keyword">const</span> element: HTMLElement | <span class="hljs-literal">null</span> = <span class="hljs-built_in">document</span>.querySelector(query)<br>      <span class="hljs-keyword">if</span>(!element) <span class="hljs-keyword">return</span> <br>      deleteStyleKeys.forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> ((element.style <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>)[key] = <span class="hljs-string">&#x27;&#x27;</span>))<br>    &#125;,<br>    ...canvasOpts<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    html2Canvas(element, opts).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>  <br>      <span class="hljs-keyword">let</span> contentWidth = context.width <br>      <span class="hljs-keyword">let</span> contentHeight = context.height   <br>      <span class="hljs-keyword">let</span> pageHeight = contentWidth / A4_RATIO  <br>      <span class="hljs-keyword">let</span> leftHeight = contentHeight <br>      <span class="hljs-keyword">let</span> position = <span class="hljs-number">0</span><br>  <br>      <span class="hljs-keyword">let</span> pageData = context.toDataURL(<span class="hljs-string">&#x27;image/png&#x27;</span>, <span class="hljs-number">0.9</span>)<br>      <br>      <span class="hljs-keyword">let</span> PDF = <span class="hljs-keyword">new</span> jsPDF(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;pt&#x27;</span>, <span class="hljs-string">&#x27;a4&#x27;</span>)<br>      <span class="hljs-keyword">if</span> (leftHeight &lt;= pageHeight) &#123;<br>        PDF.addImage(pageData, <span class="hljs-string">&#x27;PNG&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, contentWidth, contentHeight)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span> (leftHeight &gt;= <span class="hljs-number">20</span>) &#123;<br>          PDF.addImage(pageData, <span class="hljs-string">&#x27;PNG&#x27;</span>, <span class="hljs-number">0</span>, position, contentWidth, contentHeight)<br>          leftHeight -= pageHeight<br>          position -= pageHeight<br>          <span class="hljs-keyword">if</span> (leftHeight &gt;= <span class="hljs-number">20</span>) &#123;<br>            PDF.addPage()<br>          &#125;<br>        &#125;<br>      &#125;<br><br>      resolve(PDF.output(<span class="hljs-string">&#x27;blob&#x27;</span>))<br>      <br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SuperPartial">SuperPartial</h3><ul><li><code>typescript</code></li><li><code>Partial</code> 深层次版本</li></ul><h4 id="typescript-4">typescript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> SuperPartial&lt;T&gt; = &#123;<br>  [K <span class="hljs-keyword">in</span> keyof T]?: SuperPartial&lt;T[K]&gt;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="withTry">withTry</h3><ul><li>工具方法</li><li>异步错误捕获</li></ul><h4 id="typescript-5">typescript</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withTry</span>&lt;<span class="hljs-title">T</span>=<span class="hljs-title">any</span>&gt; (<span class="hljs-params">func: <span class="hljs-built_in">Function</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args: <span class="hljs-built_in">any</span>[]</span>): <span class="hljs-title">Promise</span>&lt;[<span class="hljs-title">any</span>, <span class="hljs-title">T</span> | <span class="hljs-title">null</span>]&gt; </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> func(...args)<br>      <span class="hljs-keyword">return</span> [<span class="hljs-literal">null</span>, data]<br>    &#125;<span class="hljs-keyword">catch</span>(err) &#123;<br>      <span class="hljs-keyword">return</span> [err, <span class="hljs-literal">null</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="javascript-3">javascript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withTry</span> (<span class="hljs-params">func</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> func(...args)<br>      <span class="hljs-keyword">return</span> [<span class="hljs-literal">null</span>, data]<br>    &#125;<span class="hljs-keyword">catch</span>(err) &#123;<br>      <span class="hljs-keyword">return</span> [err, <span class="hljs-literal">null</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sleep">sleep</h3><ul><li>延迟方法</li></ul><h4 id="javascript-4">javascript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">time=<span class="hljs-number">1000</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最近几天">最近几天</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRecentDay</span>(<span class="hljs-params">day, customDate</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = customDate ? <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(customDate) : <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">const</span> today = date.getTime()<br>  <span class="hljs-keyword">const</span> oneDayMill = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(day).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">_, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(today - (day - index - <span class="hljs-number">1</span>) * oneDayMill)<br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>最近2天：getRecentDay(2)</code><br><code>2022-12-22的最近2天：getRecentDay(2, '2022-12-22')</code></p><h3 id="本周">本周</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getThisWeek</span>(<span class="hljs-params">customDate</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = customDate ? <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(customDate) : <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">const</span> time = date.getTime()<br>  <span class="hljs-keyword">const</span> oneDayMill = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span><br>  <span class="hljs-keyword">const</span> day = date.getDay() || <span class="hljs-number">7</span><br>  <span class="hljs-keyword">const</span> dayPrev = day <br>  <span class="hljs-keyword">const</span> dayNext = <span class="hljs-number">7</span> - day <br>  <span class="hljs-keyword">return</span> [<br>    ...new <span class="hljs-built_in">Array</span>(dayPrev).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">_, index</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time - oneDayMill * (dayPrev - index - <span class="hljs-number">1</span>))<br>    &#125;),<br>    ...new <span class="hljs-built_in">Array</span>(dayNext).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">_, index</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time + oneDayMill * (index + <span class="hljs-number">1</span>))<br>    &#125;),<br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>本周：getThisWeek()</code><br><code>2022-12-22当周：getThisWeek('2022-12-22')</code></p><h3 id="本月">本月</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isLeapYear</span>(<span class="hljs-params">year</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (year % <span class="hljs-number">4</span> === <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> !== <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> === <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMonthDay</span>(<span class="hljs-params">date</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> year = date.getFullYear()<br>  <span class="hljs-keyword">const</span> month = date.getMonth() + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">const</span> day30Month = [<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>]<br>  <span class="hljs-keyword">if</span>(month == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">if</span>(isLeapYear(year)) <span class="hljs-keyword">return</span> <span class="hljs-number">29</span> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">28</span> <br>  &#125;<br>  <span class="hljs-keyword">return</span> day30Month.includes(month) ? <span class="hljs-number">30</span> : <span class="hljs-number">31</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getThisMonth</span>(<span class="hljs-params">customDate</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = customDate ? <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(customDate) : <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">const</span> time = date.getTime()<br>  <span class="hljs-keyword">const</span> oneDayMill = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span><br>  <span class="hljs-keyword">const</span> day = date.getDate()<br>  <span class="hljs-keyword">const</span> monthDay = getMonthDay(date)<br>  <span class="hljs-keyword">const</span> dayPrev = day <br>  <span class="hljs-keyword">const</span> dayNext = monthDay - day <br>  <span class="hljs-keyword">return</span> [<br>    ...new <span class="hljs-built_in">Array</span>(dayPrev).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">_, index</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time - oneDayMill * (dayPrev - index - <span class="hljs-number">1</span>))<br>    &#125;),<br>    ...new <span class="hljs-built_in">Array</span>(dayNext).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">_, index</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time + oneDayMill * (index + <span class="hljs-number">1</span>))<br>    &#125;),<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p><code>本月：getThisMonth()</code><br><code>2022-11-22当月：getThisMonth('2022-11-22')</code></p><h3 id="本年">本年</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isLeapYear</span>(<span class="hljs-params">year</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (year % <span class="hljs-number">4</span> === <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> !== <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> === <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getThisYear</span>(<span class="hljs-params">customDate</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> date = customDate ? <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(customDate) : <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">const</span> oneDayMill = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span><br>  <span class="hljs-keyword">const</span> year = date.getFullYear()<br>  <span class="hljs-keyword">const</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;year&#125;</span>`</span>).getTime()<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(isLeapYear(year) ? <span class="hljs-number">366</span> : <span class="hljs-number">365</span>).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">_, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(startDate + oneDayMill * index)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="h5无限滚动（mobile2）">h5无限滚动（mobile2）</h3><h4 id="javascript-5">javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<br>  ListView,<br>  Flex,<br>  Icon,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd-mobile&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Component <span class="hljs-keyword">as</span> RefastComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;refast&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RefastComponent</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props, logic)<br>    <span class="hljs-keyword">const</span> dataSource = <span class="hljs-keyword">new</span> ListView.DataSource(&#123;<br>      <span class="hljs-attr">rowHasChanged</span>: <span class="hljs-function">(<span class="hljs-params">row1, row2</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> row1 == row2<br>      &#125;<br>    &#125;)<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      <span class="hljs-attr">dataSource</span>: dataSource.cloneWithRows(&#123;&#125;),<br>      <span class="hljs-attr">originValue</span>: [],<br>      <span class="hljs-attr">fetchLoading</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">page</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">total</span>: <span class="hljs-number">0</span>,<br>    &#125;<br>  &#125;<br><br>  row = <span class="hljs-function">(<span class="hljs-params">rowData, sectionID, rowID</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; originValue &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> &#123;  &#125; = rowData<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br><br>  componentDidMount = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-built_in">this</span>.add_list_Listener()<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.fetchData()<br>  &#125;<br><br>  componentWillUnmount () &#123;<br>    <span class="hljs-built_in">this</span>.remove_list_Listener()<br>  &#125;<br><br>  <span class="hljs-comment">//增加监听</span><br>  add_list_Listener = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lv &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span>.lv.getInnerViewNode == <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-built_in">this</span>.lv.getInnerViewNode().addEventListener(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-built_in">this</span>.ts = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.tsPageY = e.touches[<span class="hljs-number">0</span>].pageY;<br>      &#125;);<br>      <span class="hljs-keyword">const</span> scrollNode = <span class="hljs-built_in">document</span>.scrollingElement ? <span class="hljs-built_in">document</span>.scrollingElement : <span class="hljs-built_in">document</span>.body;<br>      <span class="hljs-built_in">this</span>.lv.getInnerViewNode().addEventListener(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-built_in">this</span>.tm = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.tmPageY = e.touches[<span class="hljs-number">0</span>].pageY;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.tmPageY &gt; <span class="hljs-built_in">this</span>.tsPageY &amp;&amp; <span class="hljs-built_in">this</span>.scrollerTop &lt;= <span class="hljs-number">0</span> &amp;&amp; scrollNode.scrollTop &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-built_in">this</span>.domScroller.options.preventDefaultOnTouchMove = <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-built_in">this</span>.domScroller.options.preventDefaultOnTouchMove = <span class="hljs-literal">undefined</span>;<br>        &#125;<br>      &#125;)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 移除列表的监听</span><br>  remove_list_Listener = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lv &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span>.lv.getInnerViewNode == <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-built_in">this</span>.lv.getInnerViewNode().removeEventListener(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-built_in">this</span>.ts);<br>      <span class="hljs-built_in">this</span>.lv.getInnerViewNode().removeEventListener(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-built_in">this</span>.tm);<br>    &#125;<br>  &#125;<br><br>  fetchData = <span class="hljs-keyword">async</span> (init = <span class="hljs-literal">false</span>) =&gt; &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      <span class="hljs-attr">fetchLoading</span>: <span class="hljs-literal">true</span><br>    &#125;)<br>    <span class="hljs-keyword">const</span> &#123; originValue, dataSource, page, pageSize, name, cameraId, startTime, stopTime, status, algoModelType &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-built_in">this</span>.dispatch(<span class="hljs-string">&quot;queryWarnEvent&quot;</span>, &#123;<br>      algoModel,<br>      page,<br>      pageSize,<br>      algoModelType,<br>      status,<br>      name,<br>      cameraId,<br>      startTime,<br>      stopTime,<br>    &#125;, <span class="hljs-function">(<span class="hljs-params">content</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> data = content?.data?.list<br>      <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">todoCount</span>: content?.data.total &#125;)<br>      &#125;<br>      <span class="hljs-keyword">const</span> newValue = init ? [...data] : [...originValue, ...data]<br>      <span class="hljs-keyword">let</span> newDataSource = dataSource<br>      <span class="hljs-keyword">if</span> (init) &#123;<br>        newDataSource = <span class="hljs-keyword">new</span> ListView.DataSource(&#123;<br>          <span class="hljs-attr">rowHasChanged</span>: <span class="hljs-function">(<span class="hljs-params">row1, row2</span>) =&gt;</span> row1 == row2,<br>        &#125;)<br>      &#125;<br>      newDataSource = newDataSource.cloneWithRows(newValue)<br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        <span class="hljs-attr">originValue</span>: newValue,<br>        <span class="hljs-attr">dataSource</span>: newDataSource,<br>        <span class="hljs-attr">fetchLoading</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">total</span>: content?.data.total<br>      &#125;)<br>    &#125;)<br>  &#125;<br><br>  onEndReached = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; fetchLoading, page, originValue, total &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">if</span> (fetchLoading || originValue.length &gt;= total) &#123;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">page</span>: page + <span class="hljs-number">1</span> &#125;, <span class="hljs-built_in">this</span>.fetchData)<br>  &#125;<br><br>  render () &#123;<br>    <span class="hljs-keyword">const</span> &#123; dataSource, fetchLoading &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ListView</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;warning-list&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;el</span> =&gt;</span> this.lv = el&#125;</span><br><span class="xml">        dataSource=&#123;dataSource&#125;</span><br><span class="xml">        renderFooter=&#123;() =&gt; &#123;</span><br><span class="xml">          return (</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">padding:</span> <span class="hljs-attr">30</span>, <span class="hljs-attr">textAlign:</span> &#x27;<span class="hljs-attr">center</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="xml">              &#123;fetchLoading ? <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;loading&quot;</span> /&gt;</span> : &#x27;没有更多了&#x27;&#125;</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          )</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">        renderRow=&#123;this.row&#125;</span><br><span class="xml">        style=&#123;&#123;</span><br><span class="xml">          height: &#x27;100vh&#x27;,</span><br><span class="xml">          overflow: &#x27;auto&#x27;,</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">        pageSize=&#123;10&#125;</span><br><span class="xml">        scrollRenderAheadDistance=&#123;500&#125;</span><br><span class="xml">        onEndReached=&#123;this.onEndReached&#125;</span><br><span class="xml">        onEndReachedThreshold=&#123;10&#125;</span><br><span class="xml">      /&gt;</span><br>    )<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="h5表单容器（mobile2）">h5表单容器（mobile2）</h3><h4 id="javascript-6">javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<br>Picker <span class="hljs-keyword">as</span> AntPicker,<br>Icon,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd-mobile&#x27;</span><br><br><span class="hljs-keyword">const</span> CustomChildren = <span class="hljs-function">(<span class="hljs-params">&#123;extra, onClick, children&#125;</span>) =&gt;</span> (<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span></span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">backgroundColor:</span> &#x27;#<span class="hljs-attr">F3F4F7</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">lineHeight:</span> &#x27;<span class="hljs-attr">3.2rem</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">fontSize:</span> &#x27;<span class="hljs-attr">1.3rem</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">textAlign:</span> &#x27;<span class="hljs-attr">left</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">overflow:</span> &#x27;<span class="hljs-attr">hidden</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">0</span> <span class="hljs-attr">.4rem</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">borderRadius:</span> <span class="hljs-attr">6</span></span></span><br><span class="hljs-tag"><span class="xml">&#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">&gt;</span></span><br><span class="xml">&#123;children&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span> &#x27;<span class="hljs-attr">black</span>&#x27;&#125;&#125;&gt;</span>&#123;extra&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br><br><br><span class="hljs-keyword">const</span> Picker = <span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">AntPicker</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">cols</span>=<span class="hljs-string">&#123;1&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">CustomChildren</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;float:</span> &#x27;<span class="hljs-attr">right</span>&#x27;, <span class="hljs-attr">display:</span> &#x27;<span class="hljs-attr">flex</span>&#x27;, <span class="hljs-attr">height:</span> &#x27;<span class="hljs-attr">3.2rem</span>&#x27;, <span class="hljs-attr">alignItems:</span> &#x27;<span class="hljs-attr">center</span>&#x27;, <span class="hljs-attr">color:</span> &quot;#<span class="hljs-attr">D8D8D8</span>&quot;&#125;&#125;&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;down&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">CustomChildren</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">AntPicker</span>&gt;</span></span><br>  )<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useDeepEffect">useDeepEffect</h3><h4 id="typescript-6">typescript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; useEffect, useRef, EffectCallback, DependencyList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; isEqual &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useDeepEffect</span>(<span class="hljs-params">fn: EffectCallback, deps: DependencyList</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> isFirst = useRef(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">const</span> prevDeps = useRef(deps);<br> <br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> isSame = prevDeps.current.every(<span class="hljs-function">(<span class="hljs-params">obj, index</span>) =&gt;</span><br>      isEqual(obj, deps[index]),<br>    );<br> <br>    <span class="hljs-keyword">if</span> (isFirst.current || !isSame) &#123;<br>      fn();<br>    &#125;<br> <br>    isFirst.current = <span class="hljs-literal">false</span>;<br>    prevDeps.current = deps;<br>  &#125;, deps);<br>&#125;<br> <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useDeepEffect;<br></code></pre></td></tr></table></figure><h3 id="useStateChange">useStateChange</h3><h4 id="typescript-7">typescript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; useState, useEffect, useCallback, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">type</span> StateChangeReturnType&lt;T&gt; = [<br>  T,<br>  <span class="hljs-function">(<span class="hljs-params">value: T | ((prev: T) =&gt; T), callback?: () =&gt; <span class="hljs-built_in">void</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>,<br>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useStateChange</span>&lt;<span class="hljs-title">T</span> = <span class="hljs-title">any</span>&gt;(<span class="hljs-params">initialValue: T</span>): <span class="hljs-title">StateChangeReturnType</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = useState&lt;T&gt;(initialValue);<br>  <span class="hljs-keyword">const</span> callbackRef = useRef&lt;<span class="hljs-built_in">any</span>&gt;();<br><br>  <span class="hljs-keyword">const</span> realSetValue = useCallback(<br>    <span class="hljs-function">(<span class="hljs-params">value: T | ((prev: T) =&gt; T), callback?: () =&gt; <span class="hljs-built_in">void</span></span>) =&gt;</span> &#123;<br>      callbackRef.current = callback;<br>      setValue(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> result =<br>          <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;function&#x27;</span> ? (value <span class="hljs-keyword">as</span> (prev: T) =&gt; T)(prev) : value;<br>        <span class="hljs-keyword">return</span> result;<br>      &#125;);<br>    &#125;,<br>    [],<br>  );<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    callbackRef.current?.();<br>  &#125;, [value]);<br><br>  <span class="hljs-keyword">return</span> [value, realSetValue];<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useStateChange;<br><br></code></pre></td></tr></table></figure><h2 id="结束">结束</h2><p>到这里结束，希望对各位有帮助。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fragment code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件分片上传</title>
    <link href="/2021/11/24/%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <url>/2021/11/24/%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="前端文件分片上传流程">前端文件分片上传流程</h2><h2 id="介绍">介绍</h2><p>作为一个前端，平常工作中肯定离不开文件上传的业务需求，可能大部分情况都是对图片，附件等一些小文件进行上传，但是当需要上传大文件的时候，使用普通上传方式时，可能就会看到接口返回<code>413</code>，这里就需要提到本文所要说的文件分片上传。</p><h2 id="正文">正文</h2><h3 id="二进制数据类型">二进制数据类型</h3><p>前端对二进制数据的存储格式有很多种。</p><ul><li><code>input</code>输入框上传文件时用到的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File">File</a>类型。</li><li>视频网站上能看到的<code>blob</code>链接资源</li><li><code>es6</code>中出现的<code>ArrayBuffer</code>，并且是文件分片上传，断点续传的基础。</li><li>还有一个就是<code>base64</code></li></ul><h3 id="不同类型的相互转换">不同类型的相互转换</h3><p>很多数据类型的转换都需要依靠于<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">FileReader</a></p><ol><li><code>ArrayBuffer to Blob</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> Blob([<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>)])  <br><span class="hljs-keyword">const</span> fileReader = <span class="hljs-keyword">new</span> FileReader()<br><br>fileReader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(fileReader.result)<br>&#125;<br><br>fileReader.readAsArrayBuffer(blob)<br><br></code></pre></td></tr></table></figure><ol start="2"><li><code>Blob to Base64</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> Blob([<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>)])  <br><span class="hljs-keyword">const</span> fileReader = <span class="hljs-keyword">new</span> FileReader()<br><br>fileReader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(fileReader.result)<br>&#125;<br><br>fileReader.readAsDataURL(blob)<br></code></pre></td></tr></table></figure><p>以上是两个简单的数据类型转换的例子</p><h3 id="需要使用到的npm-package">需要使用到的npm package</h3><ul><li><code>spark-md5 </code><br><a href="https://www.npmjs.com/package/spark-md5">spark-md5</a>可以将对应的数据进行<code>md5</code>加密，这样在下一次对同一个文件进行上传时，可以直接跳过整个上传流传，实现秒传的效果。</li></ul><h3 id="具体流程">具体流程</h3><ul><li><code>input</code>接收文件<code>template.mp4</code></li><li>获取文件的基础信息<ul><li>文件的<code>mime</code>，当前的类型是<code>video/mp4</code></li><li>文件的大小<code>file.size</code>，假设本次文件的大小为<code>1G</code></li><li>设置本次上传分片的大小为<code>5M</code></li><li>计算本次上传的分片数量为<code>1G / 5M = 205</code>，所以本次需要上传205次</li></ul></li><li>对文件进行分片<ul><li>使用<code>spark-md5</code>进行分片</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-built_in">ArrayBuffer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;spark-md5&#x27;</span><br><br><span class="hljs-keyword">const</span> SparkMd5 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>()<br><br><span class="hljs-comment">// 保存分片用于在后面上传时用  </span><br><span class="hljs-keyword">const</span> cacheChunks = []<br><span class="hljs-comment">// 当前分片的索引</span><br><span class="hljs-keyword">const</span> index = <span class="hljs-number">0</span><br><span class="hljs-comment">// 分片的大小</span><br><span class="hljs-keyword">const</span> chunkSize = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span> <br><span class="hljs-comment">// file 只需要简单调用 file.slice 就可以</span><br><span class="hljs-keyword">const</span> currentChunk = file.slice(index * chunkSize, (index + <span class="hljs-number">1</span>) * chunkSize)  <br><br>cacheChunks.push(currentChunk)<br><br><span class="hljs-comment">// 添加分片  </span><br>SparkMd5.append(currentChunk)<br><br><span class="hljs-comment">// 所有分片添加完成时  </span><br><span class="hljs-keyword">const</span> md5 = SparkMd5.end()<br><br><span class="hljs-comment">// 完成解析后销毁对应实例  </span><br>SparkMd5.destroy()<br><br></code></pre></td></tr></table></figure><ul><li><p>文件存在性检查<br>将文件的一些信息传递给后台，服务端检查文件是否存在。<br>如果存在，则跳过之后的上传过程。<br>如果不存在，则继续后面的上传流程。</p></li><li><p>文件分片上传<br>按照索引顺序对文件分片进行上传</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData()<br><span class="hljs-comment">// 需要上传的文件分片</span><br>formData.append(<span class="hljs-string">&quot;file&quot;</span>, chunk)<br><span class="hljs-comment">// 当前分片的索引  </span><br>formData.append(<span class="hljs-string">&quot;index&quot;</span>, index)<br><span class="hljs-comment">// 文件md5 </span><br>formData.append(<span class="hljs-string">&quot;md5&quot;</span>, md5)<br><br>axios.post(<span class="hljs-string">&quot;/path/to/upload&quot;</span>, formData)<br><br></code></pre></td></tr></table></figure><p>后端通过返回下一分片的索引或者是下一分片的范围来指定前端接下来需要上传的分片<br>在上一步骤中也可以返回和这一步骤相同的内容。</p><ul><li>文件上传完成通知<br>这一步骤为可选步骤，通过前端通知后端完成了所有文件分片的上传。<br>一般不需要前端主动向后端通知。</li></ul><h3 id="后端实现">后端实现</h3><p>这里简单使用<code>node</code>讲解一下后端接收文件的基本逻辑<br>使用<code>koa</code>做基础服务<br>使用<code>koa-body</code>接收前端的文件内容<br>使用<code>koa-router</code>做对应的restful设计</p><ol><li>文件存在性检查</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">let</span> fileCache = &#123;&#125;<br><br>router<br>.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; md5, chunkSize, filename, size, length &#125; = ctx.query <br>  <span class="hljs-keyword">if</span>(fileCache[md5] &amp;&amp; fileCache[md5].chunks.length === length) &#123;<br>    ctx.body = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">res</span>: &#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-literal">true</span> <br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fileCache[md5]) &#123;<br>    <span class="hljs-keyword">const</span> index = findLastUnUploadChunkIndex()<br>    ctx.body = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">res</span>: &#123;<br>        <span class="hljs-attr">data</span>: index<br>      &#125;<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    fileCache[md5] = &#123;<br>      <span class="hljs-attr">chunks</span>: [],<br>      size,<br>      length,<br>      chunkSize,<br>      md5<br>    &#125;<br>    ctx.body = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">res</span>: &#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-number">0</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>文件上传</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">router.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> files = ctx.request.files.file <br>  <span class="hljs-keyword">const</span> &#123; md5, index &#125; = ctx.request.body <br>  fileCache[md5].chunks.push(index) <br>  <span class="hljs-comment">// 使用fs保存对应的分片至指定文件夹</span><br>  <span class="hljs-comment">// 分片名称可以使用md5-index的形式</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>文件合并</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>)<br><span class="hljs-keyword">const</span> fsPromise = fs.promises  <br><br><span class="hljs-comment">// 合并分片</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mergeChunk</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> realFilePath = <span class="hljs-string">&quot;/path/to/real/file&quot;</span><br><br>  <span class="hljs-comment">// 获取对应的文件分片文件名称  </span><br>  <span class="hljs-keyword">const</span> chunkList = <span class="hljs-keyword">await</span> fsPromise.readdir(<span class="hljs-string">&quot;/path/to/chunk&quot;</span>)  <br><br>  <span class="hljs-comment">// 对文件进行排序  </span><br>  chunkList.sort(<span class="hljs-function">(<span class="hljs-params">suffixA, suffixB</span>) =&gt;</span> <span class="hljs-built_in">Number</span>(suffixA.split(<span class="hljs-string">&#x27;-&#x27;</span>)[<span class="hljs-number">1</span>]) - <span class="hljs-built_in">Number</span>(suffixB.split(<span class="hljs-string">&#x27;-&#x27;</span>)[<span class="hljs-number">1</span>]))<br>  <br>  <span class="hljs-comment">//文件合并</span><br>  <span class="hljs-keyword">const</span> mergeTasks = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; chunkList.length; i ++) &#123;<br>      <span class="hljs-keyword">const</span> chunk = chunkList[i]<br>      <span class="hljs-keyword">await</span> fs.readFile(chunk)<br>      .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> fs.appendFile(realFilePath, data))<br>      .then(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> fs.unlink(chunk))<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> fs.writeFile(realFilePath, <span class="hljs-string">&#x27;&#x27;</span>)<br>  .then(mergeTasks)<br>  .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;&#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="结束">结束</h2><p>以上就是整个文件分片上传的流程，当中的具体细节可以查看本人完成的对应的<a href="https://food-billboard.github.io/chunk-file-load/#/">上传工具类库</a>，还有基于该类库封装的<code>React</code><a href="https://food-billboard.github.io/chunk-file-load-component/#/">上传组件</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>文件上传</category>
      
    </categories>
    
    
    <tags>
      
      <tag>upload file chunk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitmoji 优雅提交代码</title>
    <link href="/2021/11/19/gitmoji/"/>
    <url>/2021/11/19/gitmoji/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>相信平时应该大家都用过<code>github</code>当做代码仓库，作为一个优质的仓库，对于代码的提交也有对应的规范，为了让提交看得更浅显易懂，可以使用不同的图标来表示不一样的意思，这里就介绍一个提交工具<a href="https://gitmoji.dev/">gitmoji</a>。</p><h2 id="正文">正文</h2><p>关于这个库的使用相信官网已经描述的非常详细了，这里就简单做下翻译来供自己查看。</p><p>常用的几个</p><table><thead><tr><th>图标</th><th>代码</th><th>描述</th></tr></thead><tbody><tr><td>🎨</td><td>:art:</td><td>改进代码的结构/格式。</td></tr><tr><td>🔥</td><td>:fire:</td><td>删除代码或文件。</td></tr><tr><td>🐛</td><td>:bug:</td><td>修复一个错误。</td></tr><tr><td>✨</td><td>:sparkles:</td><td>介绍新功能。</td></tr><tr><td>✅</td><td>:white_check_mark:</td><td>添加、更新或通过测试。</td></tr><tr><td>🚀</td><td>:rocket:</td><td>代码部署。</td></tr><tr><td>💄</td><td>:lipstick:</td><td>添加或更新 UI 和样式文件。</td></tr><tr><td>🔒️</td><td>:lock:</td><td>修复安全问题。</td></tr><tr><td>🔖</td><td>:bookmark:</td><td>发布/版本标签。</td></tr><tr><td>🔧</td><td>:wrench:</td><td>添加或更新配置文件。</td></tr><tr><td>⏪️</td><td>:rewind:</td><td>还原更改。</td></tr><tr><td>🤡</td><td>:clown_face:</td><td>mock 代码</td></tr><tr><td>🙈</td><td>:see_no_evil:</td><td>添加或更新 .gitignore 文件。</td></tr><tr><td>🗑️</td><td>:wastebasket:</td><td>弃用需要清理的代码。</td></tr><tr><td>⚰️</td><td>:coffin:</td><td>删除死代码。</td></tr><tr><td>🧪</td><td>:test_tube:</td><td>添加失败的测试。</td></tr><tr><td>👔</td><td>:necktie:</td><td>添加或更新业务逻辑</td></tr></tbody></table><p>索引</p><table><thead><tr><th>图标</th><th>代码</th><th>描述</th></tr></thead><tbody><tr><td>🎨</td><td>:art:</td><td>改进代码的结构/格式。</td></tr><tr><td>⚡️</td><td>:zap:</td><td>提高性能。</td></tr><tr><td>🔥</td><td>:fire:</td><td>删除代码或文件。</td></tr><tr><td>🐛</td><td>:bug:</td><td>修复一个错误。</td></tr><tr><td>🚑️</td><td>:ambulance:</td><td>关键修补程序。</td></tr><tr><td>✨</td><td>:sparkles:</td><td>介绍新功能。</td></tr><tr><td>📝</td><td>:memo:</td><td>添加或更新文档。</td></tr><tr><td>🚀</td><td>:rocket:</td><td>代码部署。</td></tr><tr><td>💄</td><td>:lipstick:</td><td>添加或更新 UI 和样式文件。</td></tr><tr><td>🎉</td><td>:tada:</td><td>项目创建</td></tr><tr><td>✅</td><td>:white_check_mark:</td><td>添加、更新或通过测试。</td></tr><tr><td>🔒️</td><td>:lock:</td><td>修复安全问题。</td></tr><tr><td>🔖</td><td>:bookmark:</td><td>发布/版本标签。</td></tr><tr><td>🚨</td><td>:rotating_light:</td><td>修复编译器/linter 警告。</td></tr><tr><td>🚧</td><td>:construction:</td><td>工作正在进行中。</td></tr><tr><td>💚</td><td>:green_heart:</td><td>修复 CI 构建。</td></tr><tr><td>⬇️</td><td>:arrow_down:</td><td>降级依赖项。</td></tr><tr><td>⬆️</td><td>:arrow_up:</td><td>升级依赖项。</td></tr><tr><td>📌</td><td>:pushpin:</td><td>将依赖项固定到特定版本。</td></tr><tr><td>👷</td><td>:construction_worker:</td><td>添加或更新 CI 构建系统。</td></tr><tr><td>📈</td><td>:chart_with_upwards_trend:</td><td>添加或更新分析或跟踪代码。</td></tr><tr><td>♻️</td><td>:recycle:</td><td>重构代码。</td></tr><tr><td>➕</td><td>:heavy_plus_sign:</td><td>添加依赖项。</td></tr><tr><td>➖</td><td>:heavy_minus_sign:</td><td>删除依赖项。</td></tr><tr><td>🔧</td><td>:wrench:</td><td>添加或更新配置文件。</td></tr><tr><td>🔨</td><td>:hammer:</td><td>添加或更新开发脚本。</td></tr><tr><td>🌐</td><td>:globe_with_meridians:</td><td>国际化和本地化。</td></tr><tr><td>✏️</td><td>:pencil2:</td><td>修正错别字。</td></tr><tr><td>💩</td><td>:poop:</td><td>编写需要改进的糟糕代码。</td></tr><tr><td>⏪️</td><td>:rewind:</td><td>还原更改。</td></tr><tr><td>🔀</td><td>:twisted_rightwards_arrows:</td><td>合并分支。</td></tr><tr><td>📦️</td><td>:package:</td><td>添加或更新已编译的文件或包。</td></tr><tr><td>👽️</td><td>:alien:</td><td>由于外部 API 更改而更新代码。</td></tr><tr><td>🚚</td><td>:truck:</td><td>移动或重命名资源（例如：文件、路径、路由）。</td></tr><tr><td>📄</td><td>:page_facing_up:</td><td>添加或更新许可证。</td></tr><tr><td>💥</td><td>:boom:</td><td>引入重大更改。</td></tr><tr><td>🍱</td><td>:bento:</td><td>添加或更新静态资源</td></tr><tr><td>♿️</td><td>:wheelchair:</td><td>提高可访问性。</td></tr><tr><td>💡</td><td>:bulb:</td><td>在源代码中添加或更新注释。</td></tr><tr><td>🍻</td><td>:beers:</td><td>醉酒写代码。(没懂啥意思)</td></tr><tr><td>💬</td><td>:speech_balloon:</td><td>添加或更新文本和文字。</td></tr><tr><td>🗃️</td><td>:card_file_box:</td><td>执行与数据库相关的更改。</td></tr><tr><td>🔊</td><td>:loud_sound:</td><td>添加或更新日志。</td></tr><tr><td>🔇</td><td>:mute:</td><td>删除日志。</td></tr><tr><td>👥</td><td>:busts_in_silhouette:</td><td>添加或更新贡献者。</td></tr><tr><td>🚸</td><td>:children_crossing:</td><td>改善用户体验/可用性</td></tr><tr><td>🏗️</td><td>:building_construction:</td><td>进行架构更改。</td></tr><tr><td>📱</td><td>:iphone:</td><td>从事响应式设计。</td></tr><tr><td>🤡</td><td>:clown_face:</td><td>mock 代码</td></tr><tr><td>🥚</td><td>:egg:</td><td>添加或更新复活节彩蛋。</td></tr><tr><td>🙈</td><td>:see_no_evil:</td><td>添加或更新 .gitignore 文件。</td></tr><tr><td>📸</td><td>:camera_flash:</td><td>添加或更新快照。</td></tr><tr><td>⚗️</td><td>:alembic:</td><td>进行实验。</td></tr><tr><td>🔍️</td><td>:mag:</td><td>改进搜索引擎优化。</td></tr><tr><td>🏷️</td><td>:label:</td><td>添加或更新类型。</td></tr><tr><td>🌱</td><td>:seedling:</td><td>添加或更新种子文件。</td></tr><tr><td>🚩</td><td>:triangular_flag_on_post:</td><td>添加、更新或删除功能标志。</td></tr><tr><td>🥅</td><td>:goal_net:</td><td>捕捉错误。</td></tr><tr><td>💫</td><td>:dizzy:</td><td>添加或更新动画和过渡。</td></tr><tr><td>🗑️</td><td>:wastebasket:</td><td>弃用需要清理的代码。</td></tr><tr><td>🛂</td><td>:passport_control:</td><td>处理与授权、角色和权限相关的代码。</td></tr><tr><td>🩹</td><td>:adhesive_bandage:</td><td>对非关键问题的简单修复。</td></tr><tr><td>🧐</td><td>:monocle_face:</td><td>数据探索/检查。</td></tr><tr><td>⚰️</td><td>:coffin:</td><td>删除死代码。</td></tr><tr><td>🧪</td><td>:test_tube:</td><td>添加失败的测试。</td></tr><tr><td>👔</td><td>:necktie:</td><td>添加或更新业务逻辑</td></tr><tr><td>🩺</td><td>:stethoscope:</td><td>添加或更新健康检查。</td></tr></tbody></table><h2 id="结束">结束</h2><p>简单水💧一下。</p>]]></content>
    
    
    <categories>
      
      <category>代码提交</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0到1完成阿里云node服务搭建部署</title>
    <link href="/2021/10/30/%E4%BB%8E0%E5%88%B01%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/10/30/%E4%BB%8E0%E5%88%B01%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="从0到1完成阿里云node服务搭建部署">从0到1完成阿里云node服务搭建部署</h2><h2 id="介绍">介绍</h2><p>前段时间自己根据网上的教程捣鼓了一下自己的服务器，终于把自己的<code>node</code>服务部署到了阿里云。所以在这里把自己的一些经验分享给各位，希望能对大家有帮助ღ( ´･ᴗ･` )比心。</p><ol><li>先介绍一下这次部署用到的一些东西，免得浪费各位的时间✅ 。</li></ol><ul><li>首先本人是一个前端，所以这次的服务端语言用的是<code>node</code>框架<a href="https://koajs.com/">koa</a></li><li><code>node</code>生产环境自然离不开<a href="https://pm2.keymetrics.io/">pm2</a>，本次远程部署也用到了它</li><li>数据库用的<a href="https://docs.mongodb.com/">mongodb</a>以及它的<code>orm</code><a href="http://www.mongoosejs.net/">mongoose</a></li><li>缓存用的<code>redis</code>，这个用到的地方不是很多。</li><li><code>nginx</code>做代理</li><li>将上面的数据库、缓存、<code>nginx</code>等做容器化使用<code>docker</code>，并使用<code>docker-compose</code>做统一管理。</li><li>ci/ci 用的<code>github actions</code>，两个字，香！！（之前用的<code>travis</code>，但是后来得知它居然开始收费了，那没事了，白嫖怪不可能多花一分钱的）</li></ul><ol start="2"><li>当前还有部分未完成的内容❎</li></ol><ul><li>消息队列控制<code>rabbitmq</code></li><li>视频细化处理<code>ffmpeg</code></li></ul><h2 id="正文">正文</h2><ol><li>服务端依赖安装<br>首先是服务器上相关的依赖安装：<code>node</code>和<code>docker</code>以及<code>docker-compose</code></li></ol><ul><li>node<br>安装<code>node</code>可以参考这边<a href="https://www.jianshu.com/p/2e31fd9eb048">文章</a>的内容</li><li>docker<br>安装<code>docker</code>可以参考<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">这个</a></li><li>docker-compose<br>安装<code>docker-compose</code>可以参考<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">这个</a></li></ul><ol start="2"><li><p>github actions<br>关于代码集成部署方面，本项目使用了<code>github actions</code>，如果有不了解的话，可以参考<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰</a>的文章。<br>这里关于它对于服务器的一些配置问题，本人在之前的一篇文章中有详细描述，可以参看<a href="https://food-billboard.github.io/2021/10/25/deploy/">那篇文章</a>来进行配置。</p></li><li><p>docker docker-compose</p></li></ol><ul><li><p><code>docker</code></p><blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。<br><code>docker</code>简化了我们在服务部署上的流程，并且它的可移植性以及跨操作系统，可以让我们一次配置，多处使用。</p></blockquote></li><li><p><code>docker-compose</code></p><blockquote><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。<br>通常部署服务一般牵扯到其他很多的配置，比如本人的<code>node</code>项目，需要用到<code>mongodb</code>、<code>redis</code>、<code>nginx</code>等，如果这些都单独配置，但是安装就需要分别处理三次，通过<code>docker</code>容器化并配合<code>docker-compose</code>进行统一配置，大大降低了难度。</p></blockquote></li></ul><p>下面就介绍一下本人使用的几种容器的配置（可能不全，可以选择得看😝）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># mongodb </span><br><span class="hljs-attr">mongo:</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.0.3</span><br>  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">27017</span><span class="hljs-string">:27017</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/home/movie/mongodb/data:/data/db</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/local/mongodb/log:/var/log/mongodb</span>  <br><br><span class="hljs-comment"># redis </span><br><span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/local/redis/redis.conf:/usr/local/etc/redis/redis.conf</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">6379</span><span class="hljs-string">:6379</span><br><br><span class="hljs-comment"># nginx </span><br><span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.19</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:80</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">80</span><span class="hljs-string">:80</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">443</span><span class="hljs-string">:443</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./bin/nginx/nginx.conf:/etc/nginx/conf.d/default.conf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./bin/nginx/logs.log:/etc/nginx/logs/log.log</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./public:/movie/server/public:ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./static:/movie/server/static:ro</span><br>  <span class="hljs-attr">network_mode:</span> <span class="hljs-string">host</span><br></code></pre></td></tr></table></figure><ul><li>就以上的配置，这里做一下说明：<ul><li>如上<code>volumes</code>是做文件映射的，当希望外部文件映射到内部文件，并且同步修改时，不要直接映射对应的文件，而是映射其外部的文件夹，否则的无法做到修改同步。</li><li>外部的服务会和容器内的服务发生冲突，比如你在外部启动了<code>nginx</code>，同样在容器里启用<code>docker</code>，那么可能就是外部的<code>nginx</code>配置起作用了。</li></ul></li></ul><p>如果有在本地做<code>docker</code>测试，可以<code>vs code</code>的<code>docker</code>插件，可以采用可视化的方式查看到容器内部的文件结构。</p><ul><li>另外<br>收集了几个有时候用到的<code>docker</code>命令<ul><li><p>查看正在运行的docker容器 <code>docker ps</code></p></li><li><p>进入指定容器内部 <code>docker exec -it 容器id sh</code></p></li><li><p>从容器中退出 <code>exit</code></p></li><li><p>查看容器内部暴露的ip <code>docker inspect 容器id |grep IPA</code></p></li><li><p>外部执行mongodb <code>docker exec -it 容器id mongo --host 127.0.0.1 --port 27017</code></p></li><li><p>外部执行redis <code>docker exec -it 容器id redis-cli</code></p></li><li><p>文件复制 <code>docker cp 容器id:容器的路径 本地的路径</code></p></li><li><p>停止镜像 <code>docker stop docker_id</code></p></li><li><p>删除容器 <code>docker rm docker_id</code></p></li><li><p>正在运行的容器 <code>docker ps</code></p></li><li><p>所有容器 <code>docker ps -a</code></p></li><li><p>删除镜像 <code>docker rmi docker_id</code></p></li><li><p>查看镜像 <code>docker images</code></p></li><li><p>查看容器运行日志 <code>docker logs docker_id</code></p></li></ul></li></ul><ol start="4"><li>pm2</li></ol><blockquote><p>PM2 是一个带有负载均衡功能的 Node 应用进程管理器。<br>利用<code>pm2</code>在服务器上进行服务持久性运行，以及达到从<code>local</code>到<code>remote</code>的代码部署。</p></blockquote><p>下面是它的配置，当中有注释进行解释。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 应用名称</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;app&quot;</span>,<br>  <span class="hljs-comment">// 需要启动的服务  </span><br>  <span class="hljs-attr">apps</span> : [<br>    &#123;<br>      <span class="hljs-comment">// 进程名称</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;app&#x27;</span>,<br>      <span class="hljs-comment">// 进程的入口文件  </span><br>      <span class="hljs-attr">script</span>: <span class="hljs-string">&#x27;app.js&#x27;</span>,<br>      <span class="hljs-comment">// 环境变量</span><br>      <span class="hljs-attr">env</span>: &#123;<br>        <span class="hljs-attr">NODE_ENV</span>: <span class="hljs-string">&quot;production&quot;</span><br>      &#125;,<br>      <span class="hljs-comment">// 负载均衡</span><br>      <span class="hljs-attr">exec_mode</span>: <span class="hljs-string">&quot;cluster_mode&quot;</span>,<br>      <span class="hljs-comment">// 错误日志路径</span><br>      <span class="hljs-attr">error_file</span>: <span class="hljs-string">&#x27;./src/logs/pm2/error.log&#x27;</span>,<br>      <span class="hljs-comment">// 输出路径  </span><br>      <span class="hljs-attr">out_file</span>: <span class="hljs-string">&#x27;./src/logs/pm2/output.log&#x27;</span><br>    &#125;, <br>    <span class="hljs-comment">// 另一个进程  </span><br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;socket&quot;</span>,<br>      <span class="hljs-attr">script</span>: <span class="hljs-string">&quot;./src/chat/index.js&quot;</span>,<br>      <span class="hljs-attr">exec_mode</span>: <span class="hljs-string">&quot;cluster_mode&quot;</span>,<br>    &#125;<br>  ],<br><br>  <span class="hljs-comment">// 部署的配置 </span><br>  <span class="hljs-attr">deploy</span> : &#123;<br>    <span class="hljs-attr">production</span> : &#123;<br>      <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;这里是服务器的用户名&quot;</span>,<br>      <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;服务器的ip地址(xx.xx.xx.xx或者可以使用数组设置多个)&quot;</span>,<br>      <span class="hljs-attr">ssh_options</span>: <span class="hljs-string">&quot;ssh连接的参数&quot;</span>,<br>      <span class="hljs-attr">ref</span>: <span class="hljs-string">&quot;github分支&quot;</span>,<br>      <span class="hljs-attr">repo</span>: <span class="hljs-string">&quot;github仓库&quot;</span>,<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;部署的服务器中的文件目录&quot;</span>,<br>      <span class="hljs-comment">// 代码被clone后执行的命令</span><br>      <span class="hljs-string">&quot;post-deploy&quot;</span>:<br>        <span class="hljs-string">&quot;git pull origin master &amp;&amp; source ~/.nvm/nvm.sh &amp;&amp; yarn install&quot;</span>, <br>      <span class="hljs-comment">// 环境变量</span><br>      <span class="hljs-attr">env</span>: &#123;<br>        <span class="hljs-string">&quot;NODE_ENV&quot;</span>: <span class="hljs-string">&quot;production&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="遇到的问题">遇到的问题</h2><ol><li>可能存在拉取<code>docker</code>镜像出现<code>net/http: TLS handshake timeout</code>问题<br>使用国内镜像加速</li></ol><blockquote><p>Ubuntu16.04+、Debian8+、CentOS7<br>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）：<br><code>&#123;&quot;registry-mirrors&quot;:[&quot;https://reg-mirror.qiniu.com/&quot;]&#125;</code><br>这个是七牛云的镜像加速地址</p></blockquote><h2 id="结束">结束</h2><p>这就是本次我在搭建部署阿里云服务器中总结的一些经验和教训，如有错误的话请指正，希望对各位有帮助。<br>完整的项目配置可以到<a href="https://github.com/food-billboard/node-server">这里</a>查看。</p>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deploy node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb操作实例</title>
    <link href="/2021/10/26/mongodb%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B/"/>
    <url>/2021/10/26/mongodb%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>这是<code>mongodb</code>的第二篇文章，本文包含了一些在平时自己开发过程当中使用的一些操作符以及特殊情况，希望对各位有帮助😺 。</p><h2 id="正文">正文</h2><h3 id="filter">$filter</h3><ul><li><p>用于从已有数据对象中的数组中筛选出符合条件的数据项</p></li><li><p>假设有如下集合名称为<code>users</code>的数据:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">students</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">10</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Jack&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">17</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>筛选出年龄大于<code>18</code>的学生</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">student_gt_18</span>: &#123;<br>        <span class="hljs-attr">$filter</span>: &#123;<br>          <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;$students&quot;</span>,<br>          <span class="hljs-attr">as</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>          <span class="hljs-attr">cond</span>: &#123;<br>            <span class="hljs-attr">$gt</span>: [ <span class="hljs-string">&quot;$$student.age&quot;</span>, <span class="hljs-number">18</span> ]<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">student_gt_18</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p><code>$filter</code>有三个参数:</p><ol><li><code>input</code><br>元数据中的某一字段(如<code>students</code>)</li><li><code>as</code><br><code>students</code>的遍历项名称(如<code>student</code>)</li><li><code>cond</code><br>筛选条件，可以在其中使用遍历项的值(如<code>$$student.age</code>，得到了当前项的<code>age</code>)</li></ol><h3 id="map">$map</h3><ul><li><p>用于遍历已有数据对象中的数组中并解析成新的数组<br>其实这个和上面的<code>$filter</code>在语义上与<code>javascript</code>的同名方法的功能是一致的，这样的话应该会很好理解了👍 。</p></li><li><p>假设有如下集合名称为<code>users</code>的数据:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">students</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">10</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>将学生<code>name</code>和<code>age</code>字段拼接生成新的字段<code>description</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">new_students</span>: &#123;<br>        <span class="hljs-attr">$map</span>: &#123;<br>          <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;$students&quot;</span>,<br>          <span class="hljs-attr">as</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>          <span class="hljs-attr">in</span>: &#123;<br>            <span class="hljs-attr">description</span>: &#123;<br>              <span class="hljs-attr">$concat</span>: [ <span class="hljs-string">&quot;$$student.name&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;$$student.age&quot;</span> ]<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">new_students</span>: [<br>      &#123;<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;Join-10&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;Lisa-19&quot;</span>,<br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p><code>$map</code>有三个参数:</p><ol><li><code>input</code><br>元数据中的某一字段(如<code>students</code>)</li><li><code>as</code><br><code>students</code>的遍历项名称(如<code>student</code>)</li><li><code>in</code><br>将会生成的数据字段，<code>key</code>为字段名称，<code>value</code>为字段值，可以在其中使用遍历项的值(如<code>$$student.age</code>，得到了当前项的<code>age</code>)<br>甚至可以在其中对一些数组进行<code>$filter</code>操作，这是被允许的。</li></ol><h3 id="lookup">$lookup</h3><ul><li>复杂多表联查<br>这个应该在平常开发中用到的频率非常的高，用于将嵌套的集合进行查询<br>想象一下可能你的<code>users</code>集合中保存着<code>teacher</code>的字段，值为另一个<code>teachers</code>集合的<code>id</code>，此时就需要用到<code>$lookup</code>来进行查询</li></ul><p><strong>$lookup有两种查询形式</strong></p><h4 id="简单查询">简单查询</h4><p>这种适合只查询一层的情况，比如上面说的<code>teachers</code>集合中不存在当前查询所需要再次联表查询的字段<br>听着有些别扭，看下面的例子</p><ul><li>假设有如下集合名称为<code>users</code>和<code>teachers</code>的数据:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span><br>  &#125;<br>]<br><br><span class="hljs-comment">// teachers </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>students</code>集合并同时查询出其中的<code>teacher</code>数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$lookup</span>: &#123;<br>      <span class="hljs-attr">from</span>: <span class="hljs-string">&#x27;teachers&#x27;</span>,<br>      <span class="hljs-attr">localField</span>: <span class="hljs-string">&#x27;teacher&#x27;</span>,<br>      <span class="hljs-attr">foreignField</span>: <span class="hljs-string">&#x27;id&#x27;</span>,<br>      <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;teacher_data&#x27;</span><br>    &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">teacher_data</span>: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-comment">// 注意这里</span><br>    <span class="hljs-attr">teacher_data</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">40</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>注意看上面的查询出来的数据的<code>teacher_data</code>字段，它是一个数组。通过<code>$lookup</code>查询的结果都会变成一个数组。<br>如果不想是数组，可以通过<code>$unwind</code>来进行拆分，有关<code>$unwind</code>可在后文看到。</p><p>简单查询包含四个参数：</p><ol><li><code>from</code><br>要查询的目标集合名称</li><li><code>localField</code><br>当前集合中需要进行查询的字段名称</li><li><code>foreignField</code><br>两个集合所关联起来的字段名称，上面是<code>id</code></li><li><code>as</code><br>查询结果保存的字段名称，你可以使用原始字段名称进行覆盖，也可以新增一个</li></ol><h4 id="复杂查询">复杂查询</h4><p>通过上面的例子应该可以理解刚刚的那句话了吧，复杂查询可以把那些嵌套关联了多层的数据查询出来<br>还是看下面的例子🌰</p><ul><li>假设有如下集合名称为<code>users</code>和<code>teachers</code>以及<code>schools</code>的数据:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span><br>  &#125;<br>]<br><br><span class="hljs-comment">// teachers </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">school</span>: <span class="hljs-string">&quot;custom_school_id_001&quot;</span><br>  &#125;<br>]<br><br><span class="hljs-comment">// schools </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_school_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;high school&quot;</span>,<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>students</code>集合并同时查询出其中的<code>teacher</code>数据以及<code>school</code>数据<br>此时通过简单得查询已经无法满足要求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$lookup</span>: &#123;<br>      <span class="hljs-attr">from</span>: <span class="hljs-string">&#x27;teachers&#x27;</span>, <br>      <span class="hljs-attr">let</span>: &#123;<br>        <span class="hljs-attr">teacher_id</span>: <span class="hljs-string">&quot;$teacher&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">pipeline</span>: [<br>        &#123;<br>          <span class="hljs-attr">$match</span>: &#123;<br>            <span class="hljs-attr">$expr</span>: &#123;<br>              <span class="hljs-attr">$eq</span>: [<br>                <span class="hljs-string">&quot;$id&quot;</span>, <span class="hljs-string">&quot;$$teacher_id&quot;</span><br>              ]<br>            &#125;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">$lookup</span>: &#123;<br>            <span class="hljs-attr">from</span>: <span class="hljs-string">&#x27;schools&#x27;</span>,<br>            <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;school_data&#x27;</span>,<br>            <span class="hljs-attr">foreignField</span>: <span class="hljs-string">&quot;id&quot;</span>,<br>            <span class="hljs-attr">localField</span>: <span class="hljs-string">&quot;school&quot;</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">$project</span>: &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">school</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">school_data</span>: <span class="hljs-string">&quot;$school_data&quot;</span><br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-attr">as</span>: <span class="hljs-string">&#x27;teacher_data&#x27;</span><br>    &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">teacher_data</span>: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher_data</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br>        <span class="hljs-attr">school_data</span>: [<br>          &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_school_id_001&quot;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;high school&quot;</span>,<br>          &#125;<br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>复杂查询也是四个参数:</p><ol><li><code>from</code><br>与简单查询相同</li><li><code>as</code><br>与简单查询相同</li><li><code>let</code><br>在当前查询层定义的变量可以在本次查询中使用，比如上面定义的<code>teacher_id</code>，用于在下层查询时做筛选条件判断</li><li><code>pipeline</code><br>下层查询操作，顾名思义，管道操作，值是一个数组，当中可以使用与外层相同的查询操作，可以访问到上层<code>let</code>中定义的变量，使用<code>$$</code>前缀</li></ol><ul><li><p>应该有注意到上面在<code>pipeline</code>第一项是<code>$match</code>，为什么要这样操作？<br>当使用复杂查询时，需要自己来定义筛选条件，否则它将会把集合当中的所有数据全部返回</p></li><li><p><code>$match</code> 表示的是筛选条件<br>以及其中若使用到<code>let</code>定义的变量时，需要使用<code>$expr</code>操作符，具体的我还没有了解过😊 。<br>还有一点需要注意的是，当要做比较的值得类型是<code>mongodb</code>自带的<code>ObjectId</code>类型时，相等判断条件需要使用<code>$eq</code>操作符，否则永远返回<code>false</code></p></li><li><p>注意:</p></li><li><p><code>pipeline</code> 中使用 <code>$match</code> 匹配 <code>let</code>中定义的字段时，需要在外面包一个 <code>$expr</code>, 否则无法匹配<br><code>$match: &#123; $expr: &#123; _id: &quot;$$customFields&quot; &#125; &#125;</code></p></li><li><p>如果要在<code>$match</code>中匹配<code>ObjectId</code>, 需要使用<code>$eq</code>, 直接比较似乎无效,原因有待查证. <code>$expr: &#123; $eq: [ &quot;$_id&quot;, &quot;$$customFields&quot; ] &#125;</code></p></li><li><p>ps<br>这是我另外碰到的一个例子🌰<br>需要判断某个值是否在数组中存在，此时可以使用<code>$in</code>操作符进行判断<br>第一个参数是需要判断的值，第二个参数是查询的数组</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 简单描述一下</span><br>&#123;<br>  <span class="hljs-attr">let</span>: &#123;<br>    <span class="hljs-attr">teacher_id</span>: <span class="hljs-string">&quot;$teacher&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">pipeline</span>: [<br>    &#123;<br>      <span class="hljs-attr">$match</span>: &#123;<br>        <span class="hljs-attr">$expr</span>: &#123;<br>          <span class="hljs-string">&quot;$in&quot;</span>: [ <span class="hljs-string">&quot;$name&quot;</span>, [<span class="hljs-string">&quot;Lisa&quot;</span>] ]<br>        &#125;<br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="unwind">$unwind</h3><p>根据指定的数组字段进行拆分成多项<br>它也有两种形式</p><h4 id="简单形式">简单形式</h4><ul><li>假设有如下集合名称为<code>users</code>的数据:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: [<br>      <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>      <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span><br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>users</code>数据并将<code>teacher</code>字段进行拆分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$unwind</span>: <span class="hljs-string">&quot;$teacher&quot;</span><br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p><code>teacher</code>为拆分的字段，需要添加<code>$</code>前缀<br>这种简单的写法适合那种字段规整的情况，当需要做异常处理时，这种情况就不适用了。</p><h4 id="复杂形式">复杂形式</h4><ul><li>假设有如下集合名称为<code>users</code>的数据:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: [<br>      <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>      <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span><br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_002&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>users</code>数据并将<code>teacher</code>字段进行拆分，并设置当<code>teacher</code>不存在时继续保留</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$unwind</span>: &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;$teacher&quot;</span>,<br>      <span class="hljs-attr">preserveNullAndEmptyArrays</span>: <span class="hljs-literal">true</span> <br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_002&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Lisa&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>如上可以看到，当<code>teacher</code>不存在时，保留了对应的字段，如果设置<code>preserveNullAndEmptyArrays</code>时，第三条数据将不被查询到。</p><p>复杂形式有三个参数：</p><ol><li><code>path</code><br>同简单形式</li><li><code>preserveNullAndEmptyArrays</code><br>是否保留空数组</li><li><code>includeArrayIndex</code><br>暂时没有用到过，再说。</li></ol><h3 id="addToSet">$addToSet</h3><p>这个方法在前面的<a href="https://food-billboard.github.io/2020/10/18/mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6/">mongodb常用操作符文章中介绍过</a>介绍过，但是那是添加一项，有时候我们需要同时添加多个项。</p><ul><li>假设有如下集合名称为<code>users</code>的数据:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: [<br>      <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>    ]<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><ul><li>向<code>name</code>为<code>Join</code>的数据字段添加两个<code>teacher</code>项</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">db.users.updateOne(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-attr">$addToSet</span>: &#123;<br>    <span class="hljs-attr">teacher</span>: &#123;<br>      <span class="hljs-attr">$each</span>: [<br>        <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span>,<br>        <span class="hljs-string">&quot;custom_teacher_id_003&quot;</span><br>      ]<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>该字段会变成</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">teacher</span>: [<br>      <span class="hljs-string">&quot;custom_teacher_id_001&quot;</span>,<br>      <span class="hljs-string">&quot;custom_teacher_id_002&quot;</span>,<br>      <span class="hljs-string">&quot;custom_teacher_id_003&quot;</span><br>    ]<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p>配合<code>$each</code>添加多项，这个没啥好说的</p><h3 id="addFields">$addFields</h3><ul><li><p>向输出结果中新增字段<br>这种的一般使用情况是对原始的一些数据字段做特殊处理，比如统计等。</p></li><li><p>假设有如下集合名称为<code>users</code>的数据:</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// users </span><br>[<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">homework</span>: [<br>      <span class="hljs-number">30</span>,<br>      <span class="hljs-number">40</span><br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>查询<code>users</code>数据并添加新字段<code>total_homework</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.users.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$addFields</span>: &#123;<br>      <span class="hljs-attr">total_homework</span>: &#123; <br>        <span class="hljs-attr">$sum</span>: <span class="hljs-string">&quot;$homework&quot;</span> <br>      &#125;<br>    &#125;<br>  &#125;,<br>])<br></code></pre></td></tr></table></figure><ul><li>你将会得到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123;<br>    <span class="hljs-attr">_id</span>: <span class="hljs-string">&quot;custom_student_id_001&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Join&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">homework</span>: [<br>      <span class="hljs-number">30</span>,<br>      <span class="hljs-number">40</span><br>    ],<br>    <span class="hljs-attr">total_homework</span>: <span class="hljs-number">70</span> <br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><h3 id="push">$push</h3><p>这个也是在<a href="https://food-billboard.github.io/2020/10/18/mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6/">前一篇文章</a>有介绍</p><p>但是当需要同时添加多项时，可能会需要用到<code>$pushAll</code>操作符，但是在实际使用过程中，<code>$pushAll</code>会报错，所以这里还是使用<code>$push</code><br>至于使用方法，可以参考前面的<code>$addToSet</code>操作符。</p><h2 id="结束">结束</h2><p>以上就是本人在实际使用过程中碰到的一部分问题，以后如果有新的问题还会补充。如果有哪里错了欢迎指正😊 。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>mongodb</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github Actions 部署node项目</title>
    <link href="/2021/10/25/deploy/"/>
    <url>/2021/10/25/deploy/</url>
    
    <content type="html"><![CDATA[<h2 id="开头">开头</h2><p>作为一个前端，其实平常和服务器打交道的时间并不多，但作为一个程序猿，又怎么能不想搞一搞呢。<br>讲一个最简单的例子🌰：<br>你发现了你页面的一个bug，改好之后需要部署到服务器了，恰巧没有后台人员在，需要自己部署。你输入账号密码登录了服务器，进入到对应的目录，替换了对应的文件，完成了本次的修改。过了一会儿，你发现好像还有问题，然后你又重新来了一遍。。。<br>这样重复做功绝对不是我们想要的，所以此时就需要<code>github actions</code>登场了。它帮助我们完成了中间这些复杂又重复的工作，让我们能有更多的时间摸🐟。😁</p><h2 id="介绍">介绍</h2><p>关于<code>github actions</code>的介绍，这里不多说，大家可以参看<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰老师的文章</a></p><h2 id="正文">正文</h2><h3 id="流程">流程</h3><p>首先是具体的流程</p><ul><li>本地完成代码修改，提交代码到<code>github</code></li><li><code>github</code>检测到代码提交，自动执行项目目录下的<code>.github/workflows</code>的yml文件。</li><li>虚拟机内:</li></ul><ol><li>切换对应的分支，比如<code>master</code></li><li>生成<code>ssh</code>秘钥文件</li><li>设置对应的<code>node</code>版本</li><li>安装<code>yarn</code>、<code>pm2</code></li><li><code>pm2</code>部署代码至服务器</li><li><code>ssh</code>登录服务器，<code>pm2</code>更新并启动<code>node</code>服务，更新<code>docker</code>服务</li></ol><h3 id="具体流程">具体流程</h3><p>以下文件路径基本源自<code>mac</code></p><ol><li>在本机的<code>.ssh</code>文件夹下生成秘钥、公钥，如果有的话请忽略</li></ol><ul><li>使用命令生成<code>ssh-keygen -t rsa -C 你的github邮箱@.com</code></li><li>将公钥文件<code>id_rsa.pub</code>内容添加到<code>github</code>配置中(github网站上的 -&gt; <code>settings</code> -&gt; <code>SSH and GPG keys</code>)</li></ul><ol start="2"><li>在对应的服务器中的<code>.ssh</code>文件夹下生成私钥、公钥，有的话请忽略</li></ol><ul><li>使用命令<code>ssh-keygen -o</code></li></ul><ol start="3"><li>添加本机的公钥至服务器</li></ol><ul><li>服务器<code>.ssh</code>文件夹下有一个<code>authorized_keys</code>文件，如果没有的话请创建<code>touch authorized_keys</code></li><li>添加本机的公钥内容至<code>authorized_keys</code>中</li></ul><ol start="4"><li>添加服务器公钥至<code>github</code></li></ol><ul><li>将服务器公钥内容添加到<code>github</code> (github网站 -&gt; <code>settings</code> -&gt; <code>SSH and GPG keys</code>) 或者 (github项目中 -&gt; <code>settings</code> -&gt; <code>deploy keys</code>)</li></ul><ol start="5"><li>添加流程中所需要的一些环境变量<br>其中有些变量并不是必须得，可自行选择添加<br>所有的自定义的环境变量都放在项目的<code>secrets</code>中(github项目中 -&gt; <code>settings</code> -&gt; <code>secrets</code>)<br><code>name</code>字段自定义</li></ol><ul><li>将本机私钥文件<code>id_rsa</code>内容添加至环境变量，<code>name</code>设置为<code>LOCAL_SSH_PRIVATE_KEY</code>，<code>value</code>为<code>id_rsa</code>内容</li><li>添加服务器的<code>host</code>，<code>name</code>设置为<code>SSH_IP</code></li><li>添加服务器<code>ssh</code>用户名，<code>name</code>设置为<code>SSH_USERNAME</code></li><li>添加服务器<code>ssh</code>密码，<code>name</code>设置为<code>SSH_PASSWORD</code></li><li>添加服务器项目文件目录地址，<code>name</code>设置为<code>REMOTE_PATH</code></li></ul><ol start="6"><li>添加<code>github</code>至服务器的<code>known_hosts</code>文件中</li></ol><ul><li>执行以下命令<code>ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</code><br>若不执行此操作，<code>github</code>访问服务器可能会出错</li></ul><p>完成以上步骤后，即可开始项目的部署文件配置</p><p>完整的代码在下方，当中的一些细节用注释标出</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">server</span> <span class="hljs-string">to</span> <span class="hljs-string">aliyun</span> <br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span> <br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy-and-start:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <span class="hljs-comment"># 运行环境</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 切换分支</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span>  <br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span><br><br>      <span class="hljs-comment"># 设置ssh文件</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">ssh</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 这里用到了刚刚的环境变量，本机的 ssh 私钥  </span><br>          <span class="hljs-attr">LOCAL_SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.LOCAL_SSH_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-comment"># 在虚拟机中生成对应的 ssh 文件</span><br>        <span class="hljs-comment"># 否则的话在下面的 pm2 操作中 将无法验证通过  </span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|  </span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$LOCAL_SSH_PRIVATE_KEY&quot; &gt; ~/.ssh/id_rsa </span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string"></span><br>      <span class="hljs-comment"># 设置node </span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">setup</span> <span class="hljs-string">node</span> <br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-number">12.16</span><span class="hljs-number">.1</span><br>      <span class="hljs-comment"># 安装对应的模块  </span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install yarn pm2 -g</span><br><span class="hljs-string"></span>      <span class="hljs-comment"># 代码更新至服务器  </span><br>      <span class="hljs-comment"># 如果是第一次的话则执行 pm2 deploy pm2.config.js production setup</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          pm2 deploy pm2.config.js production update</span><br><span class="hljs-string"></span><br>      <span class="hljs-comment"># 登录服务器并启动docker服务   </span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">start</span> <span class="hljs-string">the</span> <span class="hljs-string">remote</span> <span class="hljs-string">server</span> <br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">appleboy/ssh-action@master</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_IP</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># 进入到服务器的项目路径下  </span><br>          <span class="hljs-comment"># 安装全局依赖  </span><br>          <span class="hljs-comment"># 安装项目依赖  </span><br>          <span class="hljs-comment"># 启动/重启 docker服务  </span><br>          <span class="hljs-comment"># 启动项目  </span><br>          <span class="hljs-attr">script:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            cd $&#123;&#123; secrets.REMOTE_PATH &#125;&#125;</span><br><span class="hljs-string">            npm install pm2 yarn -g </span><br><span class="hljs-string">            yarn </span><br><span class="hljs-string">            docker-compose -f docker-compose.yml pull</span><br><span class="hljs-string">            docker-compose -f docker-compose.yml up -d</span><br><span class="hljs-string">            pm2 startOrRestart pm2.config.js</span><br></code></pre></td></tr></table></figure><h3 id="当中的问题">当中的问题</h3><ol><li>为什么使用<code>pm2</code><br><code>node</code>作为一个后台服务应用，不像前端应用一样存在周期短，它被要求需要长期保持稳定的启动状态，当中的许多细节如果单靠开发者来控制的话，会显得相当的麻烦，此时依靠与<code>pm2</code>来进行管理会变得非常的容易。<br><code>pm2</code>内置了负载均衡，出错重启，后台运行等的特点，帮助开发者在运维当中给到了相当大的便利，并且它还能帮你自动部署项目到远程服务器。具体的细节可自行前往<a href="https://github.com/Unitech/pm2">github</a>查看</li><li>为什么使用<code>docker</code></li></ol><blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p></blockquote><p>想象一下当你辛苦的在服务器上部署完成了<code>nginx</code>、<code>mongodb</code>、<code>redis</code>等服务之后，某一天突然要求你更换另一台服务器部署，你是否需要重新将刚刚的服务重新安装启用部署，这样就显得非常麻烦了。<br>而<code>docker</code>这种封闭的，可移植的特性，可以极大的简化我们的部署流程，我们只需配置一次，即可，后续的所有操作全部都在<code>docker</code>容器当中进行。具体的细节不在本次讨论范围。</p><h2 id="结束">结束</h2><p>这是本人在自己的摸索中踩坑的一些内容，当中可能还不乏一些错误，欢迎指正🙏🏻<br>最后，这是本人的<a href="https://github.com/food-billboard/node-server">后台服务项目</a>，其中有上面的配置文件等，欢迎大家参考点评😁。</p>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>github actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Tus协议的文件上传流程</title>
    <link href="/2020/12/28/%E5%9F%BA%E4%BA%8ETus%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B/"/>
    <url>/2020/12/28/%E5%9F%BA%E4%BA%8ETus%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>最近一直都在弄关于文件上传方面的问题，如果只是小文件的话，基本直接<code>post</code>上传就可以解决，但是当面对大文件时，如果还是只用简单的请求可能无法完成文件的上传.</p><p>假设当前用户要上传一个<code>2G</code>的视频文件. 可能就会遇到许多问题:</p><ol><li>首先最大的问题就是，服务端不可能接受前端在一次请求中上传如此大的<code>body</code>.</li><li>所以不得不选择将大文件分成多个小文件分多次上传，基本可以解决问题. 但是如果出现一些不可控的原因导致文件上传中断，用户只能选择重新上传，而重新上传意味着之前上传的内容又得再一次上传，如果用户在一个网络环境很差的情况下，这个文件就根本无法完成上传。</li></ol><p>基于以上的情况，通过<code>Tus</code>协议来实现分片上传以及断点续传的功能便能达到相当好的用户体验。下面就来讲讲这个实现过程。</p><h2 id="Tus">Tus</h2><p>什么是<code>Tus</code>，<code>Tus</code>是基于<code>HTTP</code>的可恢复文件上传协议。可恢复意味着可以随时中断上载，并且可以继续上载而无需再次重新上载先前的数据。</p><p><code>Tus</code>官网上有许多实现的库可供使用。而作为一个前端选手，必然用的<code>tus-js-client</code>，而我一开始接触的时候用的是文件上传工具<code>filepond</code>(其实之前还用过<code>uppy</code>，因为它<code>github</code>✨多，而且它原生就支持<code>Tus</code>协议，你问我为什么不用那个，因为我看不懂😬)。<br>幸好在<code>filepond</code>的issues中看到貌似它也可以和<code>Tus</code>结合使用🙂。</p><p>其实<code>filepond</code>使用来说还算是不错的体验，但是它似乎没有针对<strong>断点续传</strong>方面做过处理，可能也有可能是因为我太菜了吧。  下面是<code>filepond</code>的样子，挺好看。<br><img src="/images/基于Tus协议的文件上传流程/filepond效果.png" /></p><h2 id="前后端基本交互流程">前后端基本交互流程</h2><img src="/images/基于Tus协议的文件上传流程/tus.jpg" /><p>基于上面的流程图这里简单描述一下并讲讲其中一些注意的地方。</p><ol><li>客户端首先向服务端发送<code>options</code>请求。获取服务端的配置，<br>比如服务端支持的<code>tus</code>版本，或者支持的<code>tus</code>扩展。</li><li>如果服务端支持，客户端可以选择:</li></ol><ul><li>向服务端发起<code>post</code>请求创建文件副本</li><li>发送<code>post</code>请求的同时发送部分文件分片</li><li>直接发送<code>head</code>请求尝试恢复上传，如果失败则回退到<code>post</code>创建文件。</li></ul><ol start="3"><li>服务端返回文件的相关信息用于后续文件上传请求。</li></ol><ul><li>恢复上传: 根据服务端返回的响应头<code>Upload-Offset</code>从指定文件位置开始恢复上传</li><li>首次上传: 从文件开始位置上传。也就是<code>0</code>。</li></ul><ol start="4"><li>重复发起<code>patch</code>请求发送文件分片，根据服务端响应的<code>Upload-Offset</code>来确定下一分片位置。<br>如果它的值等于文件的大小，说明文件上传已经完成。</li><li>至此整个文件上传流程完成。</li></ol><h2 id="Tus-扩展">Tus 扩展</h2><p><code>Tus</code>还有许多扩展用于帮助开发者实现更多的功能。在上面的流程中已经用到了一些。<br>以下所有的扩展都需要服务端支持。<br>官方的方法是在<code>options</code>请求当中的响应中根据<code>Tus-Extension</code>响应头来分析具体服务端所接受的扩展。<br>下面的扩展会影响到上面请求流程中的很多地方，也会在下面介绍。(很多地方其实还是对官网的翻译，如果有兴趣的可以去官网继续学习更多的内容😊)</p><ol><li>Creation<br>在文件上传前在服务端创建文件信息<br>可以将文件的相关信息预先在存储在服务端，这样可以为后续文件分片上传做参照。<br>比如可以将文件唯一标识符<code>md5</code>先进行上传，服务端存储数据库，保存每一上传的分片。</li></ol><p>前端可以把一些文件信息放在<code>Upload-Metadata</code>请求头中</p><img src="/images/基于Tus协议的文件上传流程/creation-post-req.png" /><img src="/images/基于Tus协议的文件上传流程/creation-post-response.png" /><p>服务端会返回<code>Location</code>告知前端文件的上传地址。</p><ol start="2"><li>Creation-With-Upload<br>在服务端创建请求中添加文件分片内容<br>为了节省流量，在服务端允许的情况下，可以在向服务端创建请求的同时也将某一分片一同上传。</li></ol><p>和<code>Creation</code>类似，也会返回<code>Location</code>头，同时会返回<code>Upload-Offset</code>设置下一分片的索引。<br><img src="/images/基于Tus协议的文件上传流程/creation-with-upload-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/creation-with-upload-res.png" /></p><ol start="3"><li>Expiration<br>临时文件的过期时间<br>服务端的存储空间毕竟有限，不可能无时限的将文件的分片保存在服务端的数据库中。<br>所以服务端可以设置分片的存储时间，并通过响应头<code>Upload-Expires</code>告知前端它的过期时间。<br>当超过服务端规定的时间之后，用户需要重新在服务端创建文件副本，重新上传。<br><img src="/images/基于Tus协议的文件上传流程/expiration-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/expiration-res.png" /></li></ol><p>当前端发送文件分片响应时，服务端会添加响应头<code>Upload-Expires</code>告知前端该分片过期时间，如果超过时间，服务端将会返回<code>404</code>，前端需要重新上传。</p><ol start="4"><li>Checksum<br>分片大小检查<br>服务端可以对前端发送的文件分片进行校验。<br>在上传前获取服务端上传配置支持度信息时，前端可以根据<code>Tus-Checksum-Algorithm</code>字段知道服务端支持的加密算法。</li></ol><p>有时无法一开始就做出相应的计算，并且在服务端支持的情况下，可以使用<code>Trailer</code>请求头在完成上传后再进行校验。<br>服务端可以在一开始<code>options</code>的<code>Tus-Extension</code>中添加<code>Checksum-Trailer</code>字段表示支持该功能。<br>比如对文件进行<code>md5</code>加密，需要对文件分片一一进行处理。</p><p>当上传校验失败时，服务端便会丢弃此分片，索引也不会发生改变。<br><img src="/images/基于Tus协议的文件上传流程/checksum-options-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/checksum-options-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/checksum-patch-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/checksum-patch-res.png" /></p><p>上述例子中</p><ul><li>服务端<code>options</code>响应中<code>Tus-Checksum-Algorithm: md5,sha1,crc32</code>展示了其支持的校验算法</li><li>前端<code>patch</code>请求<code>Upload-Checksum: sha1 Kq5sNclPz7QV2+lfQIuc6R7oRu0=</code>使用<code>sha1</code>算法。</li><li>服务端校验通过返回<code>204</code></li><li>若失败，则返回以下状态码(<code>400</code>: 算法不支持，<code>460</code>: 校验和不匹配)<br>官网上介绍<code>The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.</code><br>大概说上面的<code>Upload-Checksum</code>头由<code>sha1</code>算法和由<code>base64</code>编码的校验和组成，但是我不是太能理解这个，不管是使用base64解码或者用sha1解码似乎都无法解码出<code>Kq5sNclPz7QV2+lfQIuc6R7oRu0=</code>，如果有懂的大佬的话可以给解释解释😃。</li></ul><ol start="5"><li><p>Termination<br>文件删除<br>这个应该没什么好说的，就是向服务端请求删除文件信息。<br><img src="/images/基于Tus协议的文件上传流程/termination-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/termination-res.png" /></p></li><li><p>Concatenation<br>并行上传<br>对于一个大文件，如果是一个个分片串行上传，可能还是有点慢。<br><code>tus</code>支持可以实行并行上传，可以针对同一个文件资源在服务端生成多个上传地址，这样就可以同时上传文件的不同分片。<br>当然这也需要服务端支持。<br><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-req-1.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-res-1.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-req-2.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-res-2.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-patch-req-1.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-patch-res-1.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-patch-req-2.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-patch-res-2.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-req-4.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-post-res-4.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-head-req.png" /><br><img src="/images/基于Tus协议的文件上传流程/Concatenation-head-res.png" /></p></li></ol><p>上述例子中</p><ul><li>先是在开始时发送两个<code>post</code>请求并携带<code>Upload-Concat: partial</code>请求头，在服务端生成了两个上传地址<code>https://tus.example.org/files/a</code>和<code>https://tus.example.org/files/b</code></li><li>接着就可以同时在两个地址上传同一个文件，以此来提高效率。</li><li>当上传完所有分片后，发送<code>post</code>请求并携带<code>Upload-Concat: final;/files/a /files/b</code>，格式为<code>final;</code>加上上一步中生成的上传地址，以空格分隔。服务端响应合成路径<code>Location: https://tus.example.org/files/ab</code>告知前端文件的地址。  该顺序需要和<code>post</code>中返回的地址顺序一致，否则可能会导致服务端文件分片合并出错。</li><li>前端发送<code>head</code>请求，服务端接收到请求完成这个文件分片的合并。</li></ul><p>就我个人看法，<code>Tus</code>协议提供的是一种思想，让我们在文件上传任务中出现的任何情况都能得到相应的应对方法，完美完成整个上传流程。<br>所在上面所介绍的扩展，不严谨的讲，我们可以用自己的方法来实现，它的作用就是能让两端能更好的理解当前的文件的上传情况。<br>我们不必太过于拘泥于相应的api，只需要能让两端更好，更容易的协作就好。</p><p>还有，在我使用前端<code>tus</code>的<code>tus-js-client</code>工具时，检查<code>api</code>介绍以及粗略查找了下源码，看到它似乎对于<code>tus</code>扩展只实现了<code>Creation</code>、<code>Creation-With-Upload</code>、<code>Concatenation</code>这几个扩展，如果想使用其他扩展可能需要自行实现。<br>不过其他几个扩展的重点在后端，这也可能是它没有实现的原因。(也可能是我没看懂😝)</p><h2 id="结束">结束</h2><p>文件上传其中还有需要的知识，包括文件的分片，前端的文件处理方式以及关于文件的加密等。包括这里的<code>Tus</code>，也还有很多地方不是很理解，如果有哪里错了，先道个歉，欢迎各位给指正。–好好学习🐱。</p>]]></content>
    
    
    <categories>
      
      <category>文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tus upload file</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb常用操作符</title>
    <link href="/2020/10/18/mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <url>/2020/10/18/mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="MongoDB操作符">MongoDB操作符</h2><h3 id="MongoDB介绍">MongoDB介绍</h3><p><code>MongoDB</code> 是由<code>C++</code>语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>在高负载的情况下，添加更多的节点，可以保证服务器性能。<br><code>MongoDB</code> 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br><code>MongoDB</code> 将数据存储为一个文档，数据结构由键值(<code>key=&gt;value</code>)<code>对组成。MongoDB</code> 文档类似于 <code>JSON</code> 对象。字段值可以包含其他文档，数组及文档数组。<br>如下这种结构<br><img src="/images/mongodb常用操作符/mongodb-cover-page.png" /></p><h3 id="MongoDB命令行简单操作">MongoDB命令行简单操作</h3><p>假设存在数据库名称为<code>database</code><br>并且存在一个集合为<code>collection</code><br>集中<code>collection</code>中有如下数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Daniel&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">24</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;it&quot;</span>,<br>    <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;travel&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>    <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;travel&quot;</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ul><li><p>创建数据库或使用数据库<br><code>use database</code></p></li><li><p>删除数据库<br><code>db.dropDatabase()</code></p></li><li><p>查看数据库列表<br><code>show dbs</code></p></li><li><p>创建集合<br>执行<code>use</code>操作后<br><code>db.collection.opertion</code><br>没有创建集合的语法，直接对指定集合进行操作就会创建该集合</p></li><li><p>查看当前数据库的集合列表<br><code>show collections</code></p></li><li><p>删除集合<br><code>db.collection.drop()</code></p></li><li><p>查找</p></li></ul><ol><li>执行<code>find</code>命令<br><code>db.collection.find(&#123; hobby: &quot;travel&quot; &#125;)</code><br>得到以下结果<br><img src="/images/mongodb常用操作符/find-common.png"  /></li></ol><p><code>find</code>命令会找到符合查询条件的所有结果<br>可以在后面跟上<code>.pretty()</code>来让数据展示更美观。<br>后面跟<code>.count()</code>返回查找到的数量<br>后面跟<code>.sort()</code>返回排序后的数据<br>比如这样<code>db.collection.find(&#123; hobby: &quot;travel&quot; &#125;).sort(&#123; age: 1 &#125;)</code>，<code>1</code>表示升序，<code>2</code>降序</p><ol start="2"><li>执行<code>findOne</code>命令<br><code>db.collection.findOne(&#123; hobby: &quot;travel&quot; &#125;)</code><br><img src="/images/mongodb常用操作符/findOne.png"  /><br><code>findOne</code>只会找到符合条件的第一条</li></ol><ul><li>删除</li></ul><ol><li><p>执行<code>deleteOne</code>命令<br><code>db.collection.deleteOne(&#123; hobby: &quot;travel&quot; &#125;)</code><br>得到以下结果<br><img src="/images/mongodb常用操作符/deleteOne.png"  /><br><code>deleteOne</code>命令会删除符合查询条件的第一条数据</p></li><li><p>执行<code>deleteMany</code>命令<br><code>db.collection.deleteMany(&#123; hobby: &quot;travel&quot; &#125;)</code><br><code>deleteMany</code>命令会删除符合查询条件的所有数据</p></li></ol><ul><li>插入</li></ul><ol><li><p>执行<code>insertOne</code>命令<br><code>db.collection.insertOne(&#123; &quot;name&quot;: &quot;Rick&quot;, &quot;age&quot;: 32, &quot;job&quot;: &quot;teacher&quot;, &quot;hobby&quot;: &quot;sport&quot; &#125;)</code><br><code>insertOne</code>命令可以添加一条数据到集合中<br>他有一个可选参数<code>&#123; writeConcern &#125;</code>，写入策略，默认为 1，即要求确认写操作，0 是不要求。<br><img src="/images/mongodb常用操作符/insertOne.png"  /></p></li><li><p>执行<code>insertMany</code>命令</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.insertMany([<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>    <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;watch tv&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mary&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">8</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>    <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;book&quot;</span><br>  &#125;<br>])<br></code></pre></td></tr></table></figure><p><code>insertMany</code>允许同时插入多条数据到集合中<br>他有一个可选参数<code>&#123; writeConcern, ordered &#125;</code>，writeConcern意义同上，orderd表示是否按顺序写入，默认 true，按顺序写入。</p><ul><li>更新</li></ul><ol><li><p>执行<code>updateOne</code>命令<br><code>db.collection.updateOne(&#123; &quot;name&quot;: &quot;Mike&quot; &#125;, &#123; $set: &#123; &quot;age&quot;: 20 &#125; &#125;)</code><br><code>updateOne</code>命令可以更新匹配条件的第一条数据<br><img src="/images/mongodb常用操作符/updateOne.png"  /></p></li><li><p>执行<code>updateMany</code>命令<br><code>db.collection.updateMany(&#123; &quot;hobby&quot;: &quot;travel&quot; &#125;, &#123; &quot;hobby&quot;: &quot;watch tv&quot; &#125;)</code><br><code>updateMany</code>命令可以更新匹配条件的所有数据</p></li></ol><p>还有几个可选参数，可自行百度</p><h3 id="MongoDB操作符-2">MongoDB操作符</h3><p>接下来介绍的是<code>MongoDB</code>中一些常用的操作符，暂时将操作符分为更新和查找两类。</p><h4 id="更新操作符">更新操作符</h4><h5 id="inc">$inc</h5><p>对一个字段增加指定数量，且字段的值类型为数字</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$inc&quot;</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">100</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当然可以通过指定数字值为<code>负数</code>实现递减操作。<br><img src="/images/mongodb常用操作符/$inc.png"  /></p><h5 id="set">$set</h5><p>这是相当常见的操作符，表示设置指定的<code>key</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$set&quot;</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">1000</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述将<code>name</code>为<code>Mike</code>的字段的<code>age</code>字段设置为<code>1000</code><br>如果<code>key</code>不存在的话则创建<br>当然也可以同时设置多个值，但是需要注意的是如果修改的值之前是一个对象或一个数组的话会整个覆盖掉该值。具体的修改方法可以参照下方的具体实例。<br><img src="/images/mongodb常用操作符/$set.png"  /></p><h5 id="unset">$unset</h5><p>将某一个字段删除</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$unset&quot;</span>: &#123; <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述将<code>name</code>为<code>Mike</code>的字段的<code>hobby</code>字段删除，如果不存在该字段则不进行操作<br><img src="/images/mongodb常用操作符/$unset.png"  /></p><h5 id="push">$push</h5><p>对某一字段进行内容追加，只能对数组字段进行操作(否则会报错)，不存在则直接设置为<code>空数组</code>并添加</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$push&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: <span class="hljs-string">&quot;book&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述将<code>name</code>为<code>Mike</code>的字段的<code>like</code>字段设置为<code>[ &quot;book&quot; ]</code><br><img src="/images/mongodb常用操作符/$push.png"  /></p><h5 id="pushAll">$pushAll</h5><p>类似上面的<code>$push</code>操作符，但是接收的值时一个<code>数组</code>，表示可同时追加多个值，同样是对数组字段进行操作</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$pushAll&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: [ <span class="hljs-string">&quot;tv&quot;</span>, <span class="hljs-string">&quot;sport&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述紧接前面的操作，向<code>like</code>字段中继续追加了<code>tv</code>和<code>sport</code><br>不过似乎在高版本<code>mongodb</code>已经取消了这个操作符，有待考证。</p><h5 id="addToSet">$addToSet</h5><p>类似上面的<code>$pushAll</code>操作符，不同的是，当且仅当该值在字段中<code>不存在</code>时添加，相当于是自动做了去重。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$addToSet&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: [ <span class="hljs-string">&quot;tv&quot;</span>, <span class="hljs-string">&quot;hamberger&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>继续上面的<code>like</code>添加数据，因为上面添加过<code>tv</code>字段，所以再次添加被忽略<br>当然此操作符添加的值不一定是数组，也可以这样<br><code>$addToSet: &#123; &quot;like&quot;: &quot;hamberger&quot; &#125;</code><br><img src="/images/mongodb常用操作符/$addToSet.png"  /></p><h5 id="pop">$pop</h5><p>与<code>$pop</code>操作符相反，表示删除指定字段的第一个或最后一个值，同样只能是数组</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$pop&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: <span class="hljs-number">1</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述表示删除<code>like</code>字段的最后一个值。<br><code>1</code>表示最后一个值，<code>-1</code>表示第一个值<br><img src="/images/mongodb常用操作符/$pop.png"  /></p><h5 id="pull">$pull</h5><p>表示从某一字段中删除指定的值，针对数组</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$pull&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: <span class="hljs-string">&quot;hamberger&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述将<code>name</code>为<code>Mike</code>的字段的<code>like</code>数组中的<code>hamberger</code>字段删除<br><img src="/images/mongodb常用操作符/$pull.png"  /></p><h5 id="pullAll">$pullAll</h5><p>类似<code>$pull</code>操作符，不同的是可以同时删除多个值</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-string">&quot;$pullAll&quot;</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: [ <span class="hljs-string">&quot;hamberger&quot;</span>, <span class="hljs-string">&quot;book&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述删除了<code>name</code>为<code>Mike</code>字段的<code>like</code>中的<code>hamberger</code>和<code>book</code><br><img src="/images/mongodb常用操作符/$pullAll.png"  /></p><h5 id="rename">$rename</h5><p>这个操作符表示对之前设置过的字段进行重命名，设置的是<code>key</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.updateOne(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>&#125;, &#123;<br>  <span class="hljs-attr">$rename</span>: &#123; <span class="hljs-string">&quot;like&quot;</span>: <span class="hljs-string">&quot;dislike&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述将<code>like</code>字段修改为了<code>dislike</code>名称。<br><img src="/images/mongodb常用操作符/$rename.png"  /></p><h4 id="查找操作符">查找操作符</h4><p>下面介绍的，是常用的查询操作符🌰</p><h5 id="all">$all</h5><p>查找字段中包含指定内容的值，且需要包含全部指定的值，针对数组型字段</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;like&quot;</span>: &#123; <span class="hljs-string">&quot;$all&quot;</span>: [ <span class="hljs-string">&quot;hamberger&quot;</span>, <span class="hljs-string">&quot;book&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述能查找到<code>name</code>为<code>Mike</code>字段，但是无法查找到其他字段，因为他们无法完全满足查询条件。<br><img src="/images/mongodb常用操作符/$all.png"  /></p><h5 id="gt">$gt</h5><p>查找大于(great then)指定值的字段</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$gt&quot;</span>: <span class="hljs-number">18</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>age</code>大于<code>18</code>的字段，不包含<code>18</code><br><code>日期</code>也可直接那这个进行比较<br><img src="/images/mongodb常用操作符/$gt.png"  /></p><h5 id="gte">$gte</h5><p>表示不小于指定值，也就是大于等于</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$gte&quot;</span>: <span class="hljs-number">20</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>age</code>不小于<code>20</code>的字段，所以包括等于<code>20</code>的字段<br><img src="/images/mongodb常用操作符/$gte.png"  /></p><h5 id="lt">$lt</h5><p>与上面的<code>$gt</code>操作符相反，表示小于(less then)指定值</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$lt&quot;</span>: <span class="hljs-number">20</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>age</code>小于<code>20</code>的字段，且不包含<code>20</code><br><img src="/images/mongodb常用操作符/$lt.png"  /></p><h5 id="lte">$lte</h5><p>表示不大于指定值，也就是小于等于</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: &#123; <span class="hljs-string">&quot;$lte&quot;</span>: <span class="hljs-number">18</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>age</code>小于<code>18</code>的字段，且包含<code>18</code><br><img src="/images/mongodb常用操作符/$lte.png"  /></p><h5 id="in">$in</h5><p>查找存在指定数组中值得项，与<code>$all</code>不同的是，字段只需要满足其中任意一项即可</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$in&quot;</span>: [ <span class="hljs-number">18</span>, <span class="hljs-number">20</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述可以找到所有在<code>age</code>字段等于<code>18</code>或<code>20</code>的数据<br><img src="/images/mongodb常用操作符/$in.png"  /></p><h5 id="nin">$nin</h5><p>与上面的<code>$in</code>操作符相反，表示查找不存在指定数组中的值的项</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;like&quot;</span>: &#123; <span class="hljs-string">&quot;$nin&quot;</span>: [ <span class="hljs-string">&quot;tv&quot;</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>like</code>字段中不存在<code>tv</code>的项<br><img src="/images/mongodb常用操作符/$nin.png"  /></p><h5 id="ne">$ne</h5><p>有相等就会有不相等，这个操作符就是查找不等于指定值得项，相当于只有一项的<code>$nin</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;like&quot;</span>: &#123; <span class="hljs-string">&quot;$ne&quot;</span>: <span class="hljs-string">&quot;book&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>like</code>字段中不存在<code>book</code>的项<br><img src="/images/mongodb常用操作符/$ne.png"  /></p><h5 id="and">$and</h5><p>查找同时满足所有指定条件的项，并且至少需要包含<strong>两个</strong>条件</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;$and&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>name</code>为<code>Mike</code>并且<code>age</code>为<code>20</code>的字段<br><img src="/images/mongodb常用操作符/$and.png"  /></p><h5 id="nor">$nor</h5><p>与上面的<code>$and</code>相反，表示查找同时不满足所有指定条件的项，同样至少需要包含<strong>两个</strong>条件</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;$nor&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>name</code>不为<code>Mike</code>并且<code>age</code>不等于<code>18</code>的数据<br><img src="/images/mongodb常用操作符/$nor.png"  /></p><h5 id="not">$not</h5><p>指定不能满足指定条件的数据项，此操作符只能包含<strong>一个</strong>条件，而且它无法单独完成查询，需要与其他操作符配合一起使用。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;$not&quot;</span>: &#123; <span class="hljs-string">&quot;$gt&quot;</span>: <span class="hljs-number">18</span> &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>age</code>字段小于等于<code>18</code>的数据项，当然像例子这样的情况也可以直接使用<code>$lte</code>操作符完成。<br><img src="/images/mongodb常用操作符/$not.png"  /></p><h5 id="or">$or</h5><p>表示查找能至少满足<strong>一个</strong>条件的项，并且需要至少包含<strong>两个</strong>筛选条件</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;$or&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述表示查找<code>name</code>为<code>Mike</code>或者<code>age</code>为<code>20</code>的数据项<br><img src="/images/mongodb常用操作符/$or.png"  /></p><h5 id="exists">$exists</h5><p>此操作符用于字段的<code>key</code>的判断，表示查找是否存在否字段<code>key</code>的数据项，可选值为<code>true</code>和<code>false</code>，选择<strong>true</strong>表示存在，<strong>false</strong>则不存在指定字段的项</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: &#123; <span class="hljs-string">&quot;$exists&quot;</span>: <span class="hljs-literal">true</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找存在<code>name</code>字段的数据项<br><img src="/images/mongodb常用操作符/$exists.png"  /></p><h5 id="mod">$mod</h5><p>表示查找满足计算结果的数据项，此操作符为取模</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;age&quot;</span>: &#123; <span class="hljs-string">&quot;$mod&quot;</span>: [ <span class="hljs-number">3</span>, <span class="hljs-number">0</span> ] &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述表示<code>age</code>字段的值对3取模等于0的值。<br><img src="/images/mongodb常用操作符/$mod.png"  /></p><h5 id="type">$type</h5><p>表示选择指定数据类型的数据项</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: &#123; <span class="hljs-string">&quot;$type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>name</code>字段值类型为<code>string</code>的数据项<br>此操作符表示能查找对应的数据类型的数据项，它也有对应的代码，如下所示</p><blockquote><p>Double: 1<br>String<br>Object3<br>Array4<br>Binary data5<br>Undefined6已废弃。<br>Object id7<br>Boolean8<br>Date9<br>Null10<br>Regular Expression11<br>JavaScript13<br>Symbol14<br>JavaScript (with scope)15<br>32-bit integer16<br>Timestamp17<br>64-bit integer18<br>Min key255Query with -1.<br>Max key127<br><img src="/images/mongodb常用操作符/$type.png"  /></p></blockquote><h5 id="regex">$regex</h5><p>就是字面意思，使用正则表达式来匹配字段</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: &#123; <span class="hljs-string">&quot;$regex&quot;</span>: <span class="hljs-regexp">/mike/</span>, <span class="hljs-string">&quot;$options&quot;</span>: <span class="hljs-string">&quot;i&quot;</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述匹配<code>name</code>字段值包含<code>mike</code>（不区分大小写是因为配置了<code>$options</code>）的数据项<br><code>$options</code>表示正则表达式的修饰符，其他的还有<code>i</code>(不区分大小写),<code>g</code>(全局匹配),<code>m</code>(多行匹配),<code>s</code>(.包含换行符<code>\n</code>)<br>当然直接使用正则表达式也是可以的。<br><img src="/images/mongodb常用操作符/$regex.png"  /></p><h5 id="where">$where</h5><p>有些情况下普通方法很难做出筛选，可以使用此操作符用<code>javascript</code>语法来进行筛选</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.collection.find(&#123;<br>  <span class="hljs-string">&quot;$where&quot;</span>: <span class="hljs-string">&quot;this.name=&#x27;Jack&#x27;&amp;&amp;this.like.some(key =&gt; key == &#x27;hamberger&#x27;)&quot;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>上述查找<code>name</code>为<code>Jack</code>且<code>like</code>字段包含<code>hamberger</code>值得数据项<br>它甚至可以直接写一个函数<code>&#123; function() &#123; return this.name == 'Jack' &amp;&amp; this.like.some(key =&gt; key == 'hamberger') &#125; &#125;</code><br><strong>注意</strong><br>虽然这种方法可以有效的解决一些问题，但是还是尽量不要使用这个操作符，因为它会将MongoDB里面保存的BSON数据变为JavaScript的语法结构，这样的方式不方便使用数据库的索引机制。<br><img src="/images/mongodb常用操作符/$where.png"  /></p><h5 id="elemMatch">$elemMatch</h5><p>此操作符用于对类似一个嵌套数组对象来进行多条件的查询<br><img src="/images/mongodb常用操作符/$elemMatch.png"  /><br>上述查找了<code>like</code>字段数组中<code>type</code>为<code>eat</code>并且<code>target</code>为<code>hamberger</code>的数据项</p><h5 id="slice">$slice</h5><p>将数据中的数组字段做切割，选出一段选区</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 基本查询</span><br>db.collection.find(&#123;&#125;, &#123;<br>  <span class="hljs-attr">like</span>: &#123;<br>    <span class="hljs-attr">$slice</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>  &#125;<br>&#125;)<br><span class="hljs-comment">//聚合查询</span><br>db.collection.aggregate([<br>  &#123;<br>    <span class="hljs-attr">$project</span>: &#123;<br>      <span class="hljs-attr">like</span>: &#123;<br>        <span class="hljs-attr">$slice</span>: [ <span class="hljs-string">&quot;$like&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span> ]<br>      &#125;<br>    &#125;<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><p>以上两种方法都能取出对应的数组项的第一条，两个数字分别代表：起始的索引、切割的数量</p><ul><li>基本查询<br><img src="/images/mongodb常用操作符/$slice-normal.jpg"  /></li><li>聚合查询<br><img src="/images/mongodb常用操作符/$slice-aggregate.jpg" /></li></ul><h3 id="相关实例">相关实例</h3><p>讲完了操作符，这里简单讲几个之前在实践当中碰到的一些问题，以及解决方法，欢迎各位参考。</p><h5 id="查找或修改数组中嵌套的对象的属性">查找或修改数组中嵌套的对象的属性</h5><p>假设<code>database</code>的<code>collection</code>中存在以下数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Mike&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;student&quot;</span>,<br>    <span class="hljs-string">&quot;like&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;eat&quot;</span>,<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;hamberger&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;sport&quot;</span>,<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;running&quot;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">50</span>,<br>    <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;teacher&quot;</span>,<br>    <span class="hljs-string">&quot;like&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;eat&quot;</span>,<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;vegetable&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;sport&quot;</span>,<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;baseball&quot;</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>普通情况下无法直接选中对应数组对象的属性，但是<code>mongodb</code>中支持<code>.</code>来选择数组对象中的属性</p><ul><li><p><code>parent_field.child_field</code><br>比如像上面的<code>like</code>字段选择<code>target=vegetable</code><br><code>db.collection.find(&#123; &quot;like.target&quot;: &quot;vegetable&quot; &#125;)</code><br><img src="/images/mongodb常用操作符/数组对象嵌套查询.png"  /></p><h5 id="修改多层嵌套的数组对象">修改多层嵌套的数组对象</h5></li></ul><p>有时候不止会有一层嵌套，多层嵌套上面的方法不适用，虽然这种存储方式不太常见，但是也可以解决<br>假设有如下的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack&quot;</span>,<br>    <span class="hljs-string">&quot;like&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;eat&quot;</span>,<br>        <span class="hljs-attr">target</span>: [<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hamberger&quot;</span>,<br>            <span class="hljs-attr">price</span>: <span class="hljs-number">100</span><br>          &#125;,<br>          &#123; <br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;salad&quot;</span>,<br>            <span class="hljs-attr">price</span>: <span class="hljs-number">200</span><br>          &#125;<br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>]<br><br><span class="hljs-comment">//执行更新操作</span><br>db.collection.updateOne(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Jack&quot;</span> &#125;, &#123; <span class="hljs-attr">$set</span>: &#123; <span class="hljs-string">&quot;like.$[stepone].target.$[steptwo].price&quot;</span> : <span class="hljs-number">200</span> &#125; &#125;, &#123;<br> <span class="hljs-attr">arrayFilters</span>: [<br>  &#123;<br>   <span class="hljs-string">&quot;stepone&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;$type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>   &#125;,<br>   <span class="hljs-string">&quot;stepone.type&quot;</span>: <span class="hljs-string">&quot;eat&quot;</span> <br>  &#125;,<br>  &#123;<br>   <span class="hljs-string">&quot;steptwo&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;$type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span><br>   &#125;<br>  &#125;<br> ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>上述操作是选择上面数据中<code>like</code>字段的<code>type</code>为<code>eat</code>并且<code>target</code>数组中的<code>name</code>为<code>hamberger</code>的价格<code>price</code>改成了200<br><code>updateOne</code>的第三个参数用户定义第二参数中用到的嵌套名称的筛选条件，并且它的名称定义为<strong>以小写字母开头的字母数字字符串</strong></p><h3 id="结束">结束</h3><p><code>MongoDB</code>的操作符以及命令远不止这些，有兴趣的可以自行去MongoDB官网查找学习，本人也会在后续的实践学习中继续更新。😸</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>database</tag>
      
      <tag>mongodb</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chai</title>
    <link href="/2020/08/28/Chai/"/>
    <url>/2020/08/28/Chai/</url>
    
    <content type="html"><![CDATA[<h2 id="Chai介绍">Chai介绍</h2><p>Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。<br>本文介绍的Chai下的expect/should风格属于BDD(行为驱动开发)<br>因为本身语法相对简单，所以本文是类似于api的中文文档，其中有许多不足，见谅。</p><h2 id="正片开始">正片开始</h2><ul><li><code>to</code></li><li><code>be</code></li><li><code>been</code></li><li><code>is</code></li><li><code>that</code></li><li><code>which</code></li><li><code>and</code></li><li><code>has</code></li><li><code>have</code></li><li><code>with</code></li><li><code>at</code></li><li><code>of</code></li><li><code>same</code><br>以上仅做语义化用，无实际作用</li></ul><h3 id="具体api介绍">具体api介绍</h3><p><span id="top"></span></p><ul><li><a href="#not">not</a><br>对之后的断言取反</li><li><a href="#deep">deep</a><br>针对对象、数组等进行深层次的键值对判断</li><li><a href="#any">any</a><br>与<code>keys</code>一同使用时表示至少满足一项</li><li><a href="#all">all</a><br>与keys一同使用时表示至少全部满足</li><li><a href="#a">a | an</a><br>既可做链式调用也可做断言</li><li><a href="#include">include | contains</a><br>是否包含指定的值 既可做链式调用也可做断言</li><li><a href="#nested">nested</a><br>用于在<code>property</code>、<code>include</code>等用<code>.</code>语法获取深层次属性</li><li><a href="#ok">ok</a><br>真值</li><li><a href="#true">true</a><br>true</li><li><a href="#false">false</a><br>false</li><li><a href="#null">null</a><br>null</li><li><a href="#undefined">undefined</a><br>undefined</li><li><a href="#NaN">NaN</a><br>NaN</li><li><a href="#exist">exist</a><br>非null 非undefined</li><li><a href="#finite">finite</a><br>非<code>NaN</code> 非<code>Infinity</code></li><li><a href="#empty">empty</a><br>判断值长度为<code>0 [] '' &#123;&#125;</code></li><li><a href="#arguments">arguments</a><br>是否为arguments对象</li><li><a href="#equal">equal</a><br><code>===</code></li><li><a href="#eql">eql</a><br>相当于<code>deep</code>和<code>equal</code>的简写</li><li><a href="#above">above</a><br>大于</li><li><a href="#least">least</a><br>大于等于</li><li><a href="#below">below</a><br>小于</li><li><a href="#most">most</a><br>小于等于</li><li><a href="#within">within</a><br>区间内(数字)</li><li><a href="#instanceof">instanceof</a><br>是否为该实例</li><li><a href="#property">property</a><br>是否拥有指定属性</li><li><a href="#ownProperty">ownProperty</a><br>是否拥有自身的属性</li><li><a href="#ownPropertyDescriptor">ownPropertyDescriptor</a><br>属性描述对象</li><li><a href="#lengthOf">length</a><br>length属性</li><li><a href="#lengthOf">lengthOf</a><br>是否为指定长度值</li><li><a href="#match">match</a><br>是否匹配指定正则</li><li><a href="#string">string</a><br>是否包含指定字符串</li><li><a href="#keys">keys</a><br>配合其他字段使用，是否包含或不包含指定的key</li><li><a href="#throw">throw</a><br>是否抛出指定错误或字符串或匹配指定错误信息</li><li><a href="#respondTo">respondTo</a><br>断言是否会响应一个方法</li><li><a href="#itself">itself</a><br>配合<code>respondTo</code>用来判断是否为自身的方法</li><li><a href="#satisfy">satisfy</a><br>返回一个函数且参数为目标值且返回值为<code>boolean</code>，用来指定是否通过检测</li><li><a href="#closeTo">closeTo</a><br>判断值是否在期望值接收范围内</li><li><a href="#members">members</a><br>类似于<code>contains</code>、<code>include</code>，但是能接收数组，主语只能是数组</li><li><a href="#oneOf">oneOf</a><br>判断值是否出现在指定数组中</li><li><a href="#change">change</a><br>判断方法是否会改变指定对象的指定属性的值</li><li><a href="#increase">increase</a><br>判断方法是否会增加指定对象的属性的值</li><li><a href="#decrease">decrease</a><br>判断方法是否会减少指定对象的属性的值</li><li><a href="#extensible">extensible</a><br>判断指定值是否可扩展(可以添加新属性)</li><li><a href="#sealed">sealed</a><br>判断指定值是否封闭(不可添加新属性、不可删除旧属性、可修改旧属性)</li><li><a href="#frozen">frozen</a><br>判断值是否冻结(不可添加新属性、不可删除旧属性、不可修改旧属性)</li><li><a href="#own">own</a><br>判断值是否拥有指定的属性，不包含上层属性</li><li><a href="#by">by</a><br>配合<code>descrease</code> 或 <code>increase</code>、 <code>change</code>等来判断断言值是否发生变化在指定范围内</li><li><a href="#fail">fail</a><br>判断是否会失败</li><li><a href="#ordered">ordered</a><br>配合<code>members</code>用于指定<code>members</code>参数数组的顺序与主语数组的顺序一致</li></ul><p><span id="not"></span></p><p><strong>.not</strong><br>对之后的断言取反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;).to.not.equal(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.not.have.a.keys(<span class="hljs-string">&#x27;b&#x27;</span>)<br>expect([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]).to.be.not.lengthOf(<span class="hljs-number">3</span>)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.length.not.within(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="deep"></span></p><p><strong>.deep</strong><br>普通的对象或数组比较是比较它们的整体是否相等。<br>比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.not.equal(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.not.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.deep.equal(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.deep.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125; &#125; &#125;).to.be.deep.equal(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125; &#125; &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.have.nested.deep.property(<span class="hljs-string">&#x27;a.b&#x27;</span>)<br></code></pre></td></tr></table></figure><p>相当于是严格相等 <code>===</code><br><a href="#top">顶</a></p><p><span id="any"></span></p><p><strong>.any</strong><br>与<code>keys</code>使用时至少满足一项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]).to.have.any.keys(<span class="hljs-number">0</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> &#125;).to.have.any.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="all"></span></p><p><strong>.all</strong><br>与<code>any</code>类似，但是至少满足所有项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]).to.has.all.keys(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>expect([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]).to.not.has.all.keys(<span class="hljs-number">0</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> &#125;).to.has.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;).to.not.has.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br></code></pre></td></tr></table></figure><p>需要注意的是，如上最后一条断言所示，当<code>all</code>和<code>keys</code>一同使用时，断言对象的<code>key</code>必须和<code>keys</code>完全一样才能通过<br><a href="#top">顶</a></p><p><span id="a"></span></p><p><strong>.a .an</strong><br>既可以用做链式判断也可用于断言<br>用作判断时无实际作用，仅用于语义化<br>用做断言时用于判断值是否为某一类型<br>方法<code>type a = (type: 'string' | 'object' | 'null' | 'undefined' | 'array' | 'number' | 'symbol' | 'error' | 'promise'/*还有别的类型...*/, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.a(<span class="hljs-string">&#x27;number&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span> &#125;).to.has.a.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(<span class="hljs-built_in">Symbol</span>()).to.be.a(<span class="hljs-string">&#x27;symbol&#x27;</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>()).to.be.a(<span class="hljs-string">&#x27;error&#x27;</span>)<br><span class="hljs-comment">//自定义类型</span><br><span class="hljs-keyword">const</span> object = &#123;<br>  [<span class="hljs-built_in">Symbol</span>.toStringTag]: <span class="hljs-string">&#x27;diyObj&#x27;</span><br>&#125;<br>expect(object).to.be.a(<span class="hljs-string">&#x27;diyObj&#x27;</span>)<br><span class="hljs-comment">//继续断言</span><br>expect(<span class="hljs-number">100</span>).to.be.a(<span class="hljs-string">&#x27;number&#x27;</span>).and.to.equal(<span class="hljs-number">100</span>)<br><span class="hljs-comment">//自定义错误信息</span><br>expect(<span class="hljs-number">100</span>).to.be.a(<span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;it is not impossible&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>可用于自定义类型进行判断，如上使用<code>Symbol.toStringTag</code>进行自定义类型定义</li><li>由<code>a</code>和<code>an</code>断言会返回断言的值，可以继续做链式调用继续做其他判断</li><li><code>a</code>和<code>an</code> 有可选的第二参数可以指定出错时的错误信息<br><a href="#top">顶</a></li></ul><p><span id="include"></span></p><p><strong>.include .contains</strong><br>用于判断断言值是否包含某个指定的值，但是只能指定一个值<br><code>includes</code> 、 <code>contains</code> <code>contain</code> 同义<br>既可以用做链式判断也可用于断言<br>方法 <code>type include = (value: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字符串包含</span><br>expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.be.include(<span class="hljs-string">&#x27;iel&#x27;</span>)<br><span class="hljs-comment">//数组</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.a(<span class="hljs-string">&#x27;array&#x27;</span>).and.include(<span class="hljs-number">1</span>)<br><span class="hljs-comment">//严格相等</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>]).to.not.be.include(<span class="hljs-number">2</span>)<br><span class="hljs-comment">//对象</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;).to.be.include(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">//map值包含</span><br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])).to.be.include(<span class="hljs-number">2</span>)<br><span class="hljs-comment">//set值包含</span><br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])).to.be.include(<span class="hljs-number">3</span>)<br><span class="hljs-comment">//深层次严格相等</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.not.include(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.deep.include(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.nested.deep.include(&#123; <span class="hljs-string">&#x27;a.b&#x27;</span>: <span class="hljs-number">2</span> &#125;)<br><span class="hljs-comment">//自定义断言错误信息</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.not.include(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;it is not impossible&#x27;</span>)<br><span class="hljs-comment">//配合members链式调用</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.include.members([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><span class="hljs-comment">//配合keys</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;).to.be.include.any.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;).to.be.include.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-comment">//对象可以获取上层属性</span><br><span class="hljs-built_in">Object</span>.prototype.say = <span class="hljs-string">&#x27;Daniel&#x27;</span><br>expect(&#123;&#125;).to.be.include(&#123; <span class="hljs-attr">say</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span> &#125;).but.not.own.include(&#123; <span class="hljs-attr">say</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span> &#125;)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="nested"></span></p><p><strong>.nested</strong><br>用于在<code>property</code>、<code>include</code>等用<code>.</code>语法获取深层次属性<br>有时候对于深层次的对象或数组无法直接判断该内容，可以通过<code>nested</code>来实现深层次的值获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//深层次嵌套获取</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">1</span> &#125; &#125; &#125;).to.be.nested.have.a.property(<span class="hljs-string">&#x27;a.b.c&#x27;</span>)<br><span class="hljs-comment">//转义</span><br>expect(&#123; <span class="hljs-string">&#x27;.a&#x27;</span>: &#123; <span class="hljs-string">&#x27;..b&#x27;</span>: &#123; <span class="hljs-string">&#x27;[c]&#x27;</span>: <span class="hljs-number">1</span> &#125; &#125; &#125;).to.be.nested.have.a.property(<span class="hljs-string">&#x27;\\.a.\\.\\.b.\\[c\\]&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="ok"></span></p><p><strong>.ok</strong><br>表示真值，如<code>true</code> <code>[]</code> <code>&#123;&#125;</code>等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect([]).to.be.ok<br>expect(&#123;&#125;).to.be.ok<br><span class="hljs-comment">//自定义错误信息</span><br>expect(<span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;it is not impossible&#x27;</span>).to.be.not.ok<br></code></pre></td></tr></table></figure><p>一般情况下不太需要使用此属性<br>关于其他象征性的值直接使用对应的属性就可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">0</span>).to.be.equal(<span class="hljs-number">0</span>)<br>expect(<span class="hljs-literal">true</span>).to.be.true<br>expect(<span class="hljs-literal">null</span>).to.be.null<br>expect(<span class="hljs-literal">undefined</span>).to.be.undefined<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="true"></span></p><p><strong>.true</strong><br>同上表示真值，但不进行类型转换，所以只有<code>true</code>能通过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-literal">true</span>).to.be.true<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="false"></span></p><p><strong>false</strong><br>与<code>true</code>相反，表示假值，不进行类型转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-literal">false</span>).to.be.false<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="null"></span></p><p><strong>.null</strong><br>用于判断值是否为<code>null</code>值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-literal">false</span>).to.be.false<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="undefined"></span></p><p><strong>.undefined</strong><br>用于判断值是否为<code>undefined</code>值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-literal">undefined</span>).to.be.undefined<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="NaN"></span></p><p><strong>.NaN</strong><br>用于判断值是否为<code>NaN</code>值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//不推荐使用这个方法比较字符串等，可以直接使用equal</span><br><span class="hljs-comment">//expect(&#x27;Daniel&#x27;).to.be.NaN</span><br>expect(<span class="hljs-number">100</span>).to.be.not.NaN<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="exist"></span></p><p><strong>.exist</strong><br>用于判断值是否存在，即非<code>null</code> 且 非<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.exist<br>expect(<span class="hljs-literal">null</span>).to.be.not.exist<br>expect([]).to.be.exist<br>expect(<span class="hljs-literal">undefined</span>).to.be.not.exist<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="finite"></span></p><p><strong>.finite</strong><br>表示有限数组，即非<code>NaN</code> 且 非<code>Infinity</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">200</span>).to.be.finite<br>expect(<span class="hljs-literal">Infinity</span>).to.be.not.finite<br>expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.be.not.finite<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="empty"></span></p><p><strong>.empty</strong><br>判断值得长度是否为<code>0</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字符串的长度</span><br>expect(<span class="hljs-string">&#x27;&#x27;</span>).to.be.empty<br><span class="hljs-comment">//数组长度</span><br>expect([]).to.be.empty<br><span class="hljs-comment">//对象则是判断可枚举的属性的数量(Object.keys(obj).length)</span><br>expect(&#123;&#125;).to.be.empty<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="arguments"></span></p><p><strong>.arguments</strong><br>判断值是否为<code>arguments</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-built_in">arguments</span>).to.be.arguments<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="equal"></span></p><p><strong>.equal</strong><br>判断值是否严格相等，相当于<code>===</code><br><code>type equal = (value: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//比较值的相等</span><br>expect(<span class="hljs-number">1</span>).to.be.equal(<span class="hljs-number">1</span>)<br><span class="hljs-comment">//数组和对象则无法严格相等</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.not.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment">//数组和对象比较可以用之前介绍的deep</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.deep.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.deep.equal(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">//自定义错误提示信息</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.not.equal([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;it is not impossible&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="eql"></span></p><p><strong>.eql</strong><br>可以当做是<code>deep</code> 和 <code>equal</code>的组合<br><code>type eql = (value: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//数组对象等值内容相等</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.eql([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.eql(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">//继续断言</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.eql(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).and.not.be.empty<br></code></pre></td></tr></table></figure><ul><li>如上所例🌰，eql返回值本身，可以继续向后做断言<br><a href="#top">顶</a></li></ul><p><span id="above"></span></p><p><strong>.above</strong><br>判断值是否<code>大于</code>指定值<br><code>type above = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.above(<span class="hljs-number">10</span>)<br>expect(<span class="hljs-number">100</span>).to.be.not.above(<span class="hljs-number">101</span>)<br></code></pre></td></tr></table></figure><ul><li>对于字符串，数组等长度的比较建议直接使用<code>lengthOf</code><br><a href="#top">顶</a></li></ul><p><span id="least"></span></p><p><strong>.least</strong><br>判断值是否<code>不小于（大于等于）</code>指定值<br><code>type least = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.least(<span class="hljs-number">100</span>)<br>expect(<span class="hljs-number">100</span>).to.be.least(<span class="hljs-number">99</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><strong>.below</strong><br>判断值是否<code>小于</code>指定值<br><code>type below = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.below(<span class="hljs-number">101</span>)<br>expect(<span class="hljs-number">100</span>).to.be.not.below(<span class="hljs-number">99</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="most"></span></p><p><strong>.most</strong><br>判断值是否<code>不大于（小于等于）</code>指定值<br><code>type most = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-number">100</span>).to.be.most(<span class="hljs-number">100</span>)<br>expect(<span class="hljs-number">100</span>).to.be.most(<span class="hljs-number">101</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="within"></span></p><p><strong>.within</strong><br>判断值是否在指定区间内<br><code>type within = (start: number, end: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//包含开始和结束</span><br>expect(<span class="hljs-number">100</span>).to.be.within(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.have.a.lengthOf.within(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.have.a.lengthOf.within(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><ul><li>不推荐使用该方法，因为它能够实现的测试基本都可以通过<code>equal</code>或是<code>lengthOf</code>来实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//使用equal和lengthOf实现测试</span><br>expect(<span class="hljs-number">100</span>).to.be.equal(<span class="hljs-number">100</span>)<br>expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.have.a.lengthOf(<span class="hljs-number">6</span>)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.have.a.lengthOf(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="instanceof"></span></p><p><strong>.instanceof</strong><br>判断值是否为指定值的实例<br><code>type instanceof = (constructor: object, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">const</span> father = <span class="hljs-keyword">new</span> Father()<br>expect(father).to.be.instanceof(Father)<br>expect([]).to.be.instanceof(<span class="hljs-built_in">Array</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">100</span>)).to.be.instanceof(<span class="hljs-built_in">Number</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;Daniel&#x27;</span>)).to.be.instanceof(<span class="hljs-built_in">String</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="property"></span></p><p><strong>.property</strong><br>判断值是否包含指定属性<br><code>type property = (key: string, value?: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//简单判断是否拥有该属性</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-comment">//并且判断是否为该值</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.property(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>)<br><span class="hljs-comment">//针对深层次的值比较需要 deep 参与</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125; &#125;).to.be.not.have.a.property(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;)<br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125; &#125;).to.be.have.a.deep.property(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">//配合 own 用于判断是否为当前所有的实例实行</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.property(<span class="hljs-string">&#x27;toString&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.a.own.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.not.have.a.own.property(<span class="hljs-string">&#x27;toString&#x27;</span>)<br><span class="hljs-comment">//配合 nested 进行深层次的比较</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.have.nested.deep.property(<span class="hljs-string">&#x27;a.b&#x27;</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="own"></span></p><p><strong>.own</strong><br>判断值是否拥有指定的属性，不包含上层属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//结合property使用</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.own.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.not.have.own.property(<span class="hljs-string">&#x27;toString&#x27;</span>)<br><span class="hljs-comment">//配合 deep 和 property进行深层次的比较</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;).to.be.have.own.deep.property(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="ownProperty"></span></p><p><strong>.ownProperty</strong><br>判断是否为本身属性，相当于是 <code>.own.property</code>的结合<br><code>type ownProperty = (key: string, value?: any, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.own.property(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.ownProperty(<span class="hljs-string">&#x27;a&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="ownPropertyDescriptor"></span></p><p><strong>.ownPropertyDescriptor</strong><br>类似于上面的方法，用于判断是否为本身的属性<br>但是它可以传递第二参数，表示该属性的描述对象，不知道什么是描述对象的自行百度<br><code>type ownPropertyDescriptor = (key: string, value?: &#123; get?: (undifiend || () =&gt; any)=undefined, set?: (undefined || () =&gt; any)=undefined, configurable?: boolean=false, enumerable?: boolean=false, value?: any=undefined, writable?: boolean=false &#125;, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> object = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> descriper = &#123;<br>  <span class="hljs-comment">//是否可枚举</span><br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//值</span><br>  <span class="hljs-comment">//value: &#x27;hello world&#x27;,</span><br>  <span class="hljs-comment">//是否可写</span><br>  <span class="hljs-comment">//writable: false,</span><br>  <span class="hljs-comment">//是否可修改描述符对象</span><br>  <span class="hljs-comment">//注意如果设置为false，后续将无法再修改其描述对象</span><br>  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">//获取值拦截</span><br>  <span class="hljs-comment">//设置了拦截就不能设置writable和value</span><br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I love China&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">//设置值拦截</span><br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value<br>  &#125;<br>&#125;<br><span class="hljs-built_in">Object</span>.defineProperty(object, <span class="hljs-string">&#x27;name&#x27;</span>, descriper)<br><br>expect(object).to.be.ownPropertyDescriptor(<span class="hljs-string">&#x27;name&#x27;</span>)<br>expect(object).to.be.ownPropertyDescriptor(<span class="hljs-string">&#x27;name&#x27;</span>, descriper)<br><span class="hljs-comment">//自定义错误</span><br>expect(object).to.be.ownPropertyDescriptor(<span class="hljs-string">&#x27;name&#x27;</span>, descriper, <span class="hljs-string">&#x27;it is impossible&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="lengthOf"></span></p><p><strong>.lengthOf .length</strong><br>判断值是否存在<code>length</code>属性且为指定值<br>方法 <code>type lengthOf = (value: number, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.lengthOf(<span class="hljs-number">3</span>)<br><span class="hljs-comment">//用于链式调用，但是不推荐</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.have.a.lengthOf.below(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="match"></span></p><p><strong>.match</strong><br>判断值是否与指定<code>正则</code>匹配<br>和普通<code>match</code>方法一样，所以主语就是<code>string</code><br><code>matches</code>效果与<code>match</code>相同<br><code>type match = (reg: Regexp, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.be.match(<span class="hljs-regexp">/^D.+l$/</span>)<br>expect(<span class="hljs-string">&#x27;2020-08-10&#x27;</span>).to.be.match(<span class="hljs-regexp">/^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;$/</span>)<br>expect(<span class="hljs-string">&#x27;13456787654&#x27;</span>).to.be.match(<span class="hljs-regexp">/^1[^12]\d&#123;9&#125;$/</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="string"></span></p><p><strong>.string</strong><br>判断值是否包含指定的字符串<br><code>type string = (value: string, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">expect(<span class="hljs-string">&#x27;Daniel&#x27;</span>).to.be.have.a.string(<span class="hljs-string">&#x27;iel&#x27;</span>)<br>expect(<span class="hljs-string">&#x27;hello&#x27;</span>).to.be.not.have.a.string(<span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-comment">//必须是连续子串</span><br>expect(<span class="hljs-string">&#x27;world&#x27;</span>).to.be.not.have.a.string(<span class="hljs-string">&#x27;rd&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="keys"></span></p><p><strong>.keys</strong><br>用于判断<code>数组</code>、<code>对象</code>、<code>Set</code>、<code>Map</code>等是否包含相应的<code>key</code><br><code>type keys = (...args: Array&lt;string | number&gt;) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//普通使用需要将所有key全部传入</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;).to.be.have.keys(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).to.be.have.keys(<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])).to.be.have.keys(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>expect(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[ <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span> ]])).to.be.have.keys(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-comment">//配合all 和 any 使用</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;).to.be.have.any.keys(<span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;).to.be.be.have.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-comment">//包含</span><br>expect(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;).to.be.include.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-comment">//深层次比较</span><br>expect(&#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125; &#125; &#125;).to.be.have.deep.keys(<span class="hljs-string">&#x27;a.b&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="throw"></span></p><p><strong>.throw</strong><br>判断值是否抛出指定的错误、错误信息等。<br>.throw(errConstructor | string | reg) 是否抛出指定错误或字符串或匹配指定错误信息<br><code>type throw = (errorLike?: Error | Construcotr, errMsgMatcher?: string | Regexp, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> errors = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;oops&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">throw</span> errors &#125;<br><span class="hljs-comment">//当不确定会抛出哪一种错误时，直接不传参数</span><br>expect(error).to.be.throw()<br><span class="hljs-comment">//传递具体的错误类型</span><br>expect(error).to.be.throw(<span class="hljs-built_in">TypeError</span>)<br><span class="hljs-comment">//传递错误实例</span><br>expect(error).to.be.throw(errors, <span class="hljs-string">&#x27;oops&#x27;</span>)<br><span class="hljs-comment">//第二参数可为字符串，且表示为子串</span><br>expect(error).to.be.throw(errors, <span class="hljs-string">&#x27;oop&#x27;</span>)<br><span class="hljs-comment">//也支持正则</span><br>expect(error).to.be.throw(<span class="hljs-built_in">TypeError</span>, <span class="hljs-regexp">/.+/</span>)<br><span class="hljs-comment">//可直接传递字符串表示抛出的错误内容</span><br>expect(error).to.be.throw(<span class="hljs-string">&#x27;oop&#x27;</span>)<br><span class="hljs-comment">//同样支持正则</span><br>expect(error).to.be.throw(<span class="hljs-regexp">/^o.+s$/</span>)<br><span class="hljs-comment">//断言后的主语更改为错误对象</span><br>errors.code = <span class="hljs-number">404</span><br>expect(error).to.be.throw(errors).and.that.have.a.property(<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-number">404</span>)<br></code></pre></td></tr></table></figure><p><code>throws</code> 和 <code>Throw</code>同义🙆<br><a href="#top">顶</a></p><p><span id="respondTo"></span></p><p><strong>.respondTo</strong><br>用于判断一个对象或构造函数是否有相关的方法<br><code>type respondTo = (methodName: string ,errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Father.prototype.sayFather = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Father.saySon = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-comment">//正常响应所有方法</span><br>expect(<span class="hljs-keyword">new</span> Father()).to.be.respondTo(<span class="hljs-string">&#x27;sayFather&#x27;</span>)<br><span class="hljs-comment">//实例无法获取超集静态属性</span><br>expect(<span class="hljs-keyword">new</span> Father()).to.be.not.respondTo(<span class="hljs-string">&#x27;saySon&#x27;</span>)<br>expect(&#123;&#125;).to.be.respondTo(<span class="hljs-string">&#x27;toString&#x27;</span>)<br><span class="hljs-comment">//添加itself只能响应自身的方法</span><br>expect(Father).to.be.itself.respondTo(<span class="hljs-string">&#x27;saySon&#x27;</span>).but.not.respondTo(<span class="hljs-string">&#x27;sayFather&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>respondsTo</code>与此方法同义<br><a href="#top">顶</a></p><p><span id="itself"></span></p><p><strong>.itself</strong><br>配合上述的<code>respondTo</code>方法判断值是否响应指定的方法，但是为自身的方法，不包含<code>prototype</code>上的方法<br>具体事例可以看上面的<code>respondTo</code><br><a href="#top">顶</a></p><p><span id="satisfy"></span></p><p><strong>.satisfy</strong><br>接收一个函数作为参数，函数参数为断言目标值，返回值为boolean，判断是否通过断言</p><ul><li><code>type satisfy = (method: (target: any) =&gt; boolean, errmsg?: string) =&gt; any</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//目标值在[0, 100]内</span><br>expect(<span class="hljs-number">100</span>).to.be.satisfy(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> target &gt;= <span class="hljs-number">0</span> &amp;&amp; target &lt;= <span class="hljs-number">100</span><br>&#125;)<br>expect(<span class="hljs-number">100</span>).to.be.satisfies(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> target &gt;= <span class="hljs-number">0</span> &amp;&amp; target &lt;= <span class="hljs-number">100</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><code>satisfies</code>与此方法同义<br><a href="#top">顶</a></p><p><span id="closeTo"></span></p><p><strong>.closeTo</strong><br>指定值（仅<code>数字</code>）是否在期望值的接收范围内<br>此方法与<code>within</code>的区别就是within接收的两个参数是上限和下限<br><code>closeTo</code>的参数，第一参数为期望的中间值，第二参数为上下限（第一参数加减第二参数）</p><ul><li><code>type closeTo = (expected: number, delta: number, errmsg?: string) =&gt; any</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//指定值在[-90, 110]之间</span><br>expect(<span class="hljs-number">100</span>).to.be.closeTo(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br><span class="hljs-comment">//包含临界值</span><br>expect(<span class="hljs-number">110</span>).to.be.closeTo(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br>expect(-<span class="hljs-number">90</span>).to.be.closeTo(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>虽然此方法可以用于判断值是否在一个区间内，但是直接使用<code>equal</code>进行相等判断一样可以<br><a href="#top">顶</a></p><p><span id="members"></span></p><p><strong>.members</strong><br>类似于contains、include，但是接收参数为数组，主语只能是数组<br><code>type members = (target: Array&lt;any&gt;, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//主语必须为数组</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.have.members([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment">//非简单类型数组需配合deep</span><br>expect([ &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125; ]).to.be.have.deep.members([ &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125; ])<br><span class="hljs-comment">//配合orderd来强制数组顺序与主语一致</span><br>expect([ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ]).to.be.have.ordered.members([ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ])<br><span class="hljs-comment">//配合include链式调用可以对不必要的数组项不进行验证</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.include.members([ <span class="hljs-number">1</span>, <span class="hljs-number">2</span> ])<br><span class="hljs-comment">//相对于验证不存在的数组项推荐使用include</span><br>expect([<span class="hljs-number">1</span>]).to.be.not.include(<span class="hljs-number">2</span>).and.not.include(<span class="hljs-number">3</span>)<br><span class="hljs-comment">//复合使用</span><br>expect([ &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125; ]).to.be.include.deep.ordered.members([ &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; ])<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="oneOf"></span></p><p><strong>.oneOf</strong><br>判断值是否出现在指定数组中<br><code>type oneOf = (list: Array&lt;any&gt;, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//断言值在指定数组中</span><br>expect(<span class="hljs-number">100</span>).to.be.oneOf([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">100</span>])<br><span class="hljs-comment">//推荐直接使用equal</span><br>expect(<span class="hljs-number">100</span>).to.be.equal(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="change"></span></p><p><strong>.change</strong><br>判断方法是否会改变指定的值，主语接收的是一个改变判定对象的值的方法<br>可以把它当做是<code>increase</code>和<code>decrease</code>的结合<br>但是推荐直接使用上述两个方法<br><code>type change = (value: ((value: any) =&gt; any) | any, prop?: string, errmsg?: string) =&gt; any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//普通值</span><br><span class="hljs-keyword">let</span> number = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-keyword">let</span> array = [ <span class="hljs-number">0</span> ]<br><span class="hljs-keyword">let</span> object = &#123; <span class="hljs-number">0</span>: <span class="hljs-number">0</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeNumber</span>(<span class="hljs-params"></span>) </span>&#123; number ++ &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeString</span>(<span class="hljs-params"></span>) </span>&#123; string += <span class="hljs-number">1</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeArray</span>(<span class="hljs-params"></span>) </span>&#123; array[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeObject</span>(<span class="hljs-params"></span>) </span>&#123; object[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span> &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNumber</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> number &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getString</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> string &#125;<br><br><span class="hljs-comment">//普通值需要借助函数</span><br><span class="hljs-comment">//数字</span><br>expect(changeNumber).to.be.change(getNumber)<br><span class="hljs-comment">//字符串</span><br>expect(changeString).to.be.change(getString)<br><span class="hljs-comment">//复合值则需添加第二参数，改变的属性名</span><br><span class="hljs-comment">//数组</span><br>expect(changeArray).to.be.change(array, <span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-comment">//对象</span><br>expect(changeObject).to.be.change(object, <span class="hljs-string">&#x27;0&#x27;</span>)<br><br><span class="hljs-comment">//结合by具体断言改变的范围</span><br>expect(changeNumber).to.be.change(getNumber).by(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="increase"></span><br><span id="decrease"></span></p><p><strong>.increase | .decrease</strong><br><code>increase</code> 判断方法是否会增加指定对象的属性或者普通值的值<br><code>decrease</code> 判断方法是否会减少指定对象的属性或者普通值的值<br><code>const increase = (value: any, prop?: string, errmsg?: string)</code><br><code>const decrease = (value: any, prop?: string, errmsg?: string)</code><br>并且只能是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//普通值</span><br><span class="hljs-keyword">let</span> number = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">increase</span>(<span class="hljs-params"></span>) </span>&#123; number ++ &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decrease</span>(<span class="hljs-params"></span>) </span>&#123; number -- &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> number &#125;<br>expect(increase).to.be.increase(get)<br>expect(decrease).to.be.decrease(get)<br><br><span class="hljs-comment">//对象</span><br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">objIncrease</span>(<span class="hljs-params"></span>) </span>&#123; obj.a ++ &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">objDecrease</span>(<span class="hljs-params"></span>) </span>&#123; obj.a -- &#125;<br>expect(objIncrease).to.be.increase(obj, <span class="hljs-string">&#x27;a&#x27;</span>)<br>expect(objDecrease).to.be.decrease(obj, <span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">//数组</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayIncrease</span>(<span class="hljs-params"></span>) </span>&#123; arr[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayDecrease</span>(<span class="hljs-params"></span>) </span>&#123; arr[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span> &#125;<br>expect(arrayIncrease).to.be.increase(arr, <span class="hljs-string">&#x27;0&#x27;</span>).by(<span class="hljs-number">2</span>)<br>expect(arrayDecrease).to.be.decrease(arr, <span class="hljs-string">&#x27;0&#x27;</span>).by(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">//通过by判断增加的幅度</span><br>expect(objIncrease).to.be.increase(obj, <span class="hljs-string">&#x27;a&#x27;</span>).by(<span class="hljs-number">1</span>)<br>expect(objDecrease).to.be.decrease(obj, <span class="hljs-string">&#x27;a&#x27;</span>).by(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="extensible"></span></p><p><strong>.extensible</strong><br>判断指定值是否可扩展(不可以添加新属性)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span>,<br>  <span class="hljs-attr">sayName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>  &#125;<br>&#125;<br><span class="hljs-comment">//设置对象为不可扩展</span><br><span class="hljs-built_in">Object</span>.preventExtensions(object)<br><span class="hljs-comment">//可修改</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.name = <span class="hljs-string">&#x27;Mike&#x27;</span><br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-comment">//可删除</span><br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-keyword">delete</span> object.name<br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-comment">//不可新增</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//使用</span><br>expect(object).to.be.extensible<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="sealed"></span></p><p><strong>.sealed</strong><br>判断指定值是否封闭(不可添加新属性、不可删除旧属性、可修改旧属性)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span>,<br>  <span class="hljs-attr">sayName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>  &#125;<br>&#125;<br><span class="hljs-comment">//设置对象为封闭</span><br><span class="hljs-built_in">Object</span>.seal(object)<br><br><span class="hljs-comment">//不可新增</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//可修改</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.name = <span class="hljs-string">&#x27;Mike&#x27;</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//不可删除</span><br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-keyword">delete</span> object.name<br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//使用</span><br>expect(object).to.be.sealed<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="frozen"></span></p><p><strong>.frozen</strong><br>判断值是否冻结(不可添加新属性、不可删除旧属性、不可修改旧属性)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Daniel&#x27;</span>,<br>  <span class="hljs-attr">sayName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//设置对象为冻结</span><br><span class="hljs-built_in">Object</span>.freeze(object)<br><br><span class="hljs-comment">//不可新增</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//不可修改</span><br><span class="hljs-built_in">console</span>.log(object)<br>object.name = <span class="hljs-string">&#x27;Mike&#x27;</span><br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//不可删除</span><br><span class="hljs-built_in">console</span>.log(object)<br><span class="hljs-keyword">delete</span> object.name<br><span class="hljs-built_in">console</span>.log(object)<br><br><span class="hljs-comment">//使用</span><br>expect(object).to.be.frozen<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="by"></span></p><p><strong>.by</strong><br>配合<code>descrease</code> 或 <code>increase</code>、 <code>change</code>等来判断断言值是否发生变化在指定范围内<br>具体事例🌰可以直接查看上述三个方法的例子👆<br><a href="#top">顶</a></p><p><span id="fail"></span></p><p><strong>.fail</strong><br>判断是否会失败<br>有两种参数传递方式</p><ol><li><code>type fail = (message?: string) =&gt; any</code></li><li><code>type fail = (actual: any, expected: any, message?: string, operator: string) =&gt; any</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//以下均会出错</span><br><span class="hljs-comment">//直接使用</span><br>expect.fail()<br>expect.fail(<span class="hljs-string">&#x27;it is error&#x27;</span>)<br><span class="hljs-comment">//值判断</span><br>expect.fail(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;it is impossible&#x27;</span>)<br>expect.fail(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;it is impossible&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><p><span id="ordered"></span></p><p><strong>.ordered</strong><br>配合<code>members</code>用于指定<code>members</code>参数数组的顺序与主语数组的顺序一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//members参数必须按顺序</span><br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.ordered.members([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>expect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).to.be.not.ordered.members([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p><a href="#top">顶</a></p><h2 id="完结">完结</h2><p>😊<br>如果有什么不对的地方，请指出。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chai</tag>
      
      <tag>BDD</tag>
      
      <tag>expect</tag>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有趣的css属性content</title>
    <link href="/2020/08/13/%E6%9C%89%E8%B6%A3%E7%9A%84css%E5%B1%9E%E6%80%A7content/"/>
    <url>/2020/08/13/%E6%9C%89%E8%B6%A3%E7%9A%84css%E5%B1%9E%E6%80%A7content/</url>
    
    <content type="html"><![CDATA[<p>今天说一个非常有趣的<code>css</code>属性<code>content</code>，可能很多人都会说，这个属性谁会不知道，对于一些老手来说，这个属性确实可能是经常会用到，但是总会有你没有发现的地方，今天就来好好的讲讲这个有趣的<code>css</code>属性。<br>以下知识内容均来自于<a href="https://www.zhangxinxu.com/">张鑫旭的《css世界》</a>，有兴趣的可以去看看。</p><h2 id="content-介绍">content 介绍</h2><p><code>content</code>用于元素内容的展示，平常用的多的地方在于内容前后的具体文字内容或者是图片。图片其实没有很多好介绍，但是关于文字方面，它有很多种的类型，下面就一一将<code>content</code>的值类型进行介绍。</p><h3 id="content-属性">content 属性</h3><ol><li><strong>normal</strong></li></ol><p>这是<code>content</code>属性的默认值，在伪元素中会被认定为<code>none</code></p><ol start="2"><li><strong>none</strong></li></ol><p>指定不产生伪元素</p><ol start="3"><li><strong>url</strong></li></ol><p>可以使用图片来进行展示，比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/images/有趣的css属性content/css世界.jpg&#x27;</span>);</span><br><span class="css">    <span class="hljs-attribute">display</span>: block;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下图</p><img src="/images/有趣的css属性content/url-show.png" width="188" height="334" /><p><code>url</code>的参数有很多种，最常用的就是路径<br>然后就是<code>icon</code>、<code>svg</code>、<code>base64</code>编码的图片，但是不支持<code>css3渐变</code>背景图。</p><p>虽然有这种方法可以生成图片，但是实际中并无太大用处，原因就在于无法通过设置宽高来改变图片的固有尺寸。</p><p>一般都是使用<code>background-image</code>来实现相关的功能。</p><p>不过<code>base64</code>形式却能解决上面的问题<br>一般情况下图片在加载过程中都会存在尺寸为<code>0</code>的时候，所以在加载完成时页面会存在图片晃动的情况。<br><code>base64</code>图片没有这个过程。<br>但是<code>base64</code>也有不好的地方，比如，<code>base64</code>编码后的图片体积比之前要大上1/3左右。</p><ol start="4"><li><strong>attr</strong></li></ol><p><code>attr</code>和它名字一样，它能够选择到该元素身上的属性。<br>比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">img</span>&#123;</span><br><span class="css">  <span class="hljs-attribute">text-align</span>:center;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">  <span class="hljs-attribute">content</span>: <span class="hljs-built_in">attr</span>(width);  </span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><img src="/images/有趣的css属性content/attr-show.png" width="188" height="334" /><p>这样可以显示到<code>img</code>元素的<code>width</code>属性的值。<br>并且，它还能够获取到自定义属性的值，比如<code>attr(data-name)</code></p><p>注意一下，这里的属性名称是不需要<strong>引号</strong>的。</p><ol start="5"><li><strong>string</strong></li></ol><p>这个的话我想应该不用多说，大家用的也是相当熟练的。但是不知道大家有没有使用过<code>Unicode</code>字符？<br>在书中发现了一个利用此特性的小栗子🌰，感觉非常好用，这里写出来给大家参考一下。<br>下面实现了一个动态loading加载的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  dot&#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>:inline-block;</span><br><span class="css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">1em</span>;</span><br><span class="css">    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">1</span>;</span><br><span class="css">    <span class="hljs-attribute">overflow</span>:hidden;</span><br><span class="css">    <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="css">    <span class="hljs-attribute">vertical-align</span>: -.<span class="hljs-number">25em</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  dot<span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;...\A..\A.&#x27;</span>;</span><br><span class="css">    <span class="hljs-attribute">animation</span>: loading <span class="hljs-number">3s</span> infinite step-start both;</span><br><span class="css">    <span class="hljs-attribute">display</span>:block;</span><br><span class="css">    <span class="hljs-attribute">white-space</span>: pre-wrap;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-keyword">@keyframes</span> loading &#123;</span><br><span class="css">    <span class="hljs-number">33%</span> &#123; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">2em</span>); &#125;</span><br><span class="css">    <span class="hljs-number">66%</span> &#123; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">1em</span>); &#125;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>加载中<br>  <span class="hljs-tag">&lt;<span class="hljs-name">dot</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面是效果，可能图片看起来有些不流畅，但是实际效果是流畅的。</p><img src="/images/有趣的css属性content/loading.GIF" width="376" height="668" /><p>这一方法的好处就是相当好的兼容性，它利用上述特性和<code>css3</code>的动画效果来实现。</p><p>并且在低版本浏览器下虽然支持不了<code>animation</code>属性，但是它也能良好的展示静态效果。</p><ol start="6"><li><strong>open-quote、close-quote</strong></li></ol><p>关于这个属性，算是一个好用却又不实用的属性吧，它本身良好的特性可以完成平常的许多业务问题，但是却又显得没有那么必要。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="css">    <span class="hljs-attribute">quotes</span>: <span class="hljs-string">&#x27;提问: &quot;&#x27;</span> <span class="hljs-string">&#x27;&quot;&#x27;</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="css">    <span class="hljs-attribute">quotes</span>: <span class="hljs-string">&#x27;回答: &quot;&#x27;</span> <span class="hljs-string">&#x27;&quot;&#x27;</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: open-quote;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: close-quote;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ques&quot;</span>&gt;</span>为什么我这么帅？<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;answ&quot;</span>&gt;</span>天生的！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/images/有趣的css属性content/quotes-show.png" width="188" height="334" /><p>还有<code>no-open-quote</code> <code>no-close-quote</code>，和名字一下，就是在开始和结束不需要该内容。</p><ol start="7"><li><strong>counter</strong></li></ol><p>接下来最后要着重介绍的一个属性，<code>counter</code>。计数器。</p><p>大家应该有见过<code>word</code>文档中的那种标题吧，其实那种样式可以通过<code>css</code>来自动生成。<br>没有错，用到的就是现在介绍的这个属性。<br>它只需要几行css代码就能实现那样的效果。</p><p>首先是相关的几个属性。<br><code>counter-reset</code> <code>counter-increment</code> <code>counter()</code> <code>counters()</code></p><p>使用步骤如下：</p><ul><li><strong>定义计数器名称 counter-reset</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-reset</span>: counter-name <span class="hljs-number">2</span>;  </span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(counter-name);</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是counter计数器的初始值: <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面定义了一个计数器，名称叫<code>counter-name</code> 并且起始为2<br><img src="/images/有趣的css属性content/counter-init-show.png" width="188" height="334" /></p><p>关于后面<code>起始数字</code>的问题，也可以是<code>负数</code>，也可以写成<code>小数</code>。<br>不过对于<code>ie</code>和<code>firefox</code>是直接无视的，默认为<code>0</code>，而对于<code>chrome</code>来说则是处理成向下取整。</p><p>你也可以同时定义多个计数器。如下<br><code>counter-reset: coutner-name1 3 counter-name2 4</code></p><ul><li><strong>递增</strong></li></ul><p>第一步中实现的是显示计数器的值，而此步骤则是真正能让计数器开始计数的关键。</p><p><code>counter-increment</code> 用来让计数器累加，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-reset</span>: counter;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;递增前我是: &#x27;</span> <span class="hljs-built_in">counter</span>(counter);</span><br><span class="css">    <span class="hljs-attribute">display</span>:block;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-increment</span>: counter <span class="hljs-number">2</span>;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;递增后我是: &#x27;</span> <span class="hljs-built_in">counter</span>(counter);</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如下图所示</p><img src="/images/有趣的css属性content/counter-increment-show.png" width="188" height="334" />  <p>上面指定了<code>counter</code>计数器增加了<code>2</code>，后面的数字也可以是<code>负值</code>，这样就实现了递减的效果。</p><p>需要注意的是，虽然在不同元素上计数器并不会产生效果，但是如果在其中使用了<code>counter-increment</code>那么它就会产生效果。</p><p><code>counter()</code>和<code>counters()</code>还有一些参数可以选择</p><blockquote><p>counter(name, style)<br>counters(name, string)<br>counters(name, string, style)</p></blockquote><p><code>strig</code>就是连接符</p><p><code>style</code>的话，它的值和<code>list-style</code>的值相同<br>所以在展示时，可以不一定显示数字，也可以显示其他的字符。<br>具体可以参考 <a href="https://www.w3school.com.cn/css/pr_list-style-type.asp">list-style</a></p><p>比如下面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-reset</span>: counter;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;我有多帅?&#x27;</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.counter</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">counter-increment</span>: counter;</span><br><span class="css">    <span class="hljs-attribute">quotes</span>: <span class="hljs-string">&#x27;绝对&quot;&#x27;</span> <span class="hljs-string">&#x27;+&quot;啊&#x27;</span>;</span><br><span class="css">    <span class="hljs-attribute">content</span>: open-quote <span class="hljs-built_in">counters</span>(counter, <span class="hljs-string">&#x27;-&#x27;</span>, upper-latin) close-quote;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;counter&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>效果如下图<br><img src="/images/有趣的css属性content/quotes-show.png" width="188" height="334" /></p><p>关于前面说的<code>word</code>文档标题的级联效果，用到的就是<code>counters()</code>这个方法</p><p>下面是简单的效果。</p><pre><code class="language-html">&lt;style&gt;  .reset&#123;    counter-reset: counter;  &#125;  .counter::after&#123;    counter-increament: counter;    content: couters(counter, '-') '.';  &#125;&lt;/style&gt;&lt;div class=&quot;reset&quot;&gt;  &lt;div class=&quot;counter&quot;&gt;    第一    &lt;div class=&quot;reset&quot;&gt;      &lt;div class=&quot;counter&quot;&gt;第一一&lt;/div&gt;      &lt;div class=&quot;counter&quot;&gt;第一二&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;div class=&quot;counter&quot;&gt;    第二    &lt;div class=&quot;reset&quot;&gt;      &lt;div class=&quot;counter&quot;&gt;        第二一        &lt;div class=&quot;reset&quot;&gt;          &lt;div class=&quot;counter&quot;&gt;第二一&lt;/div&gt;          &lt;div class=&quot;counter&quot;&gt;第二二&lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;counter&quot;&gt;第二二&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;    &lt;div class=&quot;counter&quot;&gt;    第三  &lt;/div&gt;&lt;/div&gt;</code></pre><p>效果如下图</p><img src="/images/有趣的css属性content/counters.png" width="188" height="334" />  <h2 id="完结">完结</h2><p>合理的使用css属性可以让你在实际开发过程中减少很多的工作，使用css完成的效果总比用css完成性能要好的多。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>content</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React日历组件</title>
    <link href="/2020/07/26/React%E6%97%A5%E5%8E%86%E7%BB%84%E4%BB%B6/"/>
    <url>/2020/07/26/React%E6%97%A5%E5%8E%86%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>这是本人写的第一篇文章，欢迎各位观看的朋友👭。<br><img src="/images/React日历组件/2de9716fa4db0bdb643f6a0e87ad6819.JPG" width=100 height=100 /><br>先介绍一下自己，本人是一个刚刚进入社会的前端菜鸟，目前服务于一家公司🏭。</p><h2 id="1-故事背景">1 故事背景</h2><p>事情是这样的，最近在公司的h5项目中碰到一个需求，页面中需要有一个用于显示最近订单的日历样式，你没有看错，一个日历，这给我难到了，本来想着不就是是一个日历吗，这有什么难的，后来我发现好像似乎是高估了自己。</p><p>先介绍下关于这个日历的样式，大家可以自行脑补一下苹果中自带的日历或看下图，基本和它差不多。多了一点需求是，在点击某一个日期或者是手指滑动过程中，日历下方的订单列表会根据日期的变动自动跳转到当前日期的订单。<br><img src="/images/React日历组件/IMG_0144.PNG" width=188 height=334 /><br><img src="/images/React日历组件/IMG_0145.PNG" width=188 height=334 /></p><p>因为项目用的技术栈是React，似乎理所应当该用 Ant Design 来完成，就pc端而言，Ant Design 的<a href="https://ant.design/components/calendar-cn/">日历组件</a>相对于来说算是非常不错且还算契合的，奈何h5使用的是Ant Design Mobile，相对于来说的话，以个人之见，确实还有许多可以改进的地方，mobile中的<a href="https://mobile.ant.design/components/calendar-cn/">日历组件</a>很多地方表现的还是不够灵活，有些地方还是过于定制化，还可以进一步完善。</p><p>所以，经过自己再三的对mobile的Calendar组件的修改（瞎78乱搞）以及思想斗争（不想搞了）之后。终于，选择自己做封装，在封装的过程中，也让本人学习到了一些之前还没有注意的东西。今天也一并作介绍，这也是对新知识的再一次复习。</p><h2 id="2-正片开始">2 正片开始</h2><p>这里先不介绍具体业务上关于列表跳转方面的内容。只对日历相关作介绍🙂。</p><h3 id="Date">Date</h3><p>首先是与日历有重要关系的API Date。可能很多人会说，不会吧，不会吧，不会还有人会去用原生Date吧。现在确实在momentjs和dayjs面前，原生Date的操作确实显得有些复杂，但是总归来说还是要好好学习原生js的知识，这样才能有更好的提升。总的来说，多学总不会错（虽然还是很懒）。</p><ol><li>日期创建<br><code>new Date()</code></li></ol><ul><li>默认不传参数时，返回的当前的时间 <code>new Date()</code></li><li>传递时间戳 <code>new Date(19999009090)</code></li><li>或者再放一个Date实例 <code>new Date(new Date())</code></li><li>一般情况下是按顺序 年、月、日… <code>new Date(2020, 6, 1)</code></li><li>需要注意的是，关于月份的参数，范围是0-11。</li></ul><p>有些情况下在需要做相关计算时，传递参数会给我们省下很多功夫<br>比如：<br><strong>获取当前月份的天数</strong><br>比如现在是7月份，你想计算上一月份的天数，你可以这样<br><code>new Date(2020, 6, 0).getDate() //30</code><br>当参数day为0时，month会自动-1，相当于<code>new Date(2020, 6, 30)</code><br><strong>获取当前月第一天或者最后一天的信息</strong><br>原理同上，可以这样<code>new Date(2020, 6).getDay()</code>，表示7月第一天星期几<br>2. 日期设置<br><code>setDate()</code> 设置几号<br><code>setMonth()</code> 设置几月，注意和之前说的一样，范围是0-11<br><code>setFullYear()</code> 设置年份，setYear的替代版<br>3. 日期获取<br><code>getTime()</code> 返回自1970年1月1日到现在的毫秒数<br><code>getDay()</code> 星期几（范围是0-6，一个星期从星期天开始）<br><code>getDate()</code> 几号<br><code>getMonth()</code> 几月<br><code>getFullYear()</code> 哪一年</p><p>有了这几个API的支持，在做一些日期计算时会显得非常的方便。</p><h3 id="Grid">Grid</h3><p>第二个介绍的与js无关，与css相关，是关于日历的布局问题。Grid栅格布局，听说这玩意儿老早就出了，奈何本人眼界窄居然现在才知道，用了之后发现这个东西真的好香，本人认为是非常适合做像日历这样的组件工具的布局。</p><p>相关用到API有如下（后面的图基本都来自己<a href="http://www.ruanyifeng.com/home.html">阮一峰老师</a>的博客）</p><p><strong>容器样式</strong></p><ol><li>display<br>可以是块级栅格 <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032504.png" alt="grid"><br>也可以是行内栅格 <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032505.png" alt="inline-grid"><br>和普通的行内块级意思一样，行内能有多个栅格布局并排<br>另一个需要注意的地方是在gird布局下，有一些样式的设置无法产生效果，比如:</li></ol><blockquote><p>float、display: inline-block、display: table-cell、vertical-align和column-*</p></blockquote><ol start="2"><li>grid-template-columns &amp; grid-template-rows<br>用于定义grid布局下行和列的数量，它的值有很多种</li></ol><ul><li>长度单位<br><code>grid-template-columns: 100px 100px 100px;</code><br><code>grid-template-rows: 100px 100px 100px;</code><br>这样就形成了一个 3行三列的布局<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png" alt=""></li><li>fr<br>意思大概就是一个片段，比如<br><code>grid-template-columns: 1fr 1fr;</code><br>意思是将整体布局分割成相等的两列<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032509.png" alt=""><br><code>grid-template-columns: 150px 1fr 2fr;</code><br>意思是第二个片段是第一个的两倍<img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032510.png" alt=""></li><li>repeat函数<br>有时候你会觉得一个个设置块的宽度很麻烦，repeat函数可以将你设定的块数据进行指定的重复<br><code>grid-template-columns: repeat(3, 100px);</code><br>等同于<br><code>grid-template-columns: 100px 100px 100px;</code><br>还可以使用关键字 <code>auto-fill</code><br><code>grid-template-columns: repeat(auto-fill, 100px);</code><br>它会持续平铺100px宽的块直到当前行宽度不足时，换行</li><li>minmax函数<br><code>grid-template-columns: 100px minmax(100px, 200px) 100px;</code><br>表示中间列的宽度范围在100px 和 200px之间<br>参数也支持 fr 关键字</li><li>auto<br>当你指定了3列，并设置了两列的宽度，且希望另一列宽度自适应时，可以使用此关键字。如<br><code>grid-template-columns: 100px auto 100px;</code>中间列会自动自适应</li></ul><ol start="3"><li><p>grid-row-gap &amp; grid-columns-gap &amp; grid-gap<br>设置各个单元格之间的间距<br><code>grid-row-gap: 20px;</code><br><code>grid-column-gap: 20px;</code><br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032511.png" alt=""><br>grid-gap则是前两个的混合写法</p></li><li><p>justify-items &amp; align-items &amp; place-items<br>值：<code>start | end | center | stretch</code><br>设置单元格的水平垂直对齐方式，参数和flex差不多就不说了（懒）</p></li><li><p>justify-content &amp; align-content &amp; place-content<br>值：<code>start | end | center | stretch | space-around | space-between | space-evenly</code><br>容易的水平垂直对齐方式，参数和flex差不多就不说了（懒）</p></li></ol><p><strong>项目样式</strong></p><ol><li>grid-column-start &amp; grid-column-end &amp; grid-row-start &amp; grid-row-end<br>就和名字差不多的意思，他可以让单元格的放置位置发生偏移，有了这个属性，可以让本项目中日历的月开头发生偏移而不必做其他的js操作。<br>按照阮老师上面说的可能更容易理解，容器分成了指定的行和列，也会随即生成类似表格的边框线，但是不会显示。所以偏移的按照网格线的索引进行偏移。<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032503.png" alt=""><br>比如<br><code>grid-column-start: 2;</code> 表示某一单元格的起始位置是容器的列网格线的第二根。<br><code>grid-column-end: 4;</code> 表示某一但云哥的结束位置是容器的列网格线的第四根。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032526.png" alt=""></li></ol><p><strong>其他属性</strong></p><p><code>grid-column-end</code> 单元格的列结束位置<br><code>grid-row-start</code> 单元格的行起始位置<br><code>grid-row-end</code> 单元格的行结束位置</p><ol start="2"><li>justify-self &amp; align-self &amp; place-self<br>设置单元格的水平垂直对齐方式，和上面容器的<code>justify-items</code>等效果相同，只是此属性是针对单个单元格的。<br>【具体细节相关的API可以参考<a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">阮一峰老师的博客</a>或者自行查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid">MDN</a>进行了解】</li></ol><h3 id="Calendar">Calendar</h3><p>具体样式查看下图</p><ol><li><p>单日着重<br><img src="/images/React日历组件/1595859653524_95CA67F7-E00E-4AA0-A51C-85895C099433.png" width="200" height="100" /></p></li><li><p>周着重<br><img src="/images/React日历组件/1595859783955_DE771404-5E95-4876-BA63-44D01118D2EF.png" width="200" height="100" /></p></li><li><p>色调更改<br><img src="/images/React日历组件/1595859830441_DBC34DF0-2308-4DBB-90F7-A70B70795B82.png" width="200" height="100" /></p></li><li><p>显示单周<br><img src="/images/React日历组件/1595860081764_790B7081-F485-487D-9B74-5E88C13FD5FF.png" width="200" height="100" /></p></li><li><p>设置额外内容<br><img src="/images/React日历组件/15938957-5F8F-4A7A-9F91-544D239677EC.png" width="200" height="100" /></p></li></ol><p>因为每一个单元格外层设置了相对定位<code>relative</code>，所以如果不希望额外内容导致个别单元格位置不统一，可以将内容设置为<code>position: absolute;</code></p><p>具体的其他功能可查看下方API</p><p><strong>API</strong></p><table><thead><tr><th style="text-align:center">props</th><th style="text-align:center">说明</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">collapse</td><td style="text-align:center"><div style="width:300pt">是否折叠，折叠时只显示一周的日期</div></td><td style="text-align:center">boolean</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">lunerVisible</td><td style="text-align:center">是否显示农历时间</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">showToday</td><td style="text-align:center">是否着重显示当天，对当天时间着重表示</td><td style="text-align:center">boolean</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">showWeek</td><td style="text-align:center">是否着重显示当前周，对本周时间着重表示，当showToday和showWeek同时存在时，showWeek生效</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">activeStyle</td><td style="text-align:center">着重显示的样式，可以自定义着重显示的样式</td><td style="text-align:center">Object</td><td style="text-align:center">{}</td></tr><tr><td style="text-align:center">value</td><td style="text-align:center">当前时间，可配合rc-form进行使用，不传递此参数时由内部控制状态变化</td><td style="text-align:center">Date</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">onChange</td><td style="text-align:center">监听日期时间变化</td><td style="text-align:center">(date: Date) =&gt; any</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">hot</td><td style="text-align:center">日期下着重点</td><td style="text-align:center">是否显示农历时间</td><td style="text-align:center">Array<Date></td></tr><tr><td style="text-align:center">renderHeader</td><td style="text-align:center">日历的header</td><td style="text-align:center">(date: Date) =&gt; ReactNode</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">renderFooter</td><td style="text-align:center">日历的footer</td><td style="text-align:center">(date: Date) =&gt; ReactNode</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">renderDateFooter</td><td style="text-align:center">每日的footer</td><td style="text-align:center">(date: Date) =&gt; ReactNode | ReactNode</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">colorStyle</td><td style="text-align:center">日历的整体颜色风格</td><td style="text-align:center">颜色（目前只支持十六进制颜色）</td><td style="text-align:center">#00CC73</td></tr><tr><td style="text-align:center">showLastNext</td><td style="text-align:center">是否显示上下月份的时间以填充月前和月后的空缺</td><td style="text-align:center">boolean</td><td style="text-align:center">false</td></tr></tbody></table><p>还有一些方法供调用，可利用<code>ref</code>来获取相关方法</p><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">说明</th><th style="text-align:center">使用</th></tr></thead><tbody><tr><td style="text-align:center">getMonthStart</td><td style="text-align:center">当月第一天</td><td style="text-align:center">getMonthStart(month?, year?) =&gt; Date</td></tr><tr><td style="text-align:center">getMonthEnd</td><td style="text-align:center">当月最后一天</td><td style="text-align:center">getMonthEnd(month?, year?) =&gt; Date</td></tr><tr><td style="text-align:center">getMonthDays</td><td style="text-align:center">获取当月天数</td><td style="text-align:center">getMonthDays(month?, year?) =&gt; number</td></tr><tr><td style="text-align:center">getThisWeek</td><td style="text-align:center">本周开始和结束</td><td style="text-align:center">getThisWeek(date) =&gt; [start:Date, end:Date]</td></tr><tr><td style="text-align:center">lastYear</td><td style="text-align:center">去年</td><td style="text-align:center">lastYear(date?) =&gt; Date</td></tr><tr><td style="text-align:center">lastMonth</td><td style="text-align:center">上个月</td><td style="text-align:center">lastMonth(date?) =&gt; Date</td></tr><tr><td style="text-align:center">lastWeek</td><td style="text-align:center">上周</td><td style="text-align:center">lastWeek(date?) =&gt; Date</td></tr><tr><td style="text-align:center">lastDay</td><td style="text-align:center">昨天</td><td style="text-align:center">lastDay(date?) =&gt; Date</td></tr><tr><td style="text-align:center">nextYear</td><td style="text-align:center">明年</td><td style="text-align:center">nextYear(date) =&gt; Date</td></tr><tr><td style="text-align:center">nextMonth</td><td style="text-align:center">下个月</td><td style="text-align:center">nextMonth(date?) =&gt; Date</td></tr><tr><td style="text-align:center">nextWeek</td><td style="text-align:center">下周</td><td style="text-align:center">nextWeek(date?) =&gt; Date</td></tr><tr><td style="text-align:center">nextDay</td><td style="text-align:center">明天</td><td style="text-align:center">nextDay(date?) =&gt; Date</td></tr></tbody></table><p>从<code>lastYear</code>开始的后面几个方法，在传入Date参数时只会返回结果，若未传参数则组件状态由外部控制或由内部控制会触发<code>onChange</code>回调。</p><h2 id="3-结束">3 结束</h2><p>这就是此次所要说的所有，如有任何问题可直接联系我。如果觉得东西很烂可以直接指出。如果对此组件感兴趣可以去<a href="https://github.com/food-billboard/React-Component-Calendar">github</a>上给一个star✨，如果觉得文章内容对你有用，可以给一个赞👍或一个评论📚。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Component</tag>
      
      <tag>Calendar</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
